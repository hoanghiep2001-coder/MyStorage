{"version":3,"sources":["assets\\Scripts\\GamePlay\\GamePlay.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { CONST } from \"../Const/CONST\";\r\nimport GameInfo from \"../Const/GameInfo\";\r\nimport { GameController } from \"../Controller/GameController\";\r\nimport { SoundController } from \"../Controller/SoundController\";\r\nimport { UIController } from \"../Controller/UIController\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class GamePlay extends cc.Component {\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n    @property(UIController)\r\n    UIController: UIController = null;\r\n\r\n    @property([cc.Node])\r\n    Items: cc.Node[] = [];\r\n\r\n    @property(cc.Node)\r\n    buttonResult: cc.Node = null;\r\n    @property(cc.Node)\r\n    resultNode: cc.Node = null;\r\n\r\n\r\n    protected onLoad(): void {\r\n\r\n    }\r\n\r\n\r\n    protected start(): void {\r\n        // debug\r\n        // this.scheduleOnce(() => {\r\n        //     this.checkGridResult() && this.win();\r\n        // }, 1) \r\n        // this.randomSprites();\r\n        // this.shuffleGrid();\r\n        this.registerEvent();\r\n    }\r\n\r\n\r\n    // private randomSprites(): void {\r\n    //     const items: {pos: cc.Vec2, node: cc.Node}[] = [];\r\n    //     this.UIController.Grid.children.forEach((item => items.push({pos: item.getPosition(), node: item})));\r\n\r\n    //     for (let i = items.length - 1; i > 0; i--) {\r\n    //         const j = Math.floor(Math.random() * (i + 1));  // Random index\r\n    //         [items[i], items[j]] = [items[j], items[i]];  // Swap\r\n    //     }\r\n\r\n    //     this.UIController.Grid.children.forEach((item, index) => {\r\n    //         item.setPosition(items[index].pos);\r\n    //         GameInfo.Grid.currentStates[index].correctItemPos = new cc.Vec3(items[index].pos.x, items[index].pos.y, 0)\r\n    //         GameInfo.Grid.currentStates[index].currentItem = items[index].node;\r\n\r\n    //         if(index === this.UIController.Grid.children.length - 1) {\r\n    //             let blankItem = GameInfo.Grid.currentStates.find(state => this.areVec3Equal(items[index].pos, state.correctItemPos))\r\n                \r\n    //             if (blankItem) {\r\n    //                 blankItem.isNull = true; // Đánh dấu ô trống\r\n    //                 // cc.log(`Blank Item: ${blankItem.currentItem.name}`);\r\n    //             } else {\r\n    //                 cc.error(\"Không tìm thấy ô trống phù hợp trong currentStates.\");\r\n    //             }                \r\n    //         }\r\n\r\n    //     })\r\n    //     cc.log(GameInfo.Grid.currentStates);\r\n    // }\r\n\r\n\r\n    // private shuffleGrid(): void {\r\n    //     const gridStates = GameInfo.Grid.currentStates;\r\n    \r\n    //     // Fisher-Yates Shuffle\r\n    //     for (let i = gridStates.length - 1; i > 0; i--) {\r\n    //         const j = Math.floor(Math.random() * (i + 1));\r\n    //         [gridStates[i], gridStates[j]] = [gridStates[j], gridStates[i]];\r\n    //     }\r\n    \r\n    //     // Kiểm tra trạng thái có thể giải được\r\n    //     if (!this.isSolvable(gridStates)) {\r\n    //         this.shuffleGrid(); // Nếu không giải được, xáo trộn lại\r\n    //     }\r\n    \r\n    //     // Cập nhật vị trí UI\r\n    //     this.updateGridUI();\r\n    // }\r\n\r\n\r\n    // private isSolvable(gridStates: typeof GameInfo.Grid.currentStates): boolean {\r\n    //     let inversionCount = 0;\r\n    //     const items = gridStates.map(state => state.correctItemPos ? 1 : 0);\r\n    \r\n    //     for (let i = 0; i < items.length - 1; i++) {\r\n    //         for (let j = i + 1; j < items.length; j++) {\r\n    //             if (items[i] > items[j] && items[j] !== 0) {\r\n    //                 inversionCount++;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    \r\n    //     const emptyRow = this.getRowAndCol(gridStates.findIndex(state => state.isNull)).row;\r\n    \r\n    //     // Nếu số lượng đảo ngược và hàng trống (từ dưới đếm lên) tuân theo quy tắc, trạng thái là hợp lệ\r\n    //     const gridSize = Math.sqrt(items.length);\r\n    //     return gridSize % 2 === 0\r\n    //         ? (inversionCount + emptyRow) % 2 === 0\r\n    //         : inversionCount % 2 === 0;\r\n    // }\r\n\r\n\r\n    // private updateGridUI(): void {\r\n    //     GameInfo.Grid.currentStates.forEach((state, index) => {\r\n    //         if (state.currentItem) {\r\n    //             const correctPos = state.correctItemPos;\r\n    //             state.currentItem.setPosition(new cc.Vec3(correctPos));\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n\r\n    private registerEvent(): void {\r\n        this.buttonResult.on(cc.Node.EventType.TOUCH_START, this.handleShowHint, this);\r\n\r\n        this.UIController.Grid.children.forEach((item) => {\r\n            const item_mask = item.getChildByName(\"Mask\");\r\n            const index = this.getTrailingNumber(item.name);\r\n            GameInfo.Grid.currentStates[index - 1].currentItem = item;\r\n            item_mask.on(cc.Node.EventType.TOUCH_START, () => this.handleItemClick(index - 1), this);\r\n        });\r\n    }\r\n\r\n\r\n    private offEvent(): void {\r\n        this.buttonResult.off(cc.Node.EventType.TOUCH_START);\r\n\r\n        this.UIController.Grid.children.forEach((item) => {\r\n            const item_mask = item.getChildByName(\"Mask\");\r\n            item_mask.off(cc.Node.EventType.TOUCH_START);\r\n        });\r\n    }\r\n\r\n\r\n    private handleStopUserClickBehavior(): void {\r\n        GameInfo.isCanTouch = false;\r\n\r\n        this.scheduleOnce(() => GameInfo.isCanTouch = true, 1.1)\r\n    }\r\n\r\n\r\n    private handleShowHint(): void {\r\n        if (!GameInfo.isCanTouch) return;\r\n\r\n        this.handleStopUserClickBehavior();\r\n\r\n        this.resultNode.getComponent(cc.Animation).play();\r\n\r\n        SoundController.Instance(SoundController).playSound(CONST.SoundTrack.clickBtnSound);\r\n\r\n        cc.tween(this.buttonResult)\r\n        .to(0.1, {scale: 0.35}, {easing: cc.easing.smooth})\r\n        .to(0.1, {scale: 0.3}, {easing: cc.easing.smooth})\r\n        .start();\r\n    }\r\n\r\n\r\n    private getTrailingNumber(string: string): number {\r\n        const match = string.match(/\\d+$/);\r\n        return match ? parseInt(match[0], 10) : null;\r\n    }\r\n\r\n\r\n    private handleItemClick(index: number): void {\r\n        if (!GameInfo.isCanTouch) return;\r\n\r\n        const emptyIndex = GameInfo.Grid.currentStates.findIndex(state => state.isNull);\r\n\r\n        if (this.isNeighbor(index, emptyIndex)) {\r\n            this.updateGrid(index, emptyIndex);\r\n\r\n            this.offEvent();\r\n\r\n            this.registerEvent();\r\n\r\n            this.checkGridResult() && this.win();\r\n        } else {\r\n            cc.log(\"wrong\");\r\n\r\n            SoundController.Instance(SoundController).playSound(CONST.SoundTrack.wrongSound);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private getRowAndCol(index: number): { row: number; col: number } {\r\n        const colsPerRow = 3;\r\n        const row = Math.floor(index / colsPerRow);\r\n        const col = index % colsPerRow;\r\n        return { row, col };\r\n    }\r\n\r\n\r\n    private isNeighbor(index1: number, index2: number): boolean {\r\n        const { row: row1, col: col1 } = this.getRowAndCol(index1);\r\n        const { row: row2, col: col2 } = this.getRowAndCol(index2);\r\n\r\n        // cc.log(row1, row2, col1, col2);\r\n\r\n        return (row1 === row2 && Math.abs(col1 - col2) === 1) ||\r\n            (col1 === col2 && Math.abs(row1 - row2) === 1);\r\n    }\r\n\r\n\r\n    private updateGrid(index: number, emptyIndex: number): void {\r\n        GameInfo.Grid.currentStates[index].isNull = true;\r\n        GameInfo.Grid.currentStates[emptyIndex].isNull = false;\r\n\r\n        let currentNode = GameInfo.Grid.currentStates[index].currentItem;\r\n        let emptyNode = GameInfo.Grid.currentStates[emptyIndex].currentItem;\r\n\r\n        let tempName = currentNode.name;\r\n\r\n        GameInfo.Grid.currentStates[index].currentItem.name = emptyNode.name;\r\n        GameInfo.Grid.currentStates[emptyIndex].currentItem.name = tempName;\r\n\r\n        GameInfo.Grid.currentStates[index].currentItem = emptyNode;\r\n        GameInfo.Grid.currentStates[emptyIndex].currentItem = currentNode;\r\n\r\n        this.moveItem(currentNode, emptyNode);\r\n    }\r\n\r\n\r\n    private moveItem(currentNode: cc.Node, emptyNode: cc.Node): void {\r\n        cc.tween(currentNode)\r\n            .to(0.16, { position: emptyNode.position }, { easing: cc.easing.smooth })\r\n            .start();\r\n\r\n        emptyNode.setPosition(currentNode.position);\r\n\r\n        SoundController.Instance(SoundController).playSound(CONST.SoundTrack.slideSound);\r\n    }\r\n\r\n\r\n    public checkGridResult(): boolean {\r\n        const isPositionCorrect = this.UIController.Grid.children.every((item, index) => {\r\n            const correctPos = new cc.Vec3(GameInfo.Grid.currentStates[index].correctItemPos);\r\n            return this.areVec3Equal(item.getPosition(), correctPos);\r\n        });\r\n\r\n        return isPositionCorrect;\r\n    }\r\n\r\n\r\n    private areVec3Equal(vecA: cc.Vec2, vecB: cc.Vec3, epsilon = 1): boolean {\r\n        return Math.abs(vecA.x - vecB.x) <= epsilon &&\r\n            Math.abs(vecA.y - vecB.y) <= epsilon\r\n    }\r\n\r\n\r\n    public win(): void {\r\n        if(GameInfo.isShowInstallPopup) return;\r\n        \r\n        GameInfo.isShowInstallPopup = true;\r\n\r\n        this.buttonResult.children.forEach(child => {\r\n            child.color = cc.color(255, 184, 0, 255);\r\n        });\r\n\r\n        this.offEvent();\r\n\r\n        cc.tween(this.resultNode)\r\n            .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })\r\n            .call(() => {\r\n                let label = this.buttonResult.getComponentInChildren(cc.Label);\r\n                label.string = 'DOWNLOAD';\r\n                label.node.color = cc.color(255, 255, 255, 255);\r\n                label.node.scale = 0.8;\r\n                this.buttonResult.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);\r\n            })\r\n            .start();\r\n\r\n\r\n        cc.tween(this.buttonResult)\r\n            .repeatForever(\r\n                cc.tween(this.buttonResult)\r\n                    .to(0.5, { scale: 0.3 }, { easing: cc.easing.smooth })\r\n                    .to(0.5, { scale: 0.35 }, { easing: cc.easing.elasticOut })\r\n            ).start();\r\n    }\r\n\r\n\r\n    protected update(dt: number): void {\r\n        this.checkGridResult() && this.win();\r\n    }\r\n\r\n}\r\n"]}