[1,["4aFXK0N0hO0JfLx4E8cLz4@9d093","4aFXK0N0hO0JfLx4E8cLz4@98d20","4941Lh+RhNxKxeX2DiVsww","1brw/JvvpFnIvdrxpFCgMZ","4aFXK0N0hO0JfLx4E8cLz4@ded87","10fO7v7rxFPoBQZKzAUO2y","3b8x7Hr9RBTbplr3kDajz2@b068a","2bKW4qPLZAGKiMgkJ7RUNp@be570","4aFXK0N0hO0JfLx4E8cLz4@2cfef","4aFXK0N0hO0JfLx4E8cLz4@00e5d","4aFXK0N0hO0JfLx4E8cLz4@a7f60","4aFXK0N0hO0JfLx4E8cLz4@f1dcd","4aFXK0N0hO0JfLx4E8cLz4@a2a7f","4aFXK0N0hO0JfLx4E8cLz4@be60e","4aFXK0N0hO0JfLx4E8cLz4@508aa","4aFXK0N0hO0JfLx4E8cLz4@0832a","ebLboh8hpDYZbHauoYeiUD","ff23IU9HtF57DgucLJI6CZ","c0EnjPWQ9Cp78A5uUHnPYz@30ea8","a7xNm4hbNLeaH8/nkBDIbN@c2696","2bKW4qPLZAGKiMgkJ7RUNp@242f7","dcUQSOmdlBqLhLyzD0Nhuu","4aFXK0N0hO0JfLx4E8cLz4@7f6c3","4aFXK0N0hO0JfLx4E8cLz4@41f5f","4aFXK0N0hO0JfLx4E8cLz4@0435a","4aFXK0N0hO0JfLx4E8cLz4@d78b1","4aFXK0N0hO0JfLx4E8cLz4@6b1b1","4aFXK0N0hO0JfLx4E8cLz4@500f0","4aFXK0N0hO0JfLx4E8cLz4@a4b42","4aFXK0N0hO0JfLx4E8cLz4@f7bc9","4aFXK0N0hO0JfLx4E8cLz4@92a34","4aFXK0N0hO0JfLx4E8cLz4@ef5e8","4aFXK0N0hO0JfLx4E8cLz4@be972","4aFXK0N0hO0JfLx4E8cLz4@1733d","4aFXK0N0hO0JfLx4E8cLz4@35987","4aFXK0N0hO0JfLx4E8cLz4@f81d7","4aFXK0N0hO0JfLx4E8cLz4@fc984","4aFXK0N0hO0JfLx4E8cLz4@1fb51","4aFXK0N0hO0JfLx4E8cLz4@3ae45","4aFXK0N0hO0JfLx4E8cLz4@bcbf8","4aFXK0N0hO0JfLx4E8cLz4@24564","4aFXK0N0hO0JfLx4E8cLz4@eaa68","4aFXK0N0hO0JfLx4E8cLz4@48a11","4aFXK0N0hO0JfLx4E8cLz4@eb4b8","4aFXK0N0hO0JfLx4E8cLz4@bf5ea","4aFXK0N0hO0JfLx4E8cLz4@92f4e","4aFXK0N0hO0JfLx4E8cLz4@7fbec","4aFXK0N0hO0JfLx4E8cLz4@50b96","4aFXK0N0hO0JfLx4E8cLz4@a1fa8","4aFXK0N0hO0JfLx4E8cLz4@72d83","4aFXK0N0hO0JfLx4E8cLz4@9d549","4aFXK0N0hO0JfLx4E8cLz4@7209b","4aFXK0N0hO0JfLx4E8cLz4@40d69","4aFXK0N0hO0JfLx4E8cLz4@5a9bb","4aFXK0N0hO0JfLx4E8cLz4@4e836","4aFXK0N0hO0JfLx4E8cLz4@1555e","4aFXK0N0hO0JfLx4E8cLz4@f692b","4aFXK0N0hO0JfLx4E8cLz4@c441b","4aFXK0N0hO0JfLx4E8cLz4@9b659","4aFXK0N0hO0JfLx4E8cLz4@71c9b","4aFXK0N0hO0JfLx4E8cLz4@326a9","4aFXK0N0hO0JfLx4E8cLz4@57f6a","4aFXK0N0hO0JfLx4E8cLz4@f385f","4aFXK0N0hO0JfLx4E8cLz4@4afc5","4aFXK0N0hO0JfLx4E8cLz4@405f8","4aFXK0N0hO0JfLx4E8cLz4@1ecfc","4aFXK0N0hO0JfLx4E8cLz4@863e8","4aFXK0N0hO0JfLx4E8cLz4@ee1cc","4aFXK0N0hO0JfLx4E8cLz4@737c7","4aFXK0N0hO0JfLx4E8cLz4@2f8e5","4aFXK0N0hO0JfLx4E8cLz4@504a3","4aFXK0N0hO0JfLx4E8cLz4@7ab19","4aFXK0N0hO0JfLx4E8cLz4@a28ee","4aFXK0N0hO0JfLx4E8cLz4@200f0","4aFXK0N0hO0JfLx4E8cLz4@32c75","4aFXK0N0hO0JfLx4E8cLz4@20649","4aFXK0N0hO0JfLx4E8cLz4@e1a84","4aFXK0N0hO0JfLx4E8cLz4@a2b43","4aFXK0N0hO0JfLx4E8cLz4@14ef6","4aFXK0N0hO0JfLx4E8cLz4@17053","4aFXK0N0hO0JfLx4E8cLz4@10af0","4aFXK0N0hO0JfLx4E8cLz4@929b0","4aFXK0N0hO0JfLx4E8cLz4@17873","4aFXK0N0hO0JfLx4E8cLz4@d1b52","4aFXK0N0hO0JfLx4E8cLz4@ee291","4aFXK0N0hO0JfLx4E8cLz4@c75ad","4aFXK0N0hO0JfLx4E8cLz4@c9c79","4aFXK0N0hO0JfLx4E8cLz4@671c3","4aFXK0N0hO0JfLx4E8cLz4@94d3b","4aFXK0N0hO0JfLx4E8cLz4@c1eb9","4aFXK0N0hO0JfLx4E8cLz4@4ffee","4aFXK0N0hO0JfLx4E8cLz4@7c855","4aFXK0N0hO0JfLx4E8cLz4@87589","faC76rozxBq4ecZGZux2Km@e1f45","faC76rozxBq4ecZGZux2Km@1d6cd","faC76rozxBq4ecZGZux2Km@9fe24","50VGrYTZFIh6ArguRXdKhA@546bf","50VGrYTZFIh6ArguRXdKhA@dddd1","795wCdBPJGTLgsbA63Jxfe","42kfsGsjRCZ5yHOE9L+tCN","f25cZa/KZM9KuIksiH9va7@63ab1","08L3kQFLlAv6sh72qzdgAO@fd2c2","08L3kQFLlAv6sh72qzdgAO@10678","08L3kQFLlAv6sh72qzdgAO@a27a1","08L3kQFLlAv6sh72qzdgAO@4d264","08L3kQFLlAv6sh72qzdgAO@7aabd","24sEzwgDNGQ6kob/xxwDKL@6c48a","93cn8EX0tGeY8+fQ4IcNK4","32Hp9msKFGCIFIBZdy8cJc@02e2a","38PWfoI0xLMZaqwQr3M5hX@74dd3","815zjhbsNO/Z8bb3P84nGq@cc379","f25ZHVoRpGrYCPypKe/24m@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","17+2E7W1xN3Y5qISlnd6xU","7eyeo/CMBNlKD0yfS8CitN@f9941","dfoIYDHIJDALNOUhFNDjuP","68OhzxNLRNIIWD3BzBOhcX@6c48a","0cLdNGspxLmovtmjgTohC5@33452","0cLdNGspxLmovtmjgTohC5@b85ec","0cLdNGspxLmovtmjgTohC5@d20e9","0eKhlpbRdHP5X9qxh7s4ny@6c48a","35Kow5QZNLwZAXoysuS7qX@6c48a","2bKW4qPLZAGKiMgkJ7RUNp@05da8","2bKW4qPLZAGKiMgkJ7RUNp@5cfff","2bKW4qPLZAGKiMgkJ7RUNp@30732","2bKW4qPLZAGKiMgkJ7RUNp@19d12","2bKW4qPLZAGKiMgkJ7RUNp@333fc","2bKW4qPLZAGKiMgkJ7RUNp@f1394","2bKW4qPLZAGKiMgkJ7RUNp@b9e8e","2bKW4qPLZAGKiMgkJ7RUNp@75ee4","2bKW4qPLZAGKiMgkJ7RUNp@b9bc1","2bKW4qPLZAGKiMgkJ7RUNp@a72ab","2bKW4qPLZAGKiMgkJ7RUNp@25598","2bKW4qPLZAGKiMgkJ7RUNp@990a3","2bKW4qPLZAGKiMgkJ7RUNp@2224c","2bKW4qPLZAGKiMgkJ7RUNp@60129","2bKW4qPLZAGKiMgkJ7RUNp@8488a","2bKW4qPLZAGKiMgkJ7RUNp@62756","2bKW4qPLZAGKiMgkJ7RUNp@d5064","2bKW4qPLZAGKiMgkJ7RUNp@7c9aa","2bKW4qPLZAGKiMgkJ7RUNp@7d08b","2bKW4qPLZAGKiMgkJ7RUNp@c91ce","2bKW4qPLZAGKiMgkJ7RUNp@23689","2bKW4qPLZAGKiMgkJ7RUNp@b5902","2bKW4qPLZAGKiMgkJ7RUNp@a7d83","2bKW4qPLZAGKiMgkJ7RUNp@2d5df","2bKW4qPLZAGKiMgkJ7RUNp@cb6cb","2bKW4qPLZAGKiMgkJ7RUNp@72a22","2bKW4qPLZAGKiMgkJ7RUNp@8feb8","2bKW4qPLZAGKiMgkJ7RUNp@09bf2","2bKW4qPLZAGKiMgkJ7RUNp@ad32d","2bKW4qPLZAGKiMgkJ7RUNp@db9ff","2bKW4qPLZAGKiMgkJ7RUNp@df8aa","2bKW4qPLZAGKiMgkJ7RUNp@67361","2bKW4qPLZAGKiMgkJ7RUNp@2bf59","2bKW4qPLZAGKiMgkJ7RUNp@95cd3","2bKW4qPLZAGKiMgkJ7RUNp@531c4","2bKW4qPLZAGKiMgkJ7RUNp@df5c5","2bKW4qPLZAGKiMgkJ7RUNp@1c110","2bKW4qPLZAGKiMgkJ7RUNp@39800","2bKW4qPLZAGKiMgkJ7RUNp@0e3d2","2bKW4qPLZAGKiMgkJ7RUNp@7a3ca","2bKW4qPLZAGKiMgkJ7RUNp@1190d","2bKW4qPLZAGKiMgkJ7RUNp@14d80","2bKW4qPLZAGKiMgkJ7RUNp@bed06","2bKW4qPLZAGKiMgkJ7RUNp@cbcd6","2bKW4qPLZAGKiMgkJ7RUNp@bf9eb","2bKW4qPLZAGKiMgkJ7RUNp@b8518","2bKW4qPLZAGKiMgkJ7RUNp@97b5c","2bKW4qPLZAGKiMgkJ7RUNp@0a1ef","2bKW4qPLZAGKiMgkJ7RUNp@8eafb","2bKW4qPLZAGKiMgkJ7RUNp@9e7e2","2bKW4qPLZAGKiMgkJ7RUNp@c47df","2bKW4qPLZAGKiMgkJ7RUNp@90896","32Hp9msKFGCIFIBZdy8cJc@33452","32Hp9msKFGCIFIBZdy8cJc@39717","32Hp9msKFGCIFIBZdy8cJc@d20e9","38PWfoI0xLMZaqwQr3M5hX@d20e9","38PWfoI0xLMZaqwQr3M5hX@33452","38PWfoI0xLMZaqwQr3M5hX@bbae8","3b8x7Hr9RBTbplr3kDajz2@d20e9","3b8x7Hr9RBTbplr3kDajz2@33452","3b8x7Hr9RBTbplr3kDajz2@9f2a6","3daULjbCRNLK7iFNWBbjPr@6c48a","a7YStUNeNCOKGpSntUY1g5","6ejrn7kQVEB7p/8jIuxxqZ@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","7eyeo/CMBNlKD0yfS8CitN@6c48a","82nQZbIIFHfasBVU3rCyph@6c48a","618sSeZ9tAVZ1xcAnScMK6@6c48a","91zEeAi6lPwYPMyg7zC5an@6c48a","b0AZcA7OpOEr+mpLkHkmlb@6c48a","c2QHKbZxJGKK76KyBRiqBL@6c48a","76Jig3AsFJbbbqjfDAjOpL@6c48a","e3iFsfPZRAPpCeFUuK8mt3@6c48a","0cLdNGspxLmovtmjgTohC5@1b610","fflTSQwLJP/pXrdxP2NgBF@5f563","8aOpQIhkZGu4dX2sM+rLS5@73d50","06pz6gAdRK2oQ+QhJBDyUl","f0SjFBUFBF6oBn52pkUl1B@c2d4f","f4gX0Eys5AF7SZ6135BgXE","12Y9dMgWdJKJGmTiZyQR9H@2e76e","82wjxPiWZG86+DZoYjrbUb","f0SjFBUFBF6oBn52pkUl1B@08c68","6ejrn7kQVEB7p/8jIuxxqZ@f9941","e3iFsfPZRAPpCeFUuK8mt3@f9941","0eKhlpbRdHP5X9qxh7s4ny@f9941","b0AZcA7OpOEr+mpLkHkmlb@f9941","c2QHKbZxJGKK76KyBRiqBL@f9941","3daULjbCRNLK7iFNWBbjPr@f9941","82nQZbIIFHfasBVU3rCyph@f9941","baMYjFz/9OHrxcHzIMXfZD","70YcqFivJLsYWkaqkzWHj2","63zgZOJNFIfr96r1ZuQ+SZ","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","f25ZHVoRpGrYCPypKe/24m@6c48a"],["node","_mesh","value","_effectAsset","root","_parent","targetInfo","asset","mainTexture","_skeleton","_spriteFrame","_textureSource","_defaultClip","data","bot_candy","up_candy","right_candy","left_candy","needle","Mat_ColorBlack","target","GameController","HayChonGiaDung","_font","_clip","socketNode","Tut","GamePlay","camera","_cameraComponent","Cam_3D","scene","TimeCount","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_parent","_components","_children","_lpos","_lscale","_prefab","_lrot","_euler"],-3,1,9,2,5,5,4,5,5],"cc.ImageAsset","cc.SpriteFrame",["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents"],1,9,9,9],["cc.Node",["_name","_id","_parent","_lpos","_components","_children","_prefab","_lrot","_euler"],1,1,5,2,9,4,5,5],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color"],2,1,6,5],["cc.MeshRenderer",["_shadowCastingMode","_name","node","_materials","lightmapSettings","_mesh","__prefab"],1,1,3,4,6,4],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],"cc.TextureCube",["cc.Node",["_name","_active","_layer","_parent","_children","_components","_lpos"],0,1,2,12,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots"],2,1,1,2],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.BoxCollider",["_enabled","node","_size"],2,1,5],["cc.Camera",["_clearFlags","_visibility","_projection","_priority","_orthoHeight","_far","node","_color"],-3,1,5],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Prefab",[],3],["cc.Node",["_name","_id","_parent","_children","_components"],1,1,2,2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.TTFFont",["_name","_native"],1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SkeletalAnimation",["node","__prefab"],3,1,4],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.AudioClip",["_name","_native","_duration"],0],["cc.SceneAsset",["_name"],2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.TargetInfo",["localID"],2],["2bb1bBJM5NJYLkjYHtKb/HM",["node"],3,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,12],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["48a73VlH9pGMo0wAPeJVHws",["node","socketNode"],3,1,1],["3aa2at5hMJJpLhZZyMIi1P9",["node","GameController"],3,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_type","_pcf","_shadowColor","_size"],1,5,5],["cc.SkyboxInfo",["_useHDR","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["aa954Bn/KFL/7c/BfP1z3g7",["node","camera","GamePlay","Tut","HayChonGiaDung","CTA"],3,1,1,1,1,1,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["0edf2KHpRZFsrSUsU7LFM+h",["node","KeoSao","needle","LineContainer","left_candy","right_candy","up_candy","bot_candy","Mat_ColorBlack"],3,1,1,1,1,1,1,1,1,6],["0cc3bmcUlJI66L1wOAMQg6o",["node","GameController","Cam_3D","HayChonGiaDung"],3,1,1,1,1],["cc.RigidBody",["_enabled","node"],2,1],["068c9ERAfJF1b4+fsWryUsH",[],3],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","node","_font"],0,1,6],["cc.DirectionalLight",["_colorTemperature","_illuminanceLDR","node","_color","_staticSettings"],1,1,5,4],["cc.StaticLightSettings",[],3],["57b003YX65FA4X9b9otAlLg",["node"],3,1],["7b04c9+e9BPmKNBmlEbNglS",["node","UI_Time"],3,1,1],["c7b39W3zSVJsrD4mn7hjKyH",["node","Roll"],3,1,1],["d6ba26BX9VFWrvN11awPr8L",[],3],["cc.AudioSource",["_playOnAwake","node","_clip"],2,1,6]],[[22,1],[6,2,3,4,5,1],[0,0,6,7,9,12,10,13,2],[0,0,6,7,9,10,2],[31,0,2],[33,0,1,2,3],[17,0,1,2,3],[42,0,1,2,2],[11,0,1,2,2],[35,0,1,2,2],[34,0,1,2,2],[37,0,1,2,3],[0,4,5,6,11,3],[20,0,1,2,3,2],[21,0,2],[0,0,6,7,11,2],[7,2,0,1,4,4],[0,0,6,8,11,9,12,13,2],[25,0,1,2,3,4],[27,0,1,2,3,4,5,6,1],[3,0,2,2],[8,0,1,1],[36,0,1,2,2],[38,0,1,2,2],[6,0,2,3,4,5,2],[7,0,1,4,3],[0,0,8,7,9,10,2],[13,1,2,3,1],[5,1,2,1],[0,0,6,8,9,12,13,2],[0,0,6,7,2],[8,0,1],[18,1],[0,0,6,11,9,2],[0,0,8,11,2],[0,0,6,8,11,9,2],[0,0,8,9,2],[0,0,8,9,12,13,2],[0,0,1,6,7,3],[0,0,6,8,2],[0,0,6,8,7,2],[0,0,6,8,9,10,2],[6,2,6,3,4,5,1],[14,1,2,1],[57,0,1,2,3,4,5,6,7,8,1],[0,0,6,9,12,13,2],[0,0,3,1,6,7,4],[0,0,6,7,9,2],[4,0,2,5,6,3,2],[39,0,1,2,2],[43,0,1,1],[12,0,1,2],[0,0,1,8,7,9,10,3],[0,0,1,6,8,7,9,10,3],[0,0,1,6,7,9,3],[0,0,1,6,7,10,3],[4,0,2,5,6,3,7,8,2],[24,0,1,2,4],[28,0,1,2,4],[3,0,3,2,2],[30,0,1,1],[8,0,1,2,1],[5,1,3,2,1],[5,0,1,3,2,2],[61,0,1,2,3,4,4],[68,0,1,2,2],[7,3,0,1,4,4],[16,0,1,2,3,5],[0,0,8,7,11,2],[0,0,8,11,9,2],[0,0,8,9,12,10,13,2],[0,0,8,2],[0,0,3,1,8,7,4],[0,0,1,8,7,3],[0,0,1,2,6,8,7,9,4],[0,0,1,6,8,7,3],[0,0,7,9,2],[0,0,1,6,7,9,12,13,3],[0,0,1,6,7,9,10,3],[0,0,2,6,8,3],[0,0,2,6,7,12,13,3],[4,0,1,2,4,3,7,8,3],[4,0,2,4,3,2],[4,0,1,2,4,3],[10,0,1,2,3,4,5,4],[10,0,1,2,3,4,5,6,4],[19,0,1,2,3,4,3],[11,0,3,2],[6,1,2,3,4,5,2],[23,0,1,3],[26,0,1,1],[29,0,2],[3,0,1,4,2,3],[3,0,1,3,4,2,3],[3,0,1,2,3],[3,0,1,3,2,3],[32,0,1],[40,0,1,2,2],[41,0,1,2,2],[44,0,1,1],[45,0,1,1],[12,0,2],[13,0,1,2,3,2],[46,0,1,1],[47,0,1,2,3,2],[48,0,1,2,3,4,1],[49,0,1,2,3,4,5,3],[50,0,1,2,3,3],[51,0,1,2,2],[52,1],[53,1],[54,0,1,2,3,4,5,1],[55,0,1,1],[56,0,1,2,3,4],[14,0,1,2,2],[5,1,3,1],[5,0,1,2,2],[58,0,1,2,3,1],[59,0,1,2],[60,1],[62,0,1,2,3,4,3],[63,1],[15,0,1,6,3],[15,2,3,4,5,0,1,6,7,7],[64,0,1],[65,0,1,1],[66,0,1,1],[67,1]],[[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.9,"metallic":0.2},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[116,3]],[[[16,"Black_sniper01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.2857142984867096},"albedoScale",8,[1,0.013701999559998512,0.013701999559998512,0.013701999559998512]]],11]]],0,0,[0],[3],[3]],[[[67,"White_Sniper01",[{"metallic":0.4000000059604645,"roughness":0.2857142984867096}],[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}]]],0,0,[0],[3],[3]],[[[6,".bin",451944945,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31728,"length":2784,"count":696,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":116928,"length":7680,"count":1920,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":140352,"length":1392,"count":348,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":142608,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31728,"count":661,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":34512,"length":82416,"count":1717,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":124608,"length":15744,"count":328,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":141744,"length":864,"count":18,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.001135459984652698,-0.005957589950412512,-0.02687705121934414],"maxPosition",8,[1,0.0016712099313735962,0.003005220089107752,0.020008910447359085]]],-1],0,0,[],[],[]],[[[16,"Gray_Sniper_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.2857142984867096},"albedoScale",8,[1,0.27049800753593445,0.27049800753593445,0.27049800753593445]]],11]]],0,0,[0],[3],[3]],[[[16,"Brown_Sniper01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.24112141132354736},"albedoScale",8,[1,0.12213899940252304,0.0481720007956028,0.024157999083399773]]],11]]],0,0,[0],[3],[3]],[[[32],[34,"ban1",[-2],[8,"dbFUU/Ef1UjLacpUwnv5nV",-1,0]],[15,"ban1",1,[[42,-3,[14,"c9yHDaZl1RrIPN4hW5VIUa"],[0],[0],1]],[8,"d65/Qc3ExSGY6OmqC7rJCF",1,0]]],0,[0,4,1,0,-1,2,0,0,2,0,13,1,3],[0,0],[-1,1],[117,118]],[[[16,"color",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[119,3]],[[[6,".bin",2411524083,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13440,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13440,"count":280,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9464392066001892,0,-0.9464386105537415],"maxPosition",8,[1,0.9464392066001892,1.1025692224502563,0.9464386105537415]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"name":"icon2","rect":{"x":0,"y":0,"width":160,"height":300},"offset":{"x":0,"y":0},"originalSize":{"width":160,"height":300},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[120]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[121,3]],[[[6,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[89,"aAkhirTahun","aAkhirTahun.ttf"],-1],0,0,[],[],[]],[[[57,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[6,".bin",3671920440,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":15984,"length":4608,"count":1152,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15984,"count":222,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.15332411229610443,0.7650029063224792,-0.16462543606758118],"maxPosition",8,[1,0.15332411229610443,1.0608165264129639,0.5459182262420654]]],-1],0,0,[],[],[]],[[[18,"Skin-15",265980569,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",3970000881,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":147600,"length":38880,"count":9720,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":147600,"count":2050,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-0.4429548680782318,-0.0007473142468370497,-0.13744604587554932],"maxPosition",8,[1,0.4429548680782318,1.0042797327041626,0.15044468641281128]]],-1],0,0,[],[],[]],[[[18,"Skin-16",3089721219,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.4685976505279541,-0.0009499380248598754,1],[7,-1,1.2246357352777351e-16,5.21078652866235e-19,0,-1.2246468525851679e-16,-0.9999909996986389,-0.0042549301870167255,0,2.0251767946739174e-34,-0.0042549301870167255,0.9999909996986389,0,-0.08039180934429169,0.44717922806739807,0.002266369992867112,1],[7,-0.9999960064888,-0.0027596799191087484,-0.0002826459822244942,0,0.00277409004047513,-0.9943499565124512,-0.10611799359321594,0,0.000011802672815974802,-0.10611845552921295,0.9943529963493347,0,-0.08109959214925766,0.253466933965683,0.028238268569111824,1],[7,-1,1.2246382499067973e-16,4.457040942940249e-19,0,-1.2246468525851679e-16,-0.9999930262565613,-0.0036394500639289618,0,7.264191109213419e-41,-0.0036394500639289618,0.9999930262565613,0,0.08039172738790512,0.4471818208694458,0.001636749948374927,1],[7,-0.9999960064888,0.0027580198366194963,0.0002995389804709703,0,-0.0027742183301597834,-0.9937509298324585,-0.1115889921784401,0,-0.000010097511221829336,-0.11158948391675949,0.9937540292739868,0,0.08109954744577408,0.25336042046546936,0.02916295826435089,1],[7,-0.9573779702186584,0.2497909814119339,0.14502495527267456,0,-0.03485388308763504,-0.5983361005783081,0.8004871010780334,0,0.28672805428504944,0.7613139152526855,0.5815398693084717,0,0.0860648825764656,0.03376717492938042,-0.04804103448987007,1],[7,-0.9611001014709473,0.27142399549484253,-0.05114949494600296,0,-0.057501692324876785,-0.015496503561735153,0.9982249736785889,0,0.27014973759651184,0.9623349905014038,0.030501019209623337,0,0.08739051222801208,-0.0758618414402008,-0.0013180815149098635,1],[7,-0.9563779830932617,-0.2512040138244629,-0.14912006258964539,0,0.033623892813920975,-0.6017208695411682,0.7979978322982788,0,-0.2901890277862549,0.7581740617752075,0.5839191675186157,0,-0.08581019192934036,0.03333181142807007,-0.04851921275258064,1],[7,-0.960375964641571,-0.27404099702835083,0.05078340321779251,0,0.05724995583295822,-0.015645911917090416,0.9982370138168335,0,-0.2727632224559784,0.9615910053253174,0.030714787542819977,0,-0.08720983564853668,-0.07600788027048111,-0.0013641190016642213,1],[7,-0.13001805543899536,-0.9880990386009216,-0.08218857645988464,0,0.06700360029935837,0.07394663989543915,-0.9950090050697327,0,0.9892449975013733,-0.13487599790096283,0.056591831147670746,0,-0.04617132246494293,-0.15882238745689392,0.6374907493591309,1],[7,0.24968257546424866,-0.966679036617279,-0.05647759512066841,0,0.0344153493642807,0.06714688986539841,-0.9971490502357483,0,0.9677160978317261,0.24702702462673187,0.05003399774432182,0,0.05279683321714401,-0.23681163787841797,0.6440224051475525,1],[7,0.37737351655960083,-0.9248300194740295,-0.04773649945855141,0,0.02507569082081318,0.06173384562134743,-0.9977779984474182,0,0.9257211685180664,0.37533798813819885,0.04648749902844429,0,0.10029099136590958,-0.3404063284397125,0.647269606590271,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865434163250029,-0.3503487706184387,0.6751158833503723,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865403895266354,-0.39344334602355957,0.6751158833503723,1],[7,0.3948627710342407,0.9180830121040344,0.03474658727645874,0,-0.037632979452610016,0.05395069718360901,-0.9978340268135071,0,-0.9179691076278687,0.3926999866962433,0.05585329607129097,0,-0.09858840703964233,-0.3327319622039795,0.651500940322876,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048198513686657,-0.34539973735809326,0.6781477928161621,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048174299299717,-0.38458555936813354,0.6781477928161621,1],[7,0.2469419687986374,0.9675700068473816,0.05318406969308853,0,-0.04871439188718796,0.06720980256795883,-0.9965490102767944,0,-0.967805027961731,0.2434989959001541,0.06373149156570435,0,-0.04344252869486809,-0.23697492480278015,0.6446847915649414,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.004326067864894867,-0.44243544340133667,0.6841872334480286,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.011511702090501785,-0.4489607512950897,0.6773713827133179,1],[7,-0.08225024491548538,0.9933419823646545,0.08066292852163315,0,-0.07725554704666138,0.0743386521935463,-0.9942359924316406,0,-0.9936130046844482,-0.08800780028104782,0.07062679529190063,0,0.0423567071557045,-0.15955717861652374,0.637688934803009,1],[7,-0.0308699794113636,0.9953270554542542,-0.09149833768606186,0,-0.08220931142568588,-0.0937601774930954,-0.9921950101852417,0,-0.9961370229721069,-0.023107027634978294,0.08471949398517609,0,0.03984997794032097,0.025037318468093872,0.6556342840194702,1],[7,0.015451744198799133,-0.9953270554542542,0.09532216936349869,0,0.0815652534365654,-0.09376112371683121,-0.9922480583190918,0,0.9965479969978333,0.023106953129172325,0.07973531633615494,0,-0.03945717588067055,0.025703759863972664,0.6555943489074707,1],[7,1,0,0,0,0,0.9968389868736267,0.07944390177726746,0,0,-0.07944390177726746,0.9968389868736267,0,3.814700022530815e-8,-0.5057063698768616,-0.03817417100071907,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.5508158802986145,-0.03817420080304146,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[16,"wolverin.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[122,3]],[[[18,"Skin-14",2954963247,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1]],8,8,8]]],0,0,[],[],[]],[[[18,"Skin-4",1290952268,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",1035376647,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":85536,"length":5832,"count":1458,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":85536,"count":1188,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12]]},"minPosition",8,[1,-0.5135195851325989,0.599608302116394,-0.019523488357663155],"maxPosition",8,[1,0.5135195255279541,0.990607500076294,0.4170179069042206]]],-1],0,0,[],[],[]],[[[32],[68,"character_rig",[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21],[[90,-2,[14,"d8QrElb5FeK4VmrCbhjIcg"]]],[8,"e0nMCJH5ZXuYVTIzCModjd",-1,0]],[35,"mixamorig:Hips",1,[-22,-23,-24],[8,"866xn2rO9c0KLR4BcTrxXp",1,0],[1,-3.814697180359872e-8,0.4685976505279541,0.00094993831589818]],[69,"mixamorig:Spine2",[-25,-26,-27],[8,"65AdZAXzpbDpvdL5/4/oLY",1,0],[1,0,0.05155370756983757,-7.002348700879679e-11]],[15,"toc_nhan_vat_chinh",1,[[19,-28,[14,"95H/nGvNJfiZsAiwPBm3Py"],[0],[0],1,1,2]],[8,"71m/zGKxpdLoFtYooFDQoH",1,0]],[15,"wolverin 1",1,[[19,-29,[14,"a5ZG/O7s9d4LAhfAeBQm3O"],[3],[0],1,4,5]],[8,"4eACVGz4BeaYuWvkgI8Oe2",1,0]],[15,"toc4",1,[[19,-30,[14,"29xAHeS2RUkqI8JyEG3hdr"],[6],[0],1,7,8]],[8,"74adu5Ls5a7Iw+cXzuyUZr",1,0]],[15,"toc2",1,[[19,-31,[14,"12dUu1PWBTk6NT9T9h5GcJ"],[9],[0],1,10,11]],[8,"90qGGkPilaJZaLEwN/7ZgA",1,0]],[15,"Puss in boots 1",1,[[19,-32,[14,"98D3giPAVY7KQ5EHgviVBM"],[12],[0],1,13,14]],[8,"d4OKkTVkVdM6965B5Nuj7x",1,0]],[15,"mickey 1",1,[[19,-33,[14,"7dvFgFB1NdoY+kVGVDl5CP"],[15],[0],1,16,17]],[8,"7b+NTo3kBZA6pwP+GZT4HN",1,0]],[15,"Huggy Wuggy",1,[[19,-34,[14,"07JEzw0NRSO6Pre9eaJSux"],[18],[0],1,19,20]],[8,"c6IbTkD+9cMbCWiPW/ifr3",1,0]],[15,"Chainsaw Man 1",1,[[19,-35,[14,"a5HNh6kARZiYF75i9Uvc8i"],[21],[0],1,22,23]],[8,"5f+j76VSZcxLaT/7p3jwid",1,0]],[15,"Wednesday TOC",1,[[19,-36,[14,"a10FX56fdVnYKDcQeJyHMH"],[24],[0],1,25,26]],[8,"43qc9GcwNSUZFC/g7BcjGf",1,0]],[15,"Wednesday vay",1,[[19,-37,[14,"30hkwSRppaCYfI3W56druh"],[27],[0],1,28,29]],[8,"3d8ZOThEpUoa7/mR2lnz/N",1,0]],[15,"toc5",1,[[19,-38,[14,"f51XlPIblcYY90XiUjxCTS"],[30],[0],1,31,32]],[8,"7bIWqOCcFbn6BVoq8SrRBn",1,0]],[15,"toc3",1,[[19,-39,[14,"05Rm4qkIlRdJLPiDM7T2Dz"],[33],[0],1,34,35]],[8,"23z+myjE9WALtn2eT8ktUB",1,0]],[15,"toc1",1,[[19,-40,[14,"c4Hhq7a11d75sx1f8HmVDV"],[36],[0],1,37,38]],[8,"72Wb6tiU5fB7hjaivEUXuR",1,0]],[15,"ong_gia_toc",1,[[19,-41,[14,"26TtfzHb9anpdMCTawLG9h"],[39],[0],1,40,41]],[8,"ebOtOSnq9cw577jdetZ7AD",1,0]],[15,"joker 1",1,[[19,-42,[14,"aah1pVbO5Ur4XZmw3uTa47"],[42],[0],1,43,44]],[8,"280TDHpuBZQK143r7FegMn",1,0]],[15,"Hair_Male_01",1,[[19,-43,[14,"e0GyjK+QJZZJOsOGb2e7TK"],[45],[0],1,46,47]],[8,"f0Q4IWBclY96bDNvCxoYpc",1,0]],[15,"Body.001",1,[[19,-44,[14,"d0R10vZm5aVZnpmNRCln2d"],[48],[0],1,49,50]],[8,"faS5YGfctYCI+xbMjH58zk",1,0]],[15,"Body",1,[[19,-45,[14,"b5u2kRCoVSMYBS9zOHPkXV"],[51],[0],1,52,53]],[8,"3bTJVENidZ+qDXteDlC7fQ",1,0]],[17,"mixamorig:Spine",2,[-46],[8,"e2bEJ7oc5dMZcQta/eTPTv",1,0],[1,0,0.03854309022426605,-0.0030717230401933193],[3,-0.039753381111810114,0,0,0.99920952191729],[1,-4.5566026129460955,0,0]],[35,"mixamorig:Spine1",22,[3],[8,"2evYQF1pJew4Fzm+0okmTz",1,0],[1,0,0.04510950669646263,-2.1221753521150077e-10]],[17,"mixamorig:Neck",3,[-47],[8,"44JIhN8l9WS4OpP4PNGrit",1,0],[1,0,0.05799790844321251,1.6887774512142073e-9],[3,0.039753414586437955,0,0,0.999209520585507],[1,4.556606451890492,0,0]],[48,"mixamorig:Head",24,[[33,"mixamorig:HeadTop_End",-48,[8,"39ZcGZgIxRtr+qDg2eSoUn",1,0],[1,0,0.39069435000419617,-0.02678791992366314]]],[8,"3cKoKEsRJYn6dr+xQh5pnN",1,0],[1,0,0.08383063971996307,-0.0057478416711091995]],[17,"mixamorig:LeftShoulder",3,[-49],[8,"b5jm9FJdJfiYW5Z1cmk3VG",1,0],[1,0.036299340426921844,0.052910223603248596,-0.0012699732324108481],[3,-0.5135979041324663,-0.483118294255406,0.5310665353488809,-0.46987470846920526],[1,95.25734684147196,91.76900315800147,-0.1611377279425537]],[17,"mixamorig:LeftArm",26,[-50],[8,"ebY1EzpIRX8p2jvsidpCoI",1,0],[1,-3.9718017069700906e-11,0.07459013164043427,-1.2916501201942765e-10],[3,-0.08634658726333434,0.00223194919619595,-0.025743523086248894,0.9959299956773411],[1,-9.910244134926604,-2.4017573698662176e-8,-2.961386543870989]],[17,"mixamorig:LeftForeArm",27,[-51],[8,"abb+dq3vFc0ZJOt5MzzoV1",1,0],[1,-4.1594389044163904e-10,0.09582769125699997,-2.4873046330919912e-11],[3,0.014016245511565996,0.0023552924427817836,0.16569994413374994,0.9860737933711354],[1,1.6287170974119012,1.279588728062586e-7,19.07774107580747]],[17,"mixamorig:LeftHand",28,[-52],[8,"6cRhRtXtlWDol/Wn4T23Nb",1,0],[1,1.4429514250124953e-9,0.1199256032705307,-1.6706649952347163e-10],[3,0.010015081838151606,0.0007860054786946639,0.0782375353184028,0.9968841298759171],[1,1.151192189087581,1.2397931679372703e-7,8.974986579340909]],[17,"mixamorig:LeftHandIndex1",29,[-53],[8,"47ydgOFPtTOp6cyj4ckd02",1,0],[1,1.6190569718244063e-11,0.048205357044935226,-1.1719678005839285e-10],[3,0.035812564096072794,-0.004095128260507736,-0.11353477804545667,0.9928799244377758],[1,4.131455538575716,1.0328094876655245e-7,-13.046756440541031]],[35,"mixamorig:LeftHandIndex2",30,[-54],[8,"23d6nP3RpdLaWJzaGzGtAf",1,0],[1,2.9812155522002115e-10,0.03918583691120148,5.210678555300774e-10]],[48,"mixamorig:LeftHandIndex3",31,[[33,"mixamorig:LeftHandIndex4",-55,[8,"e8KpUOL1xY4KHOeez7PkzE",1,0],[1,-0.0040418412536382675,0.03383560851216316,-0.005111334379762411]]],[8,"6aiIm/Y8Re2o4Kf/i76VNP",1,0],[1,-0.0057220859453082085,0.057849884033203125,-0.0060394019819796085]],[17,"mixamorig:RightShoulder",3,[-56],[8,"32+htxwJ1U3pC8d8ESr6No",1,0],[1,-0.036299340426921844,0.05277329310774803,0.00044812855776399374],[3,0.5268056934296009,-0.47132598866900804,0.5197364038183325,0.47979333501136345],[1,95.46861877023929,-89.1146417714516,0.12248107747952305]],[17,"mixamorig:RightArm",33,[-57],[8,"f7tsd41TVZMbekqkBAVWr3",1,0],[1,-1.800508700466885e-11,0.07459013164043427,-1.3392878472906489e-10],[3,-0.08927730336218262,-0.006551741057892085,0.07289575675433035,0.9933140724064572],[1,-10.271686433561223,-2.3110362606486347e-10,8.394415499631672]],[17,"mixamorig:RightForeArm",34,[-58],[8,"014sz2yH5WSZiea8b6JfNZ",1,0],[1,5.350525578151633e-10,0.09633613377809525,7.331983631342354e-11],[3,0.013065050043607364,-0.0025401831928315833,-0.19083529254340262,0.9815318349684735],[1,1.5252241800600517,2.4431714815217125e-7,-22.005043315860238]],[17,"mixamorig:RightHand",35,[-59],[8,"1b1IVbpnhd1IHx7mZRTC88",1,0],[1,-1.330849763725439e-9,0.12003608047962189,4.593971383859419e-11],[3,0.004716646920585265,-0.00031848953647502123,-0.06737093717476393,0.9977167978090955],[1,0.5417207756889991,2.963765767284771e-7,-7.726079231268047]],[17,"mixamorig:RightHandIndex1",36,[-60],[8,"d1SftrdWRen5bx5AmABwWU",1,0],[1,3.88099864745417e-11,0.04625864326953888,-8.750049296235574e-12],[3,0.03680983086936112,0.004732932302684523,0.12744024053773884,0.9911516638713121],[1,4.253797248237028,3.156677011321277e-9,14.65354749655367]],[35,"mixamorig:RightHandIndex2",37,[-61],[8,"d38n4rh3xdL4fx22znADNg",1,0],[1,-2.544723598507659e-10,0.043094564229249954,6.848992206709426e-11]],[48,"mixamorig:RightHandIndex3",38,[[33,"mixamorig:RightHandIndex4",-62,[8,"e7T1w5YT9TpJP849MVFPQ7",1,0],[1,0.006808818783611059,0.03723752498626709,-0.010721322149038315]]],[8,"17WaXvI1NSi4R9VJMXIZeH",1,0],[1,0.010725178755819798,0.05551743134856224,-0.002255526604130864]],[17,"mixamorig:LeftUpLeg",2,[-63],[8,"8fvO1SjQFQhLGRvNTCT+W8",1,0],[1,0.0803917720913887,-0.021412812173366547,-0.000959179422352463],[3,-1.1142621891736606e-19,-0.0018197283156560025,0.9999983442930579,6.123223755982204e-17],[1,179.79147438021914,-180,7.01670918225415e-15]],[17,"mixamorig:LeftLeg",40,[-64],[8,"3ebwC8HgFQl7GhZ8fhp83R",1,0],[1,0,0.19192974269390106,1.1621105119874464e-11],[3,-0.054064802716328776,-0.00007499441547549558,0.0013850907534344473,0.9985364655367811],[1,-6.198398158345349,-2.6958187043608823e-11,0.15895223911254447]],[17,"mixamorig:LeftFoot",41,[-65],[8,"f6XCg6e+FX9KqacEV9Vv/d",1,0],[1,2.1392967258782036e-11,0.1948138177394867,2.8059243817324386e-10],[3,0.4895176691112813,-0.12672566140519967,0.07215716839623283,0.8597129761835112],[1,59.31408073413355,-16.77055668665997,4.133594064302582e-7]],[56,"mixamorig:LeftToeBase",42,[[33,"mixamorig:LeftToe_End",-66,[8,"2f/7IXM6Re8KfTfC0Cdaj+",1,0],[1,-5.326225016588637e-10,0.044067591428756714,-2.7335031807518284e-11]]],[8,"54vudzav9Sh7PCPxwzsMqq",1,0],[1,-9.805783962590908e-10,0.09441975504159927,-4.234825823346e-9],[3,0.3084248012398451,0.01346604714950939,-0.004366590650010905,0.951143385846963],[1,35.932378076750524,1.6222495474923118,0.0000010427963367515815]],[17,"mixamorig:RightUpLeg",2,[-67],[8,"7eJr2KuFlRXIvhYsLm/rjK",1,0],[1,-0.0803917720913887,-0.021412812173366547,-0.00131357426289469],[3,-1.3027008997975453e-19,-0.002127472082480962,0.9999977369287084,6.123220377957594e-17],[1,179.75620947337873,-180,7.01670957302124e-15]],[17,"mixamorig:RightLeg",44,[-68],[8,"801YcR361R/r73xD5P4MhT",1,0],[1,0,0.19193020462989807,2.340426463742773e-11],[3,-0.051009757795203704,0.00007075367256631126,-0.0013852543951197224,0.99869719168217],[1,-5.84783117626198,3.3384962775010585e-10,-0.1589454344347592]],[17,"mixamorig:RightFoot",45,[-69],[8,"67NfRtr6daE6hCBbduHHtE",1,0],[1,-1.3941719306798106e-11,0.19469644129276276,1.3479067861865701e-9],[3,0.48526402429254517,0.12856033211622356,-0.07238747793495359,0.8618300997132713],[1,58.76444150950874,16.96864980904332,-3.666435417202773e-7]],[56,"mixamorig:RightToeBase",46,[[33,"mixamorig:RightToe_End",-70,[8,"d4bbEmTotZZrdWSDhXTJgU",1,0],[1,-8.888603741930012e-11,0.043646857142448425,-9.753281515756385e-12]]],[8,"02ySOpRd5ddaqIkDafvKVc",1,0],[1,3.7237365968501024e-10,0.09388862550258636,-1.468480115285331e-9],[3,0.31036234604395885,-0.014082549458576402,0.004598314512282885,0.950502893979015],[1,36.16624303440358,-1.6976527808984252,0.0000020813387170003765]]],0,[0,4,1,0,0,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,-11,14,0,-12,15,0,-13,16,0,-14,17,0,-15,18,0,-16,19,0,-17,20,0,-18,21,0,-19,2,0,-1,22,0,-2,40,0,-3,44,0,-1,24,0,-2,26,0,-3,33,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,-1,23,0,-1,25,0,5,25,0,-1,27,0,-1,28,0,-1,29,0,-1,30,0,-1,31,0,-1,32,0,5,32,0,-1,34,0,-1,35,0,-1,36,0,-1,37,0,-1,38,0,-1,39,0,5,39,0,-1,41,0,-1,42,0,-1,43,0,5,43,0,-1,45,0,-1,46,0,-1,47,0,5,47,0,13,1,3,5,23,70],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9,-1,1,9],[7,123,124,125,126,127,7,128,129,7,130,131,132,133,134,135,136,137,138,139,140,141,142,143,7,144,145,146,147,148,7,149,150,7,151,152,7,153,154,7,155,156,7,157,158,7,159,160,161,162,163,164,165,166]],[[[16,"Puss in boots.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[167,3]],[[[18,"Skin-12",2188914067,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,0.015451744198799133,-0.9953270554542542,0.09532216936349869,0,0.0815652534365654,-0.09376112371683121,-0.9922480583190918,0,0.9965479969978333,0.023106953129172325,0.07973531633615494,0,-0.03945717588067055,0.025703759863972664,0.6555943489074707,1]],8,8,8,8]]],0,0,[],[],[]],[[[18,"Skin-8",265980569,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1]],8,8,8]]],0,0,[],[],[]],[[[18,"Skin-0",779599348,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,0.015451744198799133,-0.9953270554542542,0.09532216936349869,0,0.0815652534365654,-0.09376112371683121,-0.9922480583190918,0,0.9965479969978333,0.023106953129172325,0.07973531633615494,0,-0.03945717588067055,0.025703759863972664,0.6555943489074707,1],[7,-0.13001805543899536,-0.9880990386009216,-0.08218857645988464,0,0.06700360029935837,0.07394663989543915,-0.9950090050697327,0,0.9892449975013733,-0.13487599790096283,0.056591831147670746,0,-0.04617132246494293,-0.15882238745689392,0.6374907493591309,1]],8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3199790876,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":1632,"count":408,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":72,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.19685062766075134,0.8070425391197205,0.05209174007177353],"maxPosition",8,[1,0.19685062766075134,1.1033217906951904,0.15298789739608765]]],-1],0,0,[],[],[]],[[[6,".bin",1934840602,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":16632,"length":3528,"count":882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16632,"count":231,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.1663280874490738,0.726352334022522,-0.1748071312904358],"maxPosition",8,[1,0.16437497735023499,1.0532424449920654,0.17300735414028168]]],-1],0,0,[],[],[]],[[[18,"Skin-13",2954963247,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",3427688077,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":19800,"length":5832,"count":1458,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19800,"count":275,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4]]},"minPosition",8,[1,-0.17500562965869904,0.6995152235031128,-0.16835784912109375],"maxPosition",8,[1,0.16350895166397095,1.0482730865478516,0.19711193442344666]]],-1],0,0,[],[],[]],[[[16,"mickey.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[168,3]],[[[18,"Skin-5",939422033,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1]],8]]],0,0,[],[],[]],[[[6,".bin",1100545674,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":31896,"length":8736,"count":2184,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31896,"count":443,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3]]},"minPosition",8,[1,-0.18234315514564514,0.5841337442398071,-0.21445651352405548],"maxPosition",8,[1,0.19649305939674377,1.0532424449920654,0.1762683242559433]]],-1],0,0,[],[],[]],[[[6,".bin",4025157393,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":11808,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11808,"count":164,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,6]]},"minPosition",8,[1,-0.17135308682918549,0.1724361628293991,-0.11642386764287949],"maxPosition",8,[1,0.1713523119688034,0.4162158966064453,0.12162064760923386]]],-1],0,0,[],[],[]],[[[18,"Skin-2",1320374394,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,-0.0308699794113636,0.9953270554542542,-0.09149833768606186,0,-0.08220931142568588,-0.0937601774930954,-0.9921950101852417,0,-0.9961370229721069,-0.023107027634978294,0.08471949398517609,0,0.03984997794032097,0.025037318468093872,0.6556342840194702,1],[7,-0.08225024491548538,0.9933419823646545,0.08066292852163315,0,-0.07725554704666138,0.0743386521935463,-0.9942359924316406,0,-0.9936130046844482,-0.08800780028104782,0.07062679529190063,0,0.0423567071557045,-0.15955717861652374,0.637688934803009,1]],8,8,8,8,8]]],0,0,[],[],[]],[[[16,"lambert2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[3],[3]],[[[6,".bin",4081387311,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149184,"length":39264,"count":9816,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":149184,"count":2072,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-0.4429548680782318,-0.0007473066216334701,-0.07864638417959213],"maxPosition",8,[1,0.4429548680782318,1.0025169849395752,0.10057771950960159]]],-1],0,0,[],[],[]],[[[18,"Skin-6",3089721219,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.4685976505279541,-0.0009499380248598754,1],[7,-1,1.2246357352777351e-16,5.21078652866235e-19,0,-1.2246468525851679e-16,-0.9999909996986389,-0.0042549301870167255,0,2.0251767946739174e-34,-0.0042549301870167255,0.9999909996986389,0,-0.08039180934429169,0.44717922806739807,0.002266369992867112,1],[7,-0.9999960064888,-0.0027596799191087484,-0.0002826459822244942,0,0.00277409004047513,-0.9943499565124512,-0.10611799359321594,0,0.000011802672815974802,-0.10611845552921295,0.9943529963493347,0,-0.08109959214925766,0.253466933965683,0.028238268569111824,1],[7,-1,1.2246382499067973e-16,4.457040942940249e-19,0,-1.2246468525851679e-16,-0.9999930262565613,-0.0036394500639289618,0,7.264191109213419e-41,-0.0036394500639289618,0.9999930262565613,0,0.08039172738790512,0.4471818208694458,0.001636749948374927,1],[7,-0.9999960064888,0.0027580198366194963,0.0002995389804709703,0,-0.0027742183301597834,-0.9937509298324585,-0.1115889921784401,0,-0.000010097511221829336,-0.11158948391675949,0.9937540292739868,0,0.08109954744577408,0.25336042046546936,0.02916295826435089,1],[7,-0.9573779702186584,0.2497909814119339,0.14502495527267456,0,-0.03485388308763504,-0.5983361005783081,0.8004871010780334,0,0.28672805428504944,0.7613139152526855,0.5815398693084717,0,0.0860648825764656,0.03376717492938042,-0.04804103448987007,1],[7,-0.9611001014709473,0.27142399549484253,-0.05114949494600296,0,-0.057501692324876785,-0.015496503561735153,0.9982249736785889,0,0.27014973759651184,0.9623349905014038,0.030501019209623337,0,0.08739051222801208,-0.0758618414402008,-0.0013180815149098635,1],[7,-0.9563779830932617,-0.2512040138244629,-0.14912006258964539,0,0.033623892813920975,-0.6017208695411682,0.7979978322982788,0,-0.2901890277862549,0.7581740617752075,0.5839191675186157,0,-0.08581019192934036,0.03333181142807007,-0.04851921275258064,1],[7,-0.960375964641571,-0.27404099702835083,0.05078340321779251,0,0.05724995583295822,-0.015645911917090416,0.9982370138168335,0,-0.2727632224559784,0.9615910053253174,0.030714787542819977,0,-0.08720983564853668,-0.07600788027048111,-0.0013641190016642213,1],[7,-0.13001805543899536,-0.9880990386009216,-0.08218857645988464,0,0.06700360029935837,0.07394663989543915,-0.9950090050697327,0,0.9892449975013733,-0.13487599790096283,0.056591831147670746,0,-0.04617132246494293,-0.15882238745689392,0.6374907493591309,1],[7,0.24968257546424866,-0.966679036617279,-0.05647759512066841,0,0.0344153493642807,0.06714688986539841,-0.9971490502357483,0,0.9677160978317261,0.24702702462673187,0.05003399774432182,0,0.05279683321714401,-0.23681163787841797,0.6440224051475525,1],[7,0.37737351655960083,-0.9248300194740295,-0.04773649945855141,0,0.02507569082081318,0.06173384562134743,-0.9977779984474182,0,0.9257211685180664,0.37533798813819885,0.04648749902844429,0,0.10029099136590958,-0.3404063284397125,0.647269606590271,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865434163250029,-0.3503487706184387,0.6751158833503723,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865403895266354,-0.39344334602355957,0.6751158833503723,1],[7,0.3948627710342407,0.9180830121040344,0.03474658727645874,0,-0.037632979452610016,0.05395069718360901,-0.9978340268135071,0,-0.9179691076278687,0.3926999866962433,0.05585329607129097,0,-0.09858840703964233,-0.3327319622039795,0.651500940322876,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048198513686657,-0.34539973735809326,0.6781477928161621,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048174299299717,-0.38458555936813354,0.6781477928161621,1],[7,0.2469419687986374,0.9675700068473816,0.05318406969308853,0,-0.04871439188718796,0.06720980256795883,-0.9965490102767944,0,-0.967805027961731,0.2434989959001541,0.06373149156570435,0,-0.04344252869486809,-0.23697492480278015,0.6446847915649414,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.004326067864894867,-0.44243544340133667,0.6841872334480286,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.011511702090501785,-0.4489607512950897,0.6773713827133179,1],[7,-0.08225024491548538,0.9933419823646545,0.08066292852163315,0,-0.07725554704666138,0.0743386521935463,-0.9942359924316406,0,-0.9936130046844482,-0.08800780028104782,0.07062679529190063,0,0.0423567071557045,-0.15955717861652374,0.637688934803009,1],[7,-0.0308699794113636,0.9953270554542542,-0.09149833768606186,0,-0.08220931142568588,-0.0937601774930954,-0.9921950101852417,0,-0.9961370229721069,-0.023107027634978294,0.08471949398517609,0,0.03984997794032097,0.025037318468093872,0.6556342840194702,1],[7,0.015451744198799133,-0.9953270554542542,0.09532216936349869,0,0.0815652534365654,-0.09376112371683121,-0.9922480583190918,0,0.9965479969978333,0.023106953129172325,0.07973531633615494,0,-0.03945717588067055,0.025703759863972664,0.6555943489074707,1],[7,1,0,0,0,0,0.9968389868736267,0.07944390177726746,0,0,-0.07944390177726746,0.9968389868736267,0,3.814700022530815e-8,-0.5057063698768616,-0.03817417100071907,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.5508158802986145,-0.03817420080304146,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1228268893,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26928,"length":6144,"count":1536,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26928,"count":374,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24536645412445068,0.9117027521133423,-0.022507837042212486],"maxPosition",8,[1,0.24536648392677307,1.0838066339492798,0.021239040419459343]]],-1],0,0,[],[],[]],[[[18,"Skin-9",2128040781,["mixamorig:Hips","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.4685976505279541,-0.0009499380248598754,1],[7,-1,1.2246357352777351e-16,5.21078652866235e-19,0,-1.2246468525851679e-16,-0.9999909996986389,-0.0042549301870167255,0,2.0251767946739174e-34,-0.0042549301870167255,0.9999909996986389,0,-0.08039180934429169,0.44717922806739807,0.002266369992867112,1],[7,-1,1.2246382499067973e-16,4.457040942940249e-19,0,-1.2246468525851679e-16,-0.9999930262565613,-0.0036394500639289618,0,7.264191109213419e-41,-0.0036394500639289618,0.9999930262565613,0,0.08039172738790512,0.4471818208694458,0.001636749948374927,1],[7,-0.9999960064888,0.0027580198366194963,0.0002995389804709703,0,-0.0027742183301597834,-0.9937509298324585,-0.1115889921784401,0,-0.000010097511221829336,-0.11158948391675949,0.9937540292739868,0,0.08109954744577408,0.25336042046546936,0.02916295826435089,1],[7,-0.9999960064888,-0.0027596799191087484,-0.0002826459822244942,0,0.00277409004047513,-0.9943499565124512,-0.10611799359321594,0,0.000011802672815974802,-0.10611845552921295,0.9943529963493347,0,-0.08109959214925766,0.253466933965683,0.028238268569111824,1],[7,-0.9611001014709473,0.27142399549484253,-0.05114949494600296,0,-0.057501692324876785,-0.015496503561735153,0.9982249736785889,0,0.27014973759651184,0.9623349905014038,0.030501019209623337,0,0.08739051222801208,-0.0758618414402008,-0.0013180815149098635,1],[7,-0.960375964641571,-0.27404099702835083,0.05078340321779251,0,0.05724995583295822,-0.015645911917090416,0.9982370138168335,0,-0.2727632224559784,0.9615910053253174,0.030714787542819977,0,-0.08720983564853668,-0.07600788027048111,-0.0013641190016642213,1],[7,-0.9573779702186584,0.2497909814119339,0.14502495527267456,0,-0.03485388308763504,-0.5983361005783081,0.8004871010780334,0,0.28672805428504944,0.7613139152526855,0.5815398693084717,0,0.0860648825764656,0.03376717492938042,-0.04804103448987007,1],[7,-0.9563779830932617,-0.2512040138244629,-0.14912006258964539,0,0.033623892813920975,-0.6017208695411682,0.7979978322982788,0,-0.2901890277862549,0.7581740617752075,0.5839191675186157,0,-0.08581019192934036,0.03333181142807007,-0.04851921275258064,1]],8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2303782042,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":13824,"length":4224,"count":1056,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13824,"count":192,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.1509099155664444,0.7476906776428223,-0.14741864800453186],"maxPosition",8,[1,0.1509099155664444,1.0142405033111572,0.1548670530319214]]],-1],0,0,[],[],[]],[[[6,".bin",1719544778,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":183960,"length":42432,"count":10608,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":183960,"count":2555,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.3396874666213989,0.7531033158302307,-0.3474031686782837],"maxPosition",8,[1,0.30590102076530457,1.1912637948989868,0.3420522212982178]]],-1],0,0,[],[],[]],[[[18,"Skin-3",265980569,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",2075766572,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":45720,"length":13128,"count":3282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45720,"count":635,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.16632814705371857,0.40678268671035767,-0.17480702698230743],"maxPosition",8,[1,0.18090690672397614,1.0532424449920654,0.1734781712293625]]],-1],0,0,[],[],[]],[[[18,"Skin-10",265980569,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1]],8,8,8]]],0,0,[],[],[]],[[[18,"Skin-7",2152143051,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,0.3948627710342407,0.9180830121040344,0.03474658727645874,0,-0.037632979452610016,0.05395069718360901,-0.9978340268135071,0,-0.9179691076278687,0.3926999866962433,0.05585329607129097,0,-0.09858840703964233,-0.3327319622039795,0.651500940322876,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048198513686657,-0.34539973735809326,0.6781477928161621,1],[7,-0.08225024491548538,0.9933419823646545,0.08066292852163315,0,-0.07725554704666138,0.0743386521935463,-0.9942359924316406,0,-0.9936130046844482,-0.08800780028104782,0.07062679529190063,0,0.0423567071557045,-0.15955717861652374,0.637688934803009,1],[7,0.2469419687986374,0.9675700068473816,0.05318406969308853,0,-0.04871439188718796,0.06720980256795883,-0.9965490102767944,0,-0.967805027961731,0.2434989959001541,0.06373149156570435,0,-0.04344252869486809,-0.23697492480278015,0.6446847915649414,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048174299299717,-0.38458555936813354,0.6781477928161621,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.004326067864894867,-0.44243544340133667,0.6841872334480286,1],[7,-0.13001805543899536,-0.9880990386009216,-0.08218857645988464,0,0.06700360029935837,0.07394663989543915,-0.9950090050697327,0,0.9892449975013733,-0.13487599790096283,0.056591831147670746,0,-0.04617132246494293,-0.15882238745689392,0.6374907493591309,1],[7,0.24968257546424866,-0.966679036617279,-0.05647759512066841,0,0.0344153493642807,0.06714688986539841,-0.9971490502357483,0,0.9677160978317261,0.24702702462673187,0.05003399774432182,0,0.05279683321714401,-0.23681163787841797,0.6440224051475525,1],[7,0.37737351655960083,-0.9248300194740295,-0.04773649945855141,0,0.02507569082081318,0.06173384562134743,-0.9977779984474182,0,0.9257211685180664,0.37533798813819885,0.04648749902844429,0,0.10029099136590958,-0.3404063284397125,0.647269606590271,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865434163250029,-0.3503487706184387,0.6751158833503723,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865403895266354,-0.39344334602355957,0.6751158833503723,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.011511702090501785,-0.4489607512950897,0.6773713827133179,1]],8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1792126712,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":31608,"length":3552,"count":888,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31608,"count":439,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.14757250249385834,0.7454569935798645,-0.1415952444076538],"maxPosition",8,[1,0.14757253229618073,1.0238710641860962,0.18337994813919067]]],-1],0,0,[],[],[]],[[[6,".bin",1470452114,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":86328,"length":14400,"count":3600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":86328,"count":1199,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4]]},"minPosition",8,[1,-0.2049214392900467,0.6789370775222778,-0.19902439415454865],"maxPosition",8,[1,0.17239154875278473,1.2247370481491089,0.20722661912441254]]],-1],0,0,[],[],[]],[[[16,"toc.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.14002801477909088},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[169,3]],[[[16,"body",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[170,3]],[[[18,"Skin-17",2768780214,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1"],[[[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.6023696064949036,-0.03817420080304146,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.4685976505279541,-0.0009499380248598754,1],[7,-1,1.2246357352777351e-16,5.21078652866235e-19,0,-1.2246468525851679e-16,-0.9999909996986389,-0.0042549301870167255,0,2.0251767946739174e-34,-0.0042549301870167255,0.9999909996986389,0,-0.08039180934429169,0.44717922806739807,0.002266369992867112,1],[7,-0.9999960064888,-0.0027596799191087484,-0.0002826459822244942,0,0.00277409004047513,-0.9943499565124512,-0.10611799359321594,0,0.000011802672815974802,-0.10611845552921295,0.9943529963493347,0,-0.08109959214925766,0.253466933965683,0.028238268569111824,1],[7,-1,1.2246382499067973e-16,4.457040942940249e-19,0,-1.2246468525851679e-16,-0.9999930262565613,-0.0036394500639289618,0,7.264191109213419e-41,-0.0036394500639289618,0.9999930262565613,0,0.08039172738790512,0.4471818208694458,0.001636749948374927,1],[7,-0.9999960064888,0.0027580198366194963,0.0002995389804709703,0,-0.0027742183301597834,-0.9937509298324585,-0.1115889921784401,0,-0.000010097511221829336,-0.11158948391675949,0.9937540292739868,0,0.08109954744577408,0.25336042046546936,0.02916295826435089,1],[7,-0.9611001014709473,0.27142399549484253,-0.05114949494600296,0,-0.057501692324876785,-0.015496503561735153,0.9982249736785889,0,0.27014973759651184,0.9623349905014038,0.030501019209623337,0,0.08739051222801208,-0.0758618414402008,-0.0013180815149098635,1],[7,-0.9573779702186584,0.2497909814119339,0.14502495527267456,0,-0.03485388308763504,-0.5983361005783081,0.8004871010780334,0,0.28672805428504944,0.7613139152526855,0.5815398693084717,0,0.0860648825764656,0.03376717492938042,-0.04804103448987007,1],[7,-0.9563779830932617,-0.2512040138244629,-0.14912006258964539,0,0.033623892813920975,-0.6017208695411682,0.7979978322982788,0,-0.2901890277862549,0.7581740617752075,0.5839191675186157,0,-0.08581019192934036,0.03333181142807007,-0.04851921275258064,1],[7,-0.960375964641571,-0.27404099702835083,0.05078340321779251,0,0.05724995583295822,-0.015645911917090416,0.9982370138168335,0,-0.2727632224559784,0.9615910053253174,0.030714787542819977,0,-0.08720983564853668,-0.07600788027048111,-0.0013641190016642213,1],[7,-0.13001805543899536,-0.9880990386009216,-0.08218857645988464,0,0.06700360029935837,0.07394663989543915,-0.9950090050697327,0,0.9892449975013733,-0.13487599790096283,0.056591831147670746,0,-0.04617132246494293,-0.15882238745689392,0.6374907493591309,1],[7,0.24968257546424866,-0.966679036617279,-0.05647759512066841,0,0.0344153493642807,0.06714688986539841,-0.9971490502357483,0,0.9677160978317261,0.24702702462673187,0.05003399774432182,0,0.05279683321714401,-0.23681163787841797,0.6440224051475525,1],[7,0.37737351655960083,-0.9248300194740295,-0.04773649945855141,0,0.02507569082081318,0.06173384562134743,-0.9977779984474182,0,0.9257211685180664,0.37533798813819885,0.04648749902844429,0,0.10029099136590958,-0.3404063284397125,0.647269606590271,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865434163250029,-0.3503487706184387,0.6751158833503723,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.0007865403895266354,-0.39344334602355957,0.6751158833503723,1],[7,0.3948627710342407,0.9180830121040344,0.03474658727645874,0,-0.037632979452610016,0.05395069718360901,-0.9978340268135071,0,-0.9179691076278687,0.3926999866962433,0.05585329607129097,0,-0.09858840703964233,-0.3327319622039795,0.651500940322876,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048198513686657,-0.34539973735809326,0.6781477928161621,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.010048174299299717,-0.38458555936813354,0.6781477928161621,1],[7,0.2469419687986374,0.9675700068473816,0.05318406969308853,0,-0.04871439188718796,0.06720980256795883,-0.9965490102767944,0,-0.967805027961731,0.2434989959001541,0.06373149156570435,0,-0.04344252869486809,-0.23697492480278015,0.6446847915649414,1],[7,0.1774158924818039,0.9834699630737305,-0.036202289164066315,0,-0.04884064570069313,-0.027941692620515823,-0.998416006565094,0,-0.9829230308532715,0.1789030134677887,0.043076030910015106,0,-0.004326067864894867,-0.44243544340133667,0.6841872334480286,1],[7,0.13114102184772491,-0.9910269975662231,0.025842338800430298,0,0.03987714648246765,-0.020773064345121384,-0.9989889860153198,0,0.9905610084533691,0.13203898072242737,0.03679514676332474,0,-0.011511702090501785,-0.4489607512950897,0.6773713827133179,1],[7,-0.08225024491548538,0.9933419823646545,0.08066292852163315,0,-0.07725554704666138,0.0743386521935463,-0.9942359924316406,0,-0.9936130046844482,-0.08800780028104782,0.07062679529190063,0,0.0423567071557045,-0.15955717861652374,0.637688934803009,1],[7,-0.0308699794113636,0.9953270554542542,-0.09149833768606186,0,-0.08220931142568588,-0.0937601774930954,-0.9921950101852417,0,-0.9961370229721069,-0.023107027634978294,0.08471949398517609,0,0.03984997794032097,0.025037318468093872,0.6556342840194702,1],[7,0.015451744198799133,-0.9953270554542542,0.09532216936349869,0,0.0815652534365654,-0.09376112371683121,-0.9922480583190918,0,0.9965479969978333,0.023106953129172325,0.07973531633615494,0,-0.03945717588067055,0.025703759863972664,0.6555943489074707,1],[7,1,0,0,0,0,0.9968389868736267,0.07944390177726746,0,0,-0.07944390177726746,0.9968389868736267,0,3.814700022530815e-8,-0.5057063698768616,-0.03817417100071907,1],[7,1,0,0,0,0,0.9968389868736267,0.07944399863481522,0,0,-0.07944399863481522,0.9968389868736267,0,3.814700022530815e-8,-0.5508158802986145,-0.03817420080304146,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[16,"Chainsaw Man.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[171,3]],[[[16,"Wednesday.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[172,3]],[[[6,".bin",1856010336,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":145728,"length":39072,"count":9768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":145728,"count":2024,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-0.4429548680782318,-0.0007473142468370497,-0.13744604587554932],"maxPosition",8,[1,0.4429548680782318,1.0042797327041626,0.15044468641281128]]],-1],0,0,[],[],[]],[[[16,"Huggy Wuggy.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.27216553688049316},"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[173,3]],[[[6,".bin",1450748609,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":12384,"length":2928,"count":732,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12384,"count":172,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.16919952630996704,0.8549515008926392,-0.16802501678466797],"maxPosition",8,[1,0.1677909642457962,1.0387215614318848,0.16888414323329926]]],-1],0,0,[],[],[]],[[[6,".bin",2177502147,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":19152,"length":5712,"count":1428,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19152,"count":266,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.16127735376358032,0.7315372228622437,-0.14971333742141724],"maxPosition",8,[1,0.1683567464351654,1.0295876264572144,0.1372019499540329]]],-1],0,0,[],[],[]],[[[18,"Skin-11",1290952268,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1]],8,8]]],0,0,[],[],[]],[[[18,"Skin-1",1966556855,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.661312997341156,0.01440867967903614,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,3.814700022530815e-8,-0.7451436519622803,0.02015651948750019,1]],8,8]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[32],[34,"goccay",[-2],[8,"e6oh++FwNX1LmrmcTYQ8vN",-1,0]],[15,"goccay",1,[[42,-3,[14,"69H9WuD41btJTEJxsicKOz"],[0],[0],1]],[8,"dehiVoMRNQIZFoLxFVy3o/",1,0]]],0,[0,4,1,0,-1,2,0,0,2,0,13,1,3],[0,0],[-1,1],[174,175]],[[[16,"color",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[176,3]],[[[6,".bin",779786369,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15936,"length":2808,"count":702,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15936,"count":332,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9572932720184326,0.20529448986053467,-0.9207806587219238],"maxPosition",8,[1,0.947581946849823,1.1896066665649414,0.9095630049705505]]],-1],0,0,[],[],[]],[[[16,"color",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[177,3]],[[[32],[34,"tree",[-2],[8,"30rwBIMRVbgYZoezA+9+qL",-1,0]],[15,"tree",1,[[42,-3,[14,"24oLqCEUNZBoV9smqStgYf"],[0],[0],1]],[8,"a4vWS77LxQXbYdxCBiCbcI",1,0]]],0,[0,4,1,0,-1,2,0,0,2,0,13,1,3],[0,0],[-1,1],[178,179]],[[[6,".bin",723738286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7392,"length":2976,"count":744,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7392,"count":154,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.2600207328796387,0,-1.6734482049942017],"maxPosition",8,[1,2.2600207328796387,7.5922417640686035,1.6734482049942017]]],-1],0,0,[],[],[]],[[[16,"color",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[180,3]],[[[6,".bin",829693577,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2016,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2016,"count":42,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5294824242591858,0,-0.5294824242591858],"maxPosition",8,[1,0.5294824242591858,0.11834900081157684,0.5294824242591858]]],-1],0,0,[],[],[]],[[[32],[34,"gach1",[-2],[8,"13c/MViQJc0rSuPiu8Zmie",-1,0]],[15,"gach1",1,[[42,-3,[14,"41atdXeSpcSrbKgSZQgKUQ"],[0],[0],1]],[8,"28FyTIlYpQ7Z+XtoEfpnCq",1,0]]],0,[0,4,1,0,-1,2,0,0,2,0,13,1,3],[0,0],[-1,1],[181,182]],[[{"name":"clock","rect":{"x":0,"y":0,"width":160,"height":160},"offset":{"x":0,"y":0},"originalSize":{"width":160,"height":160},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[183]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{},"mainColor",8,[4,4288059030],"shadeColor1",8,[4,4280756039],"shadeColor2",8,[4,4278190080],"emissive",8,[4,4278519045],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[8,3],[106,184]],[[[66,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":1,"metallic":0.3},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[106,3]],[[[6,".bin",2313536529,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009630412794649601,-0.011527786031365395,-0.005749976262450218],"maxPosition",8,[1,0.009630412794649601,0.011527747847139835,0.005749979987740517]]],-1],0,0,[],[],[]],[[[6,".bin",2405300788,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5712,"length":936,"count":234,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5712,"count":119,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3507543206214905,-0.4311043918132782,-0.045769162476062775],"maxPosition",8,[1,0.3507542610168457,0.4311043620109558,0.04576916620135307]]],-1],0,0,[],[],[]],[[[6,".bin",3386776943,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007597980555146933,-0.009558086283504963,-0.005748424679040909],"maxPosition",8,[1,0.007597970776259899,0.009558086283504963,0.005748422350734472]]],-1],0,0,[],[],[]],[[[6,".bin",2811152174,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011163635179400444,-0.007064723875373602,-0.005749653559178114],"maxPosition",8,[1,0.011163635179400444,0.0070647429674863815,0.005749657284468412]]],-1],0,0,[],[],[]],[[[6,".bin",2536717923,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00954593624919653,-0.006859521847218275,-0.005749849136918783],"maxPosition",8,[1,0.00954593624919653,0.006859512533992529,0.005749852862209082]]],-1],0,0,[],[],[]],[[[6,".bin",677789329,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":24,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.020186197012662888,-0.014730186201632023,-0.00574999675154686],"maxPosition",8,[1,0.02018619515001774,0.014730186201632023,0.005750002805143595]]],-1],0,0,[],[],[]],[[[6,".bin",2281109431,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01110843662172556,-0.007072401233017445,-0.00574979605153203],"maxPosition",8,[1,0.011108474805951118,0.007072391454130411,0.005749793257564306]]],-1],0,0,[],[],[]],[[[6,".bin",4201304448,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.018663901835680008,-0.00806813221424818,-0.0057499948889017105],"maxPosition",8,[1,0.018663901835680008,0.008068141527473927,0.005749992094933987]]],-1],0,0,[],[],[]],[[[6,".bin",3153593908,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011177387088537216,-0.007055950351059437,-0.005749525967985392],"maxPosition",8,[1,0.011177387088537216,0.007055969443172216,0.005749523639678955]]],-1],0,0,[],[],[]],[[[6,".bin",3672885433,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007621364668011665,-0.012333354912698269,-0.005749938078224659],"maxPosition",8,[1,0.007621364668011665,0.012333354912698269,0.005749938543885946]]],-1],0,0,[],[],[]],[[[6,".bin",3626750268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012842178344726562,-0.012077951803803444,-0.005749576725065708],"maxPosition",8,[1,0.012842140160501003,0.012077951803803444,0.005749574862420559]]],-1],0,0,[],[],[]],[[[6,".bin",85605858,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012534599751234055,-0.012132380157709122,-0.005749817937612534],"maxPosition",8,[1,0.012534561567008495,0.012132381089031696,0.0057498132809996605]]],-1],0,0,[],[],[]],[[[6,".bin",2539802802,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011297759599983692,-0.011135096661746502,-0.005749987438321114],"maxPosition",8,[1,0.011297721415758133,0.011135101318359375,0.005749986041337252]]],-1],0,0,[],[],[]],[[[6,".bin",2138772851,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012337589636445045,-0.010586772114038467,-0.005744817201048136],"maxPosition",8,[1,0.012337589636445045,0.01058677677065134,0.005744814872741699]]],-1],0,0,[],[],[]],[[[6,".bin",1092942771,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010704677551984787,-0.013940734788775444,-0.005749798845499754],"maxPosition",8,[1,0.010704677551984787,0.013940734788775444,0.005749797914177179]]],-1],0,0,[],[],[]],[[[6,".bin",2967156808,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0070711709558963776,-0.00806399341672659,-0.005749999079853296],"maxPosition",8,[1,0.0070711709558963776,0.00806399341672659,0.005749999079853296]]],-1],0,0,[],[],[]],[[[6,".bin",851892526,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012809677049517632,-0.010608825832605362,-0.005749951116740704],"maxPosition",8,[1,0.012809677049517632,0.010608864016830921,0.005749953910708427]]],-1],0,0,[],[],[]],[[[6,".bin",583446081,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012489852495491505,-0.01217245776206255,-0.005749917589128017],"maxPosition",8,[1,0.012489814311265945,0.0121724558994174,0.005749915726482868]]],-1],0,0,[],[],[]],[[[6,".bin",688933856,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01171672809869051,-0.01132592186331749,-0.005749828182160854],"maxPosition",8,[1,0.011716766282916069,0.011325931176543236,0.005749827716499567]]],-1],0,0,[],[],[]],[[[6,".bin",2088723709,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013276748359203339,-0.01165921613574028,-0.005745722446590662],"maxPosition",8,[1,0.013276786543428898,0.01165921613574028,0.005745718255639076]]],-1],0,0,[],[],[]],[[[6,".bin",2860510828,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00762861268594861,-0.0122916791588068,-0.00574997765943408],"maxPosition",8,[1,0.007628593593835831,0.0122916791588068,0.00574997765943408]]],-1],0,0,[],[],[]],[[[6,".bin",2924239689,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013727903366088867,-0.011185760609805584,-0.005749639123678207],"maxPosition",8,[1,0.013727912679314613,0.011185722425580025,0.005749636795371771]]],-1],0,0,[],[],[]],[[[6,".bin",1515776574,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5088,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5088,"count":106,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3512096703052521,-0.3507542908191681,-0.045769158750772476],"maxPosition",8,[1,0.35120972990989685,0.3507542610168457,0.045769158750772476]]],-1],0,0,[],[],[]],[[[6,".bin",1314346892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007318134419620037,-0.008084859699010849,-0.005738977808505297],"maxPosition",8,[1,0.0073181153275072575,0.008084859699010849,0.0057389759458601475]]],-1],0,0,[],[],[]],[[[6,".bin",1649238772,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00787775032222271,-0.013737449422478676,-0.005749987438321114],"maxPosition",8,[1,0.007877731695771217,0.013737430796027184,0.005749985110014677]]],-1],0,0,[],[],[]],[[[6,".bin",1419169964,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011240691877901554,-0.010032043792307377,-0.005749056115746498],"maxPosition",8,[1,0.011240696534514427,0.01003202423453331,0.005749058909714222]]],-1],0,0,[],[],[]],[[[6,".bin",3979258975,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00909284595400095,-0.010883941315114498,-0.005749862641096115],"maxPosition",8,[1,0.009092841297388077,0.010883903130888939,0.005749859847128391]]],-1],0,0,[],[],[]],[[[6,".bin",3371232932,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011187152937054634,-0.0070990752428770065,-0.005749992094933987],"maxPosition",8,[1,0.011187152937054634,0.007099056150764227,0.00574998976662755]]],-1],0,0,[],[],[]],[[[6,".bin",2435555860,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009060497395694256,-0.008714437484741211,-0.005749943200498819],"maxPosition",8,[1,0.009060497395694256,0.008714442141354084,0.005749944597482681]]],-1],0,0,[],[],[]],[[[6,".bin",909377394,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00903975497931242,-0.012700958177447319,-0.00574456574395299],"maxPosition",8,[1,0.00903975497931242,0.012700958177447319,0.005744568072259426]]],-1],0,0,[],[],[]],[[[6,".bin",1305991803,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.008359699510037899,-0.015949154272675514,-0.005749990232288837],"maxPosition",8,[1,0.008359699510037899,0.015949154272675514,0.005749991163611412]]],-1],0,0,[],[],[]],[[[6,".bin",178810140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.014232597313821316,-0.011350402608513832,-0.005749968346208334],"maxPosition",8,[1,0.014232597313821316,0.011350364424288273,0.005749973002821207]]],-1],0,0,[],[],[]],[[[6,".bin",2761138143,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013627500273287296,-0.011240100488066673,-0.005749238654971123],"maxPosition",8,[1,0.013627500273287296,0.011240081861615181,0.005749236326664686]]],-1],0,0,[],[],[]],[[[6,".bin",3770952023,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007913369685411453,-0.0080712316557765,-0.005749983247369528],"maxPosition",8,[1,0.007913379929959774,0.008071251213550568,0.0057499827817082405]]],-1],0,0,[],[],[]],[[[6,".bin",1644500726,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.35120970010757446,-0.35168391466140747,-0.045769162476062775],"maxPosition",8,[1,0.35120972990989685,0.351684033870697,0.045769162476062775]]],-1],0,0,[],[],[]],[[[6,".bin",132212014,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012894839979708195,-0.010562476702034473,-0.005750000476837158],"maxPosition",8,[1,0.012894839979708195,0.010562476702034473,0.005749998148530722]]],-1],0,0,[],[],[]],[[[6,".bin",824569356,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012851161882281303,-0.010598411783576012,-0.005749908275902271],"maxPosition",8,[1,0.012851161882281303,0.010598449967801571,0.0057499040849506855]]],-1],0,0,[],[],[]],[[[6,".bin",3608425451,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.014293594285845757,-0.011040611192584038,-0.005750000011175871],"maxPosition",8,[1,0.014293594285845757,0.011040611192584038,0.005749999079853296]]],-1],0,0,[],[],[]],[[[6,".bin",4127464708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007080116309225559,-0.008168878965079784,-0.005749683361500502],"maxPosition",8,[1,0.007080135401338339,0.00816888827830553,0.0057496870867908]]],-1],0,0,[],[],[]],[[[6,".bin",2253471117,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012170391157269478,-0.011587858200073242,-0.005749885458499193],"maxPosition",8,[1,0.012170391157269478,0.011587855406105518,0.0057498859241604805]]],-1],0,0,[],[],[]],[[[6,".bin",1153970178,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009102005511522293,-0.010863914154469967,-0.005749898497015238],"maxPosition",8,[1,0.00910200085490942,0.010863914154469967,0.0057498980313539505]]],-1],0,0,[],[],[]],[[[6,".bin",165791912,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7872,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7872,"count":164,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4814937710762024,-0.4582955241203308,-0.045769140124320984],"maxPosition",8,[1,0.4814937710762024,0.4582955241203308,0.045769140124320984]]],-1],0,0,[],[],[]],[[[6,".bin",1662565337,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007828006520867348,-0.011996498331427574,-0.005749423522502184],"maxPosition",8,[1,0.007828006520867348,0.011996478773653507,0.0057494258508086205]]],-1],0,0,[],[],[]],[[[6,".bin",1092386148,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007195034064352512,-0.00974834430962801,-0.005749970208853483],"maxPosition",8,[1,0.007195034064352512,0.00974834430962801,0.005749968346208334]]],-1],0,0,[],[],[]],[[[6,".bin",2330804507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00952149834483862,-0.011690521612763405,-0.005749933887273073],"maxPosition",8,[1,0.009521493688225746,0.011690483428537846,0.005749927833676338]]],-1],0,0,[],[],[]],[[[6,".bin",4091615919,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01121879555284977,-0.007057075388729572,-0.005749482661485672],"maxPosition",8,[1,0.011218815110623837,0.007057056296616793,0.005749479401856661]]],-1],0,0,[],[],[]],[[[6,".bin",317971703,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013015175238251686,-0.007277393247932196,-0.005749893840402365],"maxPosition",8,[1,0.013015175238251686,0.007277393247932196,0.005749890580773354]]],-1],0,0,[],[],[]],[[[6,".bin",1069525986,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.00787294376641512,-0.011243400163948536,-0.0057456232607364655],"maxPosition",8,[1,0.007872963324189186,0.011243381537497044,0.00574562419205904]]],-1],0,0,[],[],[]],[[[6,".bin",3582953940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.008713264018297195,-0.00986951868981123,-0.005749992560595274],"maxPosition",8,[1,0.008713264018297195,0.00986951868981123,0.005749995820224285]]],-1],0,0,[],[],[]],[[[6,".bin",4287342166,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010684115812182426,-0.01419063564389944,-0.005749800242483616],"maxPosition",8,[1,0.010684114880859852,0.01419063564389944,0.005749803967773914]]],-1],0,0,[],[],[]],[[[6,".bin",3084413739,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013879881240427494,-0.01107631716877222,-0.005750000476837158],"maxPosition",8,[1,0.013879881240427494,0.01107635535299778,0.005749999079853296]]],-1],0,0,[],[],[]],[[[16,"Material #25",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0},"mainColor",8,[4,4294177779],"albedoScale",8,[1,1,1,1],"emissive",8,[2,0,0,0,1]]],11]]],0,0,[0],[3],[3]],[[[6,".bin",2734481246,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01295968983322382,-0.01054225955158472,-0.005749998148530722],"maxPosition",8,[1,0.01295968983322382,0.01054225955158472,0.00575000187382102]]],-1],0,0,[],[],[]],[[[6,".bin",2443278057,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007424259092658758,-0.01161548588424921,-0.0057491278275847435],"maxPosition",8,[1,0.007424259092658758,0.01161552406847477,0.005749124102294445]]],-1],0,0,[],[],[]],[[[6,".bin",3830077492,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011812019161880016,-0.011308584362268448,-0.005749830510467291],"maxPosition",8,[1,0.011812019161880016,0.011308583430945873,0.005749828647822142]]],-1],0,0,[],[],[]],[[[6,".bin",1763016283,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010093803517520428,-0.013076172210276127,-0.005749753676354885],"maxPosition",8,[1,0.010093803517520428,0.013076172210276127,0.005749749951064587]]],-1],0,0,[],[],[]],[[[6,".bin",1999050423,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012440910562872887,-0.012014598585665226,-0.005749963689595461],"maxPosition",8,[1,0.012440948747098446,0.01201458927243948,0.005749969277530909]]],-1],0,0,[],[],[]],[[[6,".bin",974459704,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01280195266008377,-0.007305564824491739,-0.005749998148530722],"maxPosition",8,[1,0.012801933102309704,0.007305564824491739,0.00574999675154686]]],-1],0,0,[],[],[]],[[[6,".bin",3350220087,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009573847986757755,-0.011641502380371094,-0.00575000187382102],"maxPosition",8,[1,0.009573850780725479,0.011641502380371094,0.005749998148530722]]],-1],0,0,[],[],[]],[[[6,".bin",2026798261,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012818203307688236,-0.011162803508341312,-0.0057440572418272495],"maxPosition",8,[1,0.01281818374991417,0.011162803508341312,0.005744057707488537]]],-1],0,0,[],[],[]],[[[6,".bin",458668580,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009686498902738094,-0.013004817999899387,-0.0057485527358949184],"maxPosition",8,[1,0.009686498902738094,0.013004817999899387,0.005748546216636896]]],-1],0,0,[],[],[]],[[[6,".bin",1562299533,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012911110185086727,-0.007305040489882231,-0.005750000011175871],"maxPosition",8,[1,0.012911072000861168,0.007305049803107977,0.00574999675154686]]],-1],0,0,[],[],[]],[[[6,".bin",3358031222,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007962836883962154,-0.011623497121036053,-0.005744193680584431],"maxPosition",8,[1,0.007962818257510662,0.011623477563261986,0.005744187626987696]]],-1],0,0,[],[],[]],[[[6,".bin",1894487609,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.008649063296616077,-0.009999256581068039,-0.005749925505369902],"maxPosition",8,[1,0.008649072609841824,0.009999275207519531,0.005749919451773167]]],-1],0,0,[],[],[]],[[[6,".bin",1908597712,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013879146426916122,-0.011076965369284153,-0.0057500009424984455],"maxPosition",8,[1,0.013879146426916122,0.011076945811510086,0.005749999079853296]]],-1],0,0,[],[],[]],[[[6,".bin",201621129,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011979294009506702,-0.0072040557861328125,-0.005749901756644249],"maxPosition",8,[1,0.011979284696280956,0.0072040557861328125,0.005749898962676525]]],-1],0,0,[],[],[]],[[[6,".bin",3006260774,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.008243122138082981,-0.008890991099178791,-0.005749999079853296],"maxPosition",8,[1,0.008243122138082981,0.008891010656952858,0.005749999079853296]]],-1],0,0,[],[],[]],[[[6,".bin",567966234,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01113672275096178,-0.0070616151206195354,-0.005749652162194252],"maxPosition",8,[1,0.011136741377413273,0.0070616151206195354,0.005749648902565241]]],-1],0,0,[],[],[]],[[[6,".bin",419236327,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4176,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4176,"count":87,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.34148430824279785,-0.2740554213523865,-0.04576915130019188],"maxPosition",8,[1,0.3414841890335083,0.2740553915500641,0.04576915130019188]]],-1],0,0,[],[],[]],[[[6,".bin",3718273475,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.009506497532129288,-0.011723938398063183,-0.005749870557337999],"maxPosition",8,[1,0.009506494738161564,0.011723900213837624,0.005749874282628298]]],-1],0,0,[],[],[]],[[[6,".bin",473346393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011306686326861382,-0.011132058687508106,-0.0057499767281115055],"maxPosition",8,[1,0.01130672451108694,0.011132058687508106,0.005749979987740517]]],-1],0,0,[],[],[]],[[[6,".bin",2694091452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010616932064294815,-0.007978263311088085,-0.005735071841627359],"maxPosition",8,[1,0.010616932064294815,0.007978263311088085,0.005735074169933796]]],-1],0,0,[],[],[]],[[[6,".bin",947248722,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0072309114038944244,-0.0076973820105195045,-0.005744932219386101],"maxPosition",8,[1,0.0072309114038944244,0.007697391323745251,0.00574493408203125]]],-1],0,0,[],[],[]],[[[6,".bin",2143162169,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0072042085230350494,-0.009702606126666069,-0.005749998148530722],"maxPosition",8,[1,0.0072042085230350494,0.009702596813440323,0.005749993491917849]]],-1],0,0,[],[],[]],[[[6,".bin",3445714576,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.01109609566628933,-0.0070672607980668545,-0.005749758332967758],"maxPosition",8,[1,0.01109609566628933,0.0070672607980668545,0.005749756004661322]]],-1],0,0,[],[],[]],[[[6,".bin",3389389141,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.013015937991440296,-0.007291221525520086,-0.00574996042996645],"maxPosition",8,[1,0.013015937991440296,0.007291202433407307,0.005749957635998726]]],-1],0,0,[],[],[]],[[[6,".bin",3853215562,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.010131502524018288,-0.012996711768209934,-0.005749917589128017],"maxPosition",8,[1,0.010131502524018288,0.012996711768209934,0.00574991712346673]]],-1],0,0,[],[],[]],[[[6,".bin",3300945845,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.007865390740334988,-0.013813819736242294,-0.005749912932515144],"maxPosition",8,[1,0.007865390740334988,0.013813819736242294,0.005749908741563559]]],-1],0,0,[],[],[]],[[[6,".bin",3083565453,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.015075287781655788,-0.011751098558306694,-0.005749999079853296],"maxPosition",8,[1,0.015075283125042915,0.011751098558306694,0.00575000187382102]]],-1],0,0,[],[],[]],[[[6,".bin",2194920300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.012908553704619408,-0.007291469722986221,-0.005749995820224285],"maxPosition",8,[1,0.012908573262393475,0.007291488815099001,0.005749994423240423]]],-1],0,0,[],[],[]],[[[6,".bin",3084478031,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.0117423627525568,-0.011442775838077068,-0.005749966949224472],"maxPosition",8,[1,0.01174240093678236,0.011442775838077068,0.005749969277530909]]],-1],0,0,[],[],[]],[[[6,".bin",1759511730,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":16,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.011659050360321999,-0.011523298919200897,-0.005749996285885572],"maxPosition",8,[1,0.011659050360321999,0.01152330357581377,0.00574999675154686]]],-1],0,0,[],[],[]],[[[6,".bin",3036500293,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6720,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6720,"count":140,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3444164991378784,0,-0.3444180190563202],"maxPosition",8,[1,0.3444226086139679,0.4035693407058716,0.3444189429283142]]],-1],0,0,[],[],[]],[[[6,".bin",2311706300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5760,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.37892699241638184,0.383199006319046,-0.3789263963699341],"maxPosition",8,[1,0.37892699241638184,0.5743182301521301,0.37892577052116394]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","rgbe":false,"mipmaps":[{"front":"2dfCtAusZHWIpYVYYddsv+","back":"01SaIEZ39LqKQ0cr35HQrD","left":"0dH6ijlpZNb7s0csKvSiiw","right":"661JCx/d1JXYhXNDaSZqmd","top":"c2gURW1+lAK6X3XnexcZ8H","bottom":"50+8BW3X1OCalZY9DuiG4U"}]}],[9],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"name":"meter1","rect":{"x":1,"y":0,"width":798,"height":398},"offset":{"x":0,"y":1},"originalSize":{"width":800,"height":400},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[185]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[9],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[58,"iphoneSound",".mp3",18.337959],-1],0,0,[],[],[]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{},"mainColor",8,[4,4278190150],"emissive",8,[4,4278190126]],{},{}],11,0,0]]],0,0,[0],[3],[3]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[186]],[[{"name":"btn","rect":{"x":0,"y":0,"width":512,"height":171},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":171},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[187]],[[{"name":"456 Run Challenge_ui_loading_thanhloading_duoi","rect":{"x":0,"y":0,"width":700,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":700,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[188]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[189,3]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true,"USE_ALPHA_TEST":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[190,3]],[[[57,"builtin-toon",[{"hash":858575070,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":145721314,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":4,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) out vec3 v_tangent;\n  layout(location = 5) out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) in vec3 v_tangent;\n  layout(location = 5) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin vec3 v_normal;\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":226,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":69}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":3239663869,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":187,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":69}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"name":"icon]","rect":{"x":0,"y":0,"width":500,"height":500},"offset":{"x":0,"y":0},"originalSize":{"width":500,"height":500},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[191]],[[[58,"2_SD",".mp3",3.12],-1],0,0,[],[],[]],[[{"name":"456 Run Challenge_ui_loading_thanhloading_tren","rect":{"x":0,"y":0,"width":640,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":640,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[192]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,3],[193,3]],[[{"name":"meter3","rect":{"x":2,"y":1,"width":796,"height":398},"offset":{"x":0,"y":0},"originalSize":{"width":800,"height":400},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[194]],[[[91,"Squid_PA_30"],[36,"Lines",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152],[1,0,0.003,0.002]],[36,"Lines",[-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-202,-203,-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-300,-301,-302,-303,-304],[1,0,0.003,0.002]],[36,"Lines",[-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315,-316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326,-327,-328,-329,-330,-331,-332,-333,-334,-335,-336,-337,-338,-339,-340,-341,-342,-343,-344,-345,-346,-347,-348,-349,-350,-351,-352,-353,-354,-355,-356,-357,-358,-359,-360,-361,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-378,-379,-380,-381,-382,-383,-384,-385,-386,-387,-388,-389,-390,-391,-392,-393,-394,-395,-396,-397,-398,-399,-400,-401,-402,-403,-404,-405,-406,-407,-408,-409,-410,-411,-412,-413,-414,-415,-416,-417,-418,-419,-420,-421,-422,-423,-424,-425,-426,-427,-428,-429,-430,-431,-432,-433,-434,-435,-436,-437,-438,-439,-440,-441,-442,-443,-444,-445,-446,-447,-448,-449,-450,-451,-452,-453,-454,-455,-456],[1,0,0.003,0.002]],[36,"Lines",[-457,-458,-459,-460,-461,-462,-463,-464,-465,-466,-467,-468,-469,-470,-471,-472,-473,-474,-475,-476,-477,-478,-479,-480,-481,-482,-483,-484,-485,-486,-487,-488,-489,-490,-491,-492,-493,-494,-495,-496,-497,-498,-499,-500,-501,-502,-503,-504,-505,-506,-507,-508,-509,-510,-511,-512,-513,-514,-515,-516,-517,-518,-519,-520,-521,-522,-523,-524,-525,-526,-527,-528,-529,-530,-531,-532,-533,-534,-535,-536,-537,-538,-539,-540,-541,-542,-543,-544,-545,-546,-547,-548,-549,-550,-551,-552,-553,-554,-555,-556,-557,-558,-559,-560,-561,-562,-563,-564,-565,-566,-567,-568,-569,-570,-571,-572,-573,-574,-575,-576,-577,-578,-579,-580,-581,-582,-583,-584,-585,-586,-587,-588,-589,-590,-591,-592,-593,-594,-595,-596,-597,-598,-599,-600,-601,-602,-603,-604,-605,-606,-607,-608],[1,0,0.003,0.002]],[37,"SaoNetDut",[-609,-610,-611,-612,-613,-614,-615,-616,-617,-618,-619,-620,-621,-622,-623,-624,-625,-626,-627,-628,-629,-630,-631,-632,-633,-634,-635,-636,-637,-638,-639,-640,-641,-642,-643,-644,-645,-646,-647,-648,-649,-650,-651,-652,-653,-654,-655,-656,-657,-658,-659,-660,-661,-662,-663,-664,-665,-666,-667,-668,-669,-670,-671,-672,-673,-674,-675,-676,-677,-678,-679,-680,-681,-682,-683,-684],[1,-0.0015854453667998314,0.03110024891793728,-0.04083797335624695],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[37,"SaoNetDut",[-685,-686,-687,-688,-689,-690,-691,-692,-693,-694,-695,-696,-697,-698,-699,-700,-701,-702,-703,-704,-705,-706,-707,-708,-709,-710,-711,-712,-713,-714,-715,-716,-717,-718,-719,-720,-721,-722,-723,-724,-725,-726,-727,-728,-729,-730,-731,-732,-733,-734,-735,-736,-737,-738,-739,-740,-741,-742,-743,-744,-745,-746,-747,-748,-749,-750,-751,-752,-753,-754,-755,-756,-757,-758,-759,-760],[1,-0.0015854453667998314,0.03110024891793728,-0.04083797335624695],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[37,"SaoNetDut",[-761,-762,-763,-764,-765,-766,-767,-768,-769,-770,-771,-772,-773,-774,-775,-776,-777,-778,-779,-780,-781,-782,-783,-784,-785,-786,-787,-788,-789,-790,-791,-792,-793,-794,-795,-796,-797,-798,-799,-800,-801,-802,-803,-804,-805,-806,-807,-808,-809,-810,-811,-812,-813,-814,-815,-816,-817,-818,-819,-820,-821,-822,-823,-824,-825,-826,-827,-828,-829,-830,-831,-832,-833,-834,-835,-836],[1,-0.0015854453667998314,0.03110024891793728,-0.04083797335624695],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[37,"SaoNetDut",[-837,-838,-839,-840,-841,-842,-843,-844,-845,-846,-847,-848,-849,-850,-851,-852,-853,-854,-855,-856,-857,-858,-859,-860,-861,-862,-863,-864,-865,-866,-867,-868,-869,-870,-871,-872,-873,-874,-875,-876,-877,-878,-879,-880,-881,-882,-883,-884,-885,-886,-887,-888,-889,-890,-891,-892,-893,-894,-895,-896,-897,-898,-899,-900,-901,-902,-903,-904,-905,-906,-907,-908,-909,-910,-911,-912],[1,-0.0015854453667998314,0.03110024891793728,-0.04083797335624695],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[70,"Map",[-913,-914,-915,-916,-917,-918,-919,-920,-921,-922,-923,-924,-925,-926,-927,-928,-929,-930],[1,2.019,0,-2.312],[3,0,-0.35966298131010116,0,0.9330822792632651],[1,3,3,3],[1,0,-42.159,0]],[71,"Main3D",[-931,-932,9,-933,-934,-935,-936,-937,-938]],[12,0,null,10,[13,"e0nMCJH5ZXuYVTIzCModjd",-948,[92,"baQ3A7GLVMo7QFkVltIrtB",null,[[60,[4,["e0nMCJH5ZXuYVTIzCModjd"]],[[96,-947]]]],[[5,"mainCharacter",["_name"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[10,["_lpos"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,-0.227,-0.037,3.777]],[10,["_lrot"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[3,0,-0.9990482215818578,0,-0.04361938736533589]],[10,["_euler"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0,-185,0]],[5,false,["_active"],[4,["4eACVGz4BeaYuWvkgI8Oe2"]]],[5,false,["_active"],[4,["c6IbTkD+9cMbCWiPW/ifr3"]]],[5,false,["_active"],[4,["5f+j76VSZcxLaT/7p3jwid"]]],[5,false,["_active"],[4,["43qc9GcwNSUZFC/g7BcjGf"]]],[5,false,["_active"],[4,["3d8ZOThEpUoa7/mR2lnz/N"]]],[5,false,["_active"],[4,["7b+NTo3kBZA6pwP+GZT4HN"]]],[5,false,["_active"],[4,["d4OKkTVkVdM6965B5Nuj7x"]]],[5,false,["_active"],[4,["ebOtOSnq9cw577jdetZ7AD"]]],[5,false,["_active"],[4,["f0Q4IWBclY96bDNvCxoYpc"]]],[5,false,["_active"],[4,["280TDHpuBZQK143r7FegMn"]]],[5,false,["_active"],[4,["74adu5Ls5a7Iw+cXzuyUZr"]]],[5,false,["_active"],[4,["90qGGkPilaJZaLEwN/7ZgA"]]],[5,false,["_active"],[4,["7bIWqOCcFbn6BVoq8SrRBn"]]],[5,false,["_active"],[4,["23z+myjE9WALtn2eT8ktUB"]]],[5,false,["_active"],[4,["72Wb6tiU5fB7hjaivEUXuR"]]],[5,false,["_active"],[4,["71m/zGKxpdLoFtYooFDQoH"]]],[9,["_materials","0"],[4,["95H/nGvNJfiZsAiwPBm3Py"]],1915],[22,["_skinningRoot"],[4,["95H/nGvNJfiZsAiwPBm3Py"]],-939],[9,["_materials","0"],[4,["d0R10vZm5aVZnpmNRCln2d"]],1916],[22,["_skinningRoot"],[4,["d0R10vZm5aVZnpmNRCln2d"]],-940],[9,["_materials","0"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],1917],[22,["_skinningRoot"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],-941],[5,true,["_active"],[4,["3bTJVENidZ+qDXteDlC7fQ"]]],[5,false,["_active"],[4,["faS5YGfctYCI+xbMjH58zk"]]],[10,["_lscale"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,4.5,4.5,4.5]],[5,true,["_active"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[9,["_materials","0"],[4,["26TtfzHb9anpdMCTawLG9h"]],1918],[22,["_skinningRoot"],[4,["26TtfzHb9anpdMCTawLG9h"]],-942],[9,["_materials","0"],[4,["e0GyjK+QJZZJOsOGb2e7TK"]],1919],[22,["_skinningRoot"],[4,["e0GyjK+QJZZJOsOGb2e7TK"]],-943],[5,1,["_shadowCastingMode"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]]],[5,3,["_clips","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[9,["_clips","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1920],[9,["_defaultClip"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1921],[11,true,["playOnLoad"],-944],[23,["_clips","1"],-945,1922],[23,["_clips","2"],-946,1923]]],1914]],[12,0,null,10,[13,"e0nMCJH5ZXuYVTIzCModjd",-960,[93,"16A67W2olDcbq52ciiHZkw",null,[[50,[4,["e0nMCJH5ZXuYVTIzCModjd"]],[[[45,"mixamorig:LeftHandIndex4 Socket",-958,[1,0.49340281408194775,0.6748848338402265,0.05523453838733207],[3,0.539045707974159,0.4334647673707052,-0.472652427801231,0.5460198738658696],[1,91.6030339711525,79.76837562648356,-2.7994735916007194]],-959],4,1]]],[[60,[4,["e0nMCJH5ZXuYVTIzCModjd"]],[[100,-957,-956]]]],[[5,"enemy",["_name"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[10,["_lpos"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0.528,-0.037,-4.629]],[10,["_lrot"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[3,0,1.2246467991473532e-16,0,-1]],[10,["_euler"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0,360,0]],[10,["_lscale"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,4.5,4.5,4.5]],[5,false,["_active"],[4,["71m/zGKxpdLoFtYooFDQoH"]]],[5,false,["_active"],[4,["4eACVGz4BeaYuWvkgI8Oe2"]]],[5,false,["_active"],[4,["74adu5Ls5a7Iw+cXzuyUZr"]]],[5,false,["_active"],[4,["90qGGkPilaJZaLEwN/7ZgA"]]],[5,false,["_active"],[4,["d4OKkTVkVdM6965B5Nuj7x"]]],[5,false,["_active"],[4,["7b+NTo3kBZA6pwP+GZT4HN"]]],[5,false,["_active"],[4,["c6IbTkD+9cMbCWiPW/ifr3"]]],[5,false,["_active"],[4,["5f+j76VSZcxLaT/7p3jwid"]]],[5,false,["_active"],[4,["43qc9GcwNSUZFC/g7BcjGf"]]],[5,false,["_active"],[4,["3d8ZOThEpUoa7/mR2lnz/N"]]],[5,false,["_active"],[4,["7bIWqOCcFbn6BVoq8SrRBn"]]],[5,false,["_active"],[4,["23z+myjE9WALtn2eT8ktUB"]]],[5,false,["_active"],[4,["72Wb6tiU5fB7hjaivEUXuR"]]],[5,false,["_active"],[4,["ebOtOSnq9cw577jdetZ7AD"]]],[5,false,["_active"],[4,["280TDHpuBZQK143r7FegMn"]]],[5,false,["_active"],[4,["f0Q4IWBclY96bDNvCxoYpc"]]],[5,false,["_active"],[4,["faS5YGfctYCI+xbMjH58zk"]]],[5,true,["_active"],[4,["3bTJVENidZ+qDXteDlC7fQ"]]],[9,["_materials","0"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],1970],[22,["_skinningRoot"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],-949],[9,["_materials","0"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],1971],[22,["_skinningRoot"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],-950],[5,3,["_clips","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[9,["_clips","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1972],[9,["_defaultClip"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1973],[5,true,["playOnLoad"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[5,1,["_sockets","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[49,["_sockets","0"],-952,[51,"mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4",-951]],[23,["_clips","1"],-953,1974],[11,true,["_useBakedAnimation"],-954],[23,["_clips","2"],-955,1975]]],1964]],[52,"Roll",33554432,[-962,-963,-964,-965,-966],[[31,-961]],[1,0,180,0],[1,0.2,0.2,1]],[72,"CTA",false,33554432,[-971,-972,-973],[[31,-967],[102,true,-968,[2022],2023],[103,-970,-969]]],[104,"Squid_PA_30",[-995,-996,-997,-998,-999,-1000],[87,"ea8122fe-55a2-4720-a57b-d691f022cb96",[-974,11,-975,-976,-977,-978,-979,-980,-981,-982,-983,-984,-985,-986,-987,-988,-989,-990,-991,12,-992,-993,-994]],[105,[106,30000,0.5208,[2,0.2392156862745098,0.3607843137254902,0.796078431372549,0.7812496875],[2,0.2392156862745098,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[107,1,2,[4,4283190348],[0,1024,1024]],[108,false,2029,2030],[109],[110]]],[73,"UIController",33554432,[-1007,-1008,-1009,14],[[31,-1001],[111,-1006,-1005,-1004,-1003,-1002,14]]],[74,"Canvas",33554432,"3c+Vxr7llCkZ13JD9PnmbG",15,[-1014,-1015,16],[[21,-1010,[5,320,480]],[112,-1012,-1011],[113,45,-2.842170943040401e-14,-2.842170943040401e-14,-1013]],[1,160,239.99999999999997,0]],[26,"Keo_Sao 1",[-1017,5,-1018,1],[[27,-1016,[470],471]],[1,0,0.208,0],[1,0.44,0.44,0.44]],[26,"Keo_Sao 1",[-1020,6,-1021,2],[[27,-1019,[948],949]],[1,0,0.208,0],[1,0.44,0.44,0.44]],[26,"Keo_Sao 1",[-1023,7,-1024,3],[[27,-1022,[1426],1427]],[1,0,0.208,0],[1,0.44,0.44,0.44]],[26,"Keo_Sao 1",[-1026,8,-1027,4],[[27,-1025,[1904],1905]],[1,0,0.208,0],[1,0.44,0.44,0.44]],[12,0,null,10,[13,"e0nMCJH5ZXuYVTIzCModjd",-1037,[59,"bf3NsDGURC5qCXNDMI62O8",[[50,[4,["e0nMCJH5ZXuYVTIzCModjd"]],[[[45,"mixamorig:LeftHandIndex4 Socket",-1035,[1,0.49340281408194775,0.6748848338402265,0.05523453838733207],[3,0.539045707974159,0.4334647673707052,-0.472652427801231,0.5460198738658696],[1,91.6030339711525,79.76837562648356,-2.7994735916007194]],-1036],4,1]]],[[5,"character_rig_3",["_name"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[10,["_lpos"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,17.878,-0.037,-9.573]],[10,["_lrot"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[3,0,0.3826834323650899,0,-0.9238795325112867]],[10,["_euler"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0,315,0]],[10,["_lscale"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,4.5,4.5,4.5]],[5,false,["_active"],[4,["71m/zGKxpdLoFtYooFDQoH"]]],[5,false,["_active"],[4,["4eACVGz4BeaYuWvkgI8Oe2"]]],[5,false,["_active"],[4,["74adu5Ls5a7Iw+cXzuyUZr"]]],[5,false,["_active"],[4,["90qGGkPilaJZaLEwN/7ZgA"]]],[5,false,["_active"],[4,["d4OKkTVkVdM6965B5Nuj7x"]]],[5,false,["_active"],[4,["7b+NTo3kBZA6pwP+GZT4HN"]]],[5,false,["_active"],[4,["c6IbTkD+9cMbCWiPW/ifr3"]]],[5,false,["_active"],[4,["5f+j76VSZcxLaT/7p3jwid"]]],[5,false,["_active"],[4,["43qc9GcwNSUZFC/g7BcjGf"]]],[5,false,["_active"],[4,["3d8ZOThEpUoa7/mR2lnz/N"]]],[5,false,["_active"],[4,["7bIWqOCcFbn6BVoq8SrRBn"]]],[5,false,["_active"],[4,["23z+myjE9WALtn2eT8ktUB"]]],[5,false,["_active"],[4,["72Wb6tiU5fB7hjaivEUXuR"]]],[5,false,["_active"],[4,["ebOtOSnq9cw577jdetZ7AD"]]],[5,false,["_active"],[4,["280TDHpuBZQK143r7FegMn"]]],[5,false,["_active"],[4,["f0Q4IWBclY96bDNvCxoYpc"]]],[5,false,["_active"],[4,["faS5YGfctYCI+xbMjH58zk"]]],[5,true,["_active"],[4,["3bTJVENidZ+qDXteDlC7fQ"]]],[9,["_materials","0"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],1982],[22,["_skinningRoot"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],-1028],[9,["_materials","0"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],1983],[22,["_skinningRoot"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],-1029],[5,3,["_clips","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[9,["_clips","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1984],[9,["_defaultClip"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1985],[5,true,["playOnLoad"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[5,1,["_sockets","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[49,["_sockets","0"],-1031,[51,"mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4",-1030]],[23,["_clips","1"],-1032,1986],[11,true,["_useBakedAnimation"],-1033],[23,["_clips","2"],-1034,1987]]],1976]],[12,0,null,10,[13,"e0nMCJH5ZXuYVTIzCModjd",-1047,[59,"7fyUNGjwtOBr6OM2N5djLG",[[50,[4,["e0nMCJH5ZXuYVTIzCModjd"]],[[[45,"mixamorig:LeftHandIndex4 Socket",-1045,[1,0.49340281408194775,0.6748848338402265,0.05523453838733207],[3,0.539045707974159,0.4334647673707052,-0.472652427801231,0.5460198738658696],[1,91.6030339711525,79.76837562648356,-2.7994735916007194]],-1046],4,1]]],[[5,"character_rig_4",["_name"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[10,["_lpos"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,9.154,-0.037,-16.448]],[10,["_lrot"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[3,0,0.21643961393810274,0,-0.9762960071199334]],[10,["_euler"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0,335,0]],[10,["_lscale"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,4.5,4.5,4.5]],[5,false,["_active"],[4,["71m/zGKxpdLoFtYooFDQoH"]]],[5,false,["_active"],[4,["4eACVGz4BeaYuWvkgI8Oe2"]]],[5,false,["_active"],[4,["74adu5Ls5a7Iw+cXzuyUZr"]]],[5,false,["_active"],[4,["90qGGkPilaJZaLEwN/7ZgA"]]],[5,false,["_active"],[4,["d4OKkTVkVdM6965B5Nuj7x"]]],[5,false,["_active"],[4,["7b+NTo3kBZA6pwP+GZT4HN"]]],[5,false,["_active"],[4,["c6IbTkD+9cMbCWiPW/ifr3"]]],[5,false,["_active"],[4,["5f+j76VSZcxLaT/7p3jwid"]]],[5,false,["_active"],[4,["43qc9GcwNSUZFC/g7BcjGf"]]],[5,false,["_active"],[4,["3d8ZOThEpUoa7/mR2lnz/N"]]],[5,false,["_active"],[4,["7bIWqOCcFbn6BVoq8SrRBn"]]],[5,false,["_active"],[4,["23z+myjE9WALtn2eT8ktUB"]]],[5,false,["_active"],[4,["72Wb6tiU5fB7hjaivEUXuR"]]],[5,false,["_active"],[4,["ebOtOSnq9cw577jdetZ7AD"]]],[5,false,["_active"],[4,["280TDHpuBZQK143r7FegMn"]]],[5,false,["_active"],[4,["f0Q4IWBclY96bDNvCxoYpc"]]],[5,false,["_active"],[4,["faS5YGfctYCI+xbMjH58zk"]]],[5,true,["_active"],[4,["3bTJVENidZ+qDXteDlC7fQ"]]],[9,["_materials","0"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],1994],[22,["_skinningRoot"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],-1038],[9,["_materials","0"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],1995],[22,["_skinningRoot"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],-1039],[5,3,["_clips","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[9,["_clips","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1996],[9,["_defaultClip"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],1997],[5,true,["playOnLoad"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[5,1,["_sockets","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[49,["_sockets","0"],-1041,[51,"mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4",-1040]],[23,["_clips","1"],-1042,1998],[11,true,["_useBakedAnimation"],-1043],[23,["_clips","2"],-1044,1999]]],1988]],[12,0,null,10,[13,"e0nMCJH5ZXuYVTIzCModjd",-1056,[94,"20SEV6jFJP6qPLdWNCmE9u",null,[[5,"character_rig_5",["_name"],[4,["e0nMCJH5ZXuYVTIzCModjd"]]],[10,["_lpos"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,16.498,-0.014,-16.244]],[10,["_lrot"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[3,0,0.3476803429719111,0,-0.9376131287001768]],[10,["_euler"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,0,319.309,0]],[10,["_lscale"],[4,["e0nMCJH5ZXuYVTIzCModjd"]],[1,12,12,12]],[5,false,["_active"],[4,["71m/zGKxpdLoFtYooFDQoH"]]],[5,false,["_active"],[4,["4eACVGz4BeaYuWvkgI8Oe2"]]],[5,false,["_active"],[4,["74adu5Ls5a7Iw+cXzuyUZr"]]],[5,false,["_active"],[4,["90qGGkPilaJZaLEwN/7ZgA"]]],[5,false,["_active"],[4,["d4OKkTVkVdM6965B5Nuj7x"]]],[5,false,["_active"],[4,["7b+NTo3kBZA6pwP+GZT4HN"]]],[5,false,["_active"],[4,["c6IbTkD+9cMbCWiPW/ifr3"]]],[5,false,["_active"],[4,["5f+j76VSZcxLaT/7p3jwid"]]],[5,false,["_active"],[4,["43qc9GcwNSUZFC/g7BcjGf"]]],[5,false,["_active"],[4,["3d8ZOThEpUoa7/mR2lnz/N"]]],[5,false,["_active"],[4,["7bIWqOCcFbn6BVoq8SrRBn"]]],[5,false,["_active"],[4,["23z+myjE9WALtn2eT8ktUB"]]],[5,false,["_active"],[4,["72Wb6tiU5fB7hjaivEUXuR"]]],[5,false,["_active"],[4,["ebOtOSnq9cw577jdetZ7AD"]]],[5,false,["_active"],[4,["280TDHpuBZQK143r7FegMn"]]],[5,true,["_active"],[4,["f0Q4IWBclY96bDNvCxoYpc"]]],[5,false,["_active"],[4,["faS5YGfctYCI+xbMjH58zk"]]],[5,true,["_active"],[4,["3bTJVENidZ+qDXteDlC7fQ"]]],[9,["_materials","0"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],2001],[22,["_skinningRoot"],[4,["b5u2kRCoVSMYBS9zOHPkXV"]],-1048],[9,["_materials","0"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],2002],[22,["_skinningRoot"],[4,["a5ZG/O7s9d4LAhfAeBQm3O"]],-1049],[5,4,["_clips","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[9,["_clips","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],2003],[9,["_defaultClip"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],2004],[5,true,["playOnLoad"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[5,0,["_sockets","length"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[97,["_sockets","0"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[101,"mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4"]],[9,["_clips","1"],[4,["d8QrElb5FeK4VmrCbhjIcg"]],2005],[5,true,["_useBakedAnimation"],[4,["d8QrElb5FeK4VmrCbhjIcg"]]],[23,["_clips","2"],-1050,2006],[9,["_materials","0"],[4,["aah1pVbO5Ur4XZmw3uTa47"]],2007],[22,["_skinningRoot"],[4,["aah1pVbO5Ur4XZmw3uTa47"]],-1051],[23,["_clips","3"],-1052,2008],[23,["_materials","0"],-1053,2009],[98,["_skinningRoot"],-1055,-1054]]],2000]],[29,"BanhSao",18,[-1057,-1058,-1059,-1060,-1061],[1,0,-0.0011543512810021639,-3.814697180359872e-8],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[29,"BanhSao",19,[-1062,-1063,-1064,-1065,-1066],[1,0,-0.0011543512810021639,-3.814697180359872e-8],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[29,"BanhSao",20,[-1067,-1068,-1069,-1070,-1071],[1,0,-0.0011543512810021639,-3.814697180359872e-8],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[29,"BanhSao",21,[-1072,-1073,-1074,-1075,-1076],[1,0,-0.0011543512810021639,-3.814697180359872e-8],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[26,"Box_1",[-1085],[[43,-1077,[1,0.8,0.8,0.8]],[44,-1083,18,-1082,1,-1081,-1080,-1079,-1078,476],[27,-1084,[477],478]],[1,-0.39,1.15,0.35],[1,0.8,0.8,0.8]],[26,"Box_2",[-1094],[[43,-1086,[1,0.8,0.8,0.8]],[44,-1092,19,-1091,2,-1090,-1089,-1088,-1087,954],[27,-1093,[955],956]],[1,-0.39,1.15,-0.39],[1,0.8,0.8,0.8]],[26,"Box_3",[-1103],[[43,-1095,[1,0.8,0.8,0.8]],[44,-1101,20,-1100,3,-1099,-1098,-1097,-1096,1432],[27,-1102,[1433],1434]],[1,0.35,1.15,0.35],[1,0.8,0.8,0.8]],[26,"Box_4",[-1112],[[43,-1104,[1,0.8,0.8,0.8]],[44,-1110,21,-1109,4,-1108,-1107,-1106,-1105,1910],[27,-1111,[1911],1912]],[1,0.35,1.15,-0.39],[1,0.8,0.8,0.8]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["30rwBIMRVbgYZoezA+9+qL"]],[4,["30rwBIMRVbgYZoezA+9+qL"]],[84,"DetachCandy",false,33554432,16,[13],[[[31,-1113],-1114],4,1]],[75,"Tutorial",33554432,16,[-1116,-1117],[[31,-1115]]],[52,"UI_Loading",33554432,[-1120,-1121],[[21,-1118,[5,700,60]],[28,-1119,2026]],[1,15,142.9,0],[1,0.38,0.38,1]],[85,"TimeCount",false,33554432,16,[47],[[[31,-1122],-1123],4,1],[1,0,50.00000000000003,0]],[38,"HideMask",33554432,17,[[21,-1124,[5,5000,5000]],[115,-1125,[4,16777215]],[117,-1129,-1128,-1127,-1126]]],[76,"Kim",[[1,-1130,[163,164],[0],165],[114,false,-1131,[1,0.03,1.1182583570480347,0.03]],[118,false,-1132]],[1,0,0.5571581125259399,-1.3016038913349348e-8]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["e6oh++FwNX1LmrmcTYQ8vN"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["13c/MViQJc0rSuPiu8Zmie"]],[4,["e6oh++FwNX1LmrmcTYQ8vN"]],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[53,"btn",33554432,46,[-1135],[[21,-1133,[5,512,171]],[28,-1134,2017]],[1,0,-185.878,0],[1,0.3,0.3,1]],[53,"btn",33554432,14,[-1138],[[21,-1136,[5,512,171]],[62,-1137,[4,16777215],2021]],[1,0,-120,0],[1,0.3,0.3,1]],[54,"UI_time",33554432,47,[[61,-1139,[5,648,63],[0,0,0.5]],[116,0,-1140,2024]],[1,-297,5.521,0]],[81,"Main Camera","c9DMICJLFO5IeO07EPon7U",15,[-1141,-1142],[1,-11.4,8.972,11.4],[3,-0.1205904774487396,-0.37940952255126037,-0.049950211252314816,0.9159756150367534],[1,-15,-45,0]],[119],[86,"GameController","1fJp3dshRCUL88rDUeT/4G",15,[10],[63]],[12,0,null,10,[13,"dbFUU/Ef1UjLacpUwnv5nV",-1145,[95,"2bT6/TcAhJm6iCh2Du0m9A",null,[[99,[4,["d65/Qc3ExSGY6OmqC7rJCF"]],[29,30,31,32]]],[[5,"ban1",["_name"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]]],[10,["_lpos"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]],[1,0.392,0.006,-0.31]],[10,["_lrot"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]],[3,0,-0.043619387365336,0,0.9990482215818578]],[10,["_euler"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]],[1,0,-5,0]],[5,true,["_active"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]]],[10,["_lscale"],[4,["dbFUU/Ef1UjLacpUwnv5nV"]],[1,2.5,1.25,2.5]],[23,["_materials","0"],-1143,1913],[11,1,["_shadowCastingMode"],-1144]]],0]],[39,"qua",29,[-1146,-1147]],[40,"polySurface319",66,[18],[[24,1,-1148,[472],[0],473]]],[3,"Object054",25,[[1,-1149,[3],[0],4]],[1,0.35029885172843933,-0.3507543206214905,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Banh_Sao001",25,[[1,-1150,[5],[0],6]],[1,-0.3507542312145233,-0.270404189825058,-1.1920929132713809e-8],[1,1,1,0.7049000263214111]],[3,"Object056",25,[[1,-1151,[7],[0],8]],[1,-0.3414842188358307,0.4274531304836273,2.1457672971791908e-8],[1,1,1,0.7049000263214111]],[3,"Object055",25,[[1,-1152,[9],[0],10]],[1,0.35029885172843933,0.3498245179653168,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[41,"Kim",18,[50],[1,0,-0.001,-0.495],[1,0.6,0.6,0.6]],[39,"qua",30,[-1153,-1154]],[40,"polySurface319",73,[19],[[24,1,-1155,[950],[0],951]]],[3,"Object054",26,[[1,-1156,[481],[0],482]],[1,0.35029885172843933,-0.3507543206214905,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Banh_Sao001",26,[[1,-1157,[483],[0],484]],[1,-0.3507542312145233,-0.270404189825058,-1.1920929132713809e-8],[1,1,1,0.7049000263214111]],[3,"Object056",26,[[1,-1158,[485],[0],486]],[1,-0.3414842188358307,0.4274531304836273,2.1457672971791908e-8],[1,1,1,0.7049000263214111]],[3,"Object055",26,[[1,-1159,[487],[0],488]],[1,0.35029885172843933,0.3498245179653168,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[41,"Kim",19,[-1160],[1,0,-0.001,-0.495],[1,0.6,0.6,0.6]],[39,"qua",31,[-1161,-1162]],[40,"polySurface319",80,[20],[[24,1,-1163,[1428],[0],1429]]],[3,"Object054",27,[[1,-1164,[959],[0],960]],[1,0.35029885172843933,-0.3507543206214905,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Banh_Sao001",27,[[1,-1165,[961],[0],962]],[1,-0.3507542312145233,-0.270404189825058,-1.1920929132713809e-8],[1,1,1,0.7049000263214111]],[3,"Object056",27,[[1,-1166,[963],[0],964]],[1,-0.3414842188358307,0.4274531304836273,2.1457672971791908e-8],[1,1,1,0.7049000263214111]],[3,"Object055",27,[[1,-1167,[965],[0],966]],[1,0.35029885172843933,0.3498245179653168,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[41,"Kim",20,[-1168],[1,0,-0.001,-0.495],[1,0.6,0.6,0.6]],[39,"qua",32,[-1169,-1170]],[40,"polySurface319",87,[21],[[24,1,-1171,[1906],[0],1907]]],[3,"Object054",28,[[1,-1172,[1437],[0],1438]],[1,0.35029885172843933,-0.3507543206214905,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Banh_Sao001",28,[[1,-1173,[1439],[0],1440]],[1,-0.3507542312145233,-0.270404189825058,-1.1920929132713809e-8],[1,1,1,0.7049000263214111]],[3,"Object056",28,[[1,-1174,[1441],[0],1442]],[1,-0.3414842188358307,0.4274531304836273,2.1457672971791908e-8],[1,1,1,0.7049000263214111]],[3,"Object055",28,[[1,-1175,[1443],[0],1444]],[1,0.35029885172843933,0.3498245179653168,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[41,"Kim",21,[-1176],[1,0,-0.001,-0.495],[1,0.6,0.6,0.6]],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1177,[20,"a0kU37211FAKDiqrK05Imo",[[11,"gach1",["_name"],51],[7,["_lpos"],51,[1,-2.697,-0.052,0]],[7,["_lrot"],51,[3,0,0.38304620949248513,0,0.9237291818457611]],[7,["_euler"],51,[1,0,45.045,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1931]]],1930]],[12,0,null,9,[13,"e6oh++FwNX1LmrmcTYQ8vN",-1178,[20,"58XjA0w3dEWbElDMfNPTUF",[[11,"goccay",["_name"],52],[7,["_lpos"],52,[1,-3.3,0,-6.499]],[7,["_lrot"],52,[3,0,0,0,1]],[7,["_euler"],52,[1,0,0,0]],[9,["_materials","0"],[4,["69H9WuD41btJTEJxsicKOz"]],1933]]],1932]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1179,[20,"03XtCgZvxARoTVuBoutsnM",[[11,"gach2",["_name"],33],[7,["_lpos"],33,[1,-1.995,-0.052,0.701]],[7,["_lrot"],33,[3,0,0.38304620949248513,0,0.9237291818457611]],[7,["_euler"],33,[1,0,45.045,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1935],[7,["_lscale"],33,[1,0.5,0.5,0.5]]]],1934]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1180,[20,"7bxEtvJgtKV6haOxpOFtkq",[[11,"gach3",["_name"],34],[7,["_lpos"],34,[1,-1.508,-0.052,0.214]],[7,["_lrot"],34,[3,0,0.38304620949248513,0,0.9237291818457611]],[7,["_euler"],34,[1,0,45.045,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1937],[7,["_lscale"],34,[1,0.5,0.5,0.5]]]],1936]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1181,[20,"70pUpm6NtOfqOA5otkbjzn",[[11,"gach4",["_name"],35],[7,["_lpos"],35,[1,-2.245,-0.052,-0.872]],[7,["_lrot"],35,[3,0,0.38304620949248513,0,0.9237291818457611]],[7,["_euler"],35,[1,0,45.045,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1939],[7,["_lscale"],35,[1,0.5,0.5,0.5]]]],1938]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1182,[20,"917sTYRRlNubYcSPOUOi5r",[[11,"gach5",["_name"],36],[7,["_lpos"],36,[1,-1.784,-0.052,-0.412]],[7,["_lrot"],36,[3,0,0.38304620949248513,0,0.9237291818457611]],[7,["_euler"],36,[1,0,45.045,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1941],[7,["_lscale"],36,[1,0.5,0.5,0.5]]]],1940]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1183,[20,"c4o5bwE0dJJJZ1PW5pTJq2",[[11,"gach6",["_name"],53],[7,["_lpos"],53,[1,1.845,-0.052,0.629]],[7,["_lrot"],53,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],53,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1943]]],1942]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1184,[20,"1dL2dU5thHZJ2Ol/u1gU8j",[[11,"gach7",["_name"],37],[7,["_lpos"],37,[1,2.545,-0.052,1.33]],[7,["_lrot"],37,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],37,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1945],[7,["_lscale"],37,[1,0.5,0.5,0.5]]]],1944]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1185,[20,"d7V55oRQdKDYCdKwsv72P4",[[11,"gach8",["_name"],38],[7,["_lpos"],38,[1,3.034,-0.052,0.843]],[7,["_lrot"],38,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],38,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1947],[7,["_lscale"],38,[1,0.5,0.5,0.5]]]],1946]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1186,[20,"8eskPDvr1KqqAj3r3nk4Xo",[[11,"gach9",["_name"],39],[7,["_lpos"],39,[1,2.297,-0.052,-0.243]],[7,["_lrot"],39,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],39,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1949],[7,["_lscale"],39,[1,0.5,0.5,0.5]]]],1948]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1187,[20,"94EJamKkZAeJUuKHCLpvTf",[[11,"gach10",["_name"],40],[7,["_lpos"],40,[1,2.758,-0.052,0.217]],[7,["_lrot"],40,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],40,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1951],[7,["_lscale"],40,[1,0.5,0.5,0.5]]]],1950]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1188,[20,"23LEZaf/dItJ0X/xw5x4Iy",[[11,"gach11",["_name"],54],[7,["_lpos"],54,[1,0.05,-0.052,-1.583]],[7,["_lrot"],54,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],54,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1953]]],1952]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1189,[20,"98XFYzIsVNl5oII4aLyt20",[[11,"gach12",["_name"],41],[7,["_lpos"],41,[1,1.018,-0.052,-1.928]],[7,["_lrot"],41,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],41,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1955],[7,["_lscale"],41,[1,0.5,0.5,0.5]]]],1954]],[12,0,null,9,[13,"13c/MViQJc0rSuPiu8Zmie",-1190,[20,"ebkgE3V2NBpLghruTr7xOc",[[11,"gach13",["_name"],42],[7,["_lpos"],42,[1,0.557,-0.052,-2.388]],[7,["_lrot"],42,[3,0,0.3342839301884159,0,0.9424724155208928]],[7,["_euler"],42,[1,0,39.058,0]],[9,["_materials","0"],[4,["41atdXeSpcSrbKgSZQgKUQ"]],1957],[7,["_lscale"],42,[1,0.5,0.5,0.5]]]],1956]],[12,0,null,9,[13,"e6oh++FwNX1LmrmcTYQ8vN",-1191,[20,"89pFD0FPFE3a4KPm0SI02Z",[[11,"goccay-001",["_name"],55],[7,["_lpos"],55,[1,2.795,-0.29,-6.641]],[7,["_lrot"],55,[3,-0.27059805007309845,-0.27059805007309845,-0.6532814824381882,0.6532814824381883]],[7,["_euler"],55,[1,-90,-90,-45]],[9,["_materials","0"],[4,["69H9WuD41btJTEJxsicKOz"]],1959]]],1958]],[12,0,null,10,[13,"30rwBIMRVbgYZoezA+9+qL",-1194,[20,"aaFDnD61ZDgrOLJBQ4N1h3",[[11,"tree_1",["_name"],43],[7,["_lpos"],43,[1,14.161,0,-24.676]],[7,["_lrot"],43,[3,0,0.9543368348311069,0,0.2987326659147685]],[7,["_euler"],43,[1,0,145.237,0]],[7,["_lscale"],43,[1,2,2,2]],[23,["_materials","0"],-1192,1961],[11,1,["_shadowCastingMode"],-1193]]],1960]],[12,0,null,10,[13,"30rwBIMRVbgYZoezA+9+qL",-1197,[20,"d9eNezdThEzb8Ng9O6t+rM",[[11,"tree_2",["_name"],44],[7,["_lpos"],44,[1,25.658,0,-15.594]],[7,["_lrot"],44,[3,0,0.774110976221565,0,0.6330499162730342]],[7,["_euler"],44,[1,0,101.449,0]],[7,["_lscale"],44,[1,1.5,1.5,1.5]],[23,["_materials","0"],-1195,1963],[11,1,["_shadowCastingMode"],-1196]]],1962]],[29,"mixamorig:RightHandIndex4 Socket",12,[-1198],[1,-0.4972147757738295,0.6780274614828056,0.057026529092000594],[3,0.527996275475263,-0.45035811112223034,0.4812554726744773,0.535528407137784],[1,91.19128402929549,-82.45840724979294,2.2853979566912503]],[2,"Sniper_01_Cube",112,[[1,-1199,[1965,1966,1967,1968],[0],1969]],[1,0.065,-0.075,-0.077],[3,-0.21058286174121366,-0.1173155096186363,-0.687580059730461,0.6849274348460981],[1,20,20,20],[1,-94.351,-86.576,-63.186]],[29,"mixamorig:RightHandIndex4 Socket",22,[-1200],[1,-0.4972147757738295,0.6780274614828056,0.057026529092000594],[3,0.527996275475263,-0.45035811112223034,0.4812554726744773,0.535528407137784],[1,91.19128402929549,-82.45840724979294,2.2853979566912503]],[29,"mixamorig:RightHandIndex4 Socket",23,[-1201],[1,-0.4972147757738295,0.6780274614828056,0.057026529092000594],[3,0.527996275475263,-0.45035811112223034,0.4812554726744773,0.535528407137784],[1,91.19128402929549,-82.45840724979294,2.2853979566912503]],[38,"meter1",33554432,13,[[21,-1202,[5,798,398]],[28,-1203,2010]]],[46,"meter2",false,33554432,13,[[21,-1204,[5,798,398]],[28,-1205,2011]]],[46,"meter3",false,33554432,13,[[21,-1206,[5,796,398]],[28,-1207,2012]]],[46,"meter4",false,33554432,13,[[21,-1208,[5,798,398]],[28,-1209,2013]]],[77,"icon2",33554432,13,[[61,-1210,[5,160,300],[0,0.5,0]],[28,-1211,2014]],[1,2.2737367544323206e-13,-203.63199999999915,0],[3,0,0,0.6427876096865391,0.7660444431189782],[1,0,0,79.99999999999999]],[38,"Overlay",33554432,46,[[21,-1212,[5,5000,5000]],[63,0,-1213,[4,1006632960],2015]]],[55,"TapToStart",33554432,59,[[21,-1214,[5,282.89,50.4]],[64,"TAP TO START",40,false,-1215,2016]],[1,1.6,1.6,1]],[38,"Overlay",33554432,14,[[21,-1216,[5,5000,5000]],[63,0,-1217,[4,0],2018]]],[78,"icon]",33554432,14,[[21,-1218,[5,500,500]],[62,-1219,[4,16777215],2019]],[1,0,80,0],[1,0.38,0.38,1]],[55,"TapToStart",33554432,60,[[21,-1220,[5,216.95,50.4]],[64,"TRY AGAIN",40,false,-1221,2020]],[1,1.6,1.6,1]],[54,"clock",33554432,47,[[21,-1222,[5,160,160]],[28,-1223,2025]],[1,-368.182,0,0]],[79,"AudioManager","a9Twfk00dJ/anZh4Musnre",15,[-1224,-1225]],[80,"Main Light","c0y6F5f+pAvI805TdmxIjx",15,[[120,8000,1.6927083333333335,-1226,[4,4293651455],[121]]],[3,-0.3978010436749243,-0.38637858763109134,-0.15656851799121047,0.8172834366640376],[1,-50.556,-49.212,2.951]],[122,14,1822425087,62],[124,62],[125,48,61],[82,"Camera",17,[-1227],[1,0,0,1000]],[123,0,1,240,2000,6,33554432,132,[4,4278190080]],[3,"Object053",25,[[1,-1228,[1],[0],2]],[1,-0.0012973976554349065,0.046117644757032394,0],[1,1,1,0.7049000263214111]],[3,"Shape001",5,[[1,-1229,[11],[0],12]],[1,-0.011976251378655434,0.43752601742744446,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object057",5,[[1,-1230,[13],[0],14]],[1,0.01312518585473299,0.43831852078437805,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object058",5,[[1,-1231,[15],[0],16]],[1,0.03181959688663483,0.3993992209434509,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object059",5,[[1,-1232,[17],[0],18]],[1,0.04949626326560974,0.363006591796875,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object060",5,[[1,-1233,[19],[0],20]],[1,0.06897416710853577,0.3228136897087097,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object061",5,[[1,-1234,[21],[0],22]],[1,0.08904626220464706,0.28134241700172424,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object062",5,[[1,-1235,[23],[0],24]],[1,0.10832377523183823,0.24099856615066528,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object063",5,[[1,-1236,[25],[0],26]],[1,0.1269415318965912,0.20187249779701233,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object064",5,[[1,-1237,[27],[0],28]],[1,0.1431671380996704,0.16904796659946442,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object065",5,[[1,-1238,[29],[0],30]],[1,0.1622641235589981,0.15714582800865173,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object066",5,[[1,-1239,[31],[0],32]],[1,0.20358389616012573,0.15169481933116913,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object067",5,[[1,-1240,[33],[0],34]],[1,0.25198376178741455,0.14530141651630402,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object068",5,[[1,-1241,[35],[0],36]],[1,0.30038368701934814,0.13890805840492249,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object069",5,[[1,-1242,[37],[0],38]],[1,0.3488888442516327,0.13248682022094727,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object070",5,[[1,-1243,[39],[0],40]],[1,0.397499680519104,0.12606558203697205,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object071",5,[[1,-1244,[41],[0],42]],[1,0.45196807384490967,0.11889509111642838,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object072",5,[[1,-1245,[43],[0],44]],[1,0.4652676284313202,0.09908603876829147,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object073",5,[[1,-1246,[45],[0],46]],[1,0.4346861243247986,0.06960718333721161,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object074",5,[[1,-1247,[47],[0],48]],[1,0.40399566292762756,0.040091972798109055,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object075",5,[[1,-1248,[49],[0],50]],[1,0.370542973279953,0.00815456360578537,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object076",5,[[1,-1249,[51],[0],52]],[1,0.3363422453403473,-0.02475663274526596,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object077",5,[[1,-1250,[53],[0],54]],[1,0.30375948548316956,-0.05641547217965126,0],[1,1,1,0.7049000263214111]],[3,"Object078",5,[[1,-1251,[55],[0],56]],[1,0.27192193269729614,-0.08681831508874893,4.440891999238953e-18],[1,1,1,0.7049000263214111]],[3,"Object079",5,[[1,-1252,[57],[0],58]],[1,0.24510806798934937,-0.11280042678117752,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object080",5,[[1,-1253,[59],[0],60]],[1,0.2435573786497116,-0.14687778055667877,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object081",5,[[1,-1254,[61],[0],62]],[1,0.2490813434123993,-0.17727982997894287,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object082",5,[[1,-1255,[63],[0],64]],[1,0.2568378746509552,-0.21966493129730225,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object083",5,[[1,-1256,[65],[0],66]],[1,0.2651858627796173,-0.2655538320541382,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object084",5,[[1,-1257,[67],[0],68]],[1,0.27337560057640076,-0.3104284107685089,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object085",5,[[1,-1258,[69],[0],70]],[1,0.28222325444221497,-0.35871100425720215,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object086",5,[[1,-1259,[71],[0],72]],[1,0.29148560762405396,-0.40921542048454285,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object087",5,[[1,-1260,[73],[0],74]],[1,0.2773219645023346,-0.43983203172683716,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object088",5,[[1,-1261,[75],[0],76]],[1,0.2348823994398117,-0.4175044894218445,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object089",5,[[1,-1262,[77],[0],78]],[1,0.19366829097270966,-0.39573147892951965,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object090",5,[[1,-1263,[79],[0],80]],[1,0.1495210826396942,-0.37235796451568604,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object091",5,[[1,-1264,[81],[0],82]],[1,0.10439880192279816,-0.3484503924846649,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object092",5,[[1,-1265,[83],[0],84]],[1,0.0664183646440506,-0.32818803191185,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object093",5,[[1,-1266,[85],[0],86]],[1,0.021953992545604706,-0.3044050931930542,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object094",5,[[1,-1267,[87],[0],88]],[1,-0.05073053389787674,-0.3205631375312805,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object095",5,[[1,-1268,[89],[0],90]],[1,-0.1025167927145958,-0.34861716628074646,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object096",5,[[1,-1269,[91],[0],92]],[1,-0.14709314703941345,-0.3726955056190491,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object097",5,[[1,-1270,[93],[0],94]],[1,-0.19068436324596405,-0.3962600827217102,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object098",5,[[1,-1271,[95],[0],96]],[1,-0.23140615224838257,-0.4182368814945221,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object099",5,[[1,-1272,[97],[0],98]],[1,-0.2736360430717468,-0.44090884923934937,-1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object100",5,[[1,-1273,[99],[0],100]],[1,-0.2879696786403656,-0.40794456005096436,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object101",5,[[1,-1274,[101],[0],102]],[1,-0.2790612280368805,-0.35723212361335754,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object102",5,[[1,-1275,[103],[0],104]],[1,-0.27089715003967285,-0.3108690679073334,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object103",5,[[1,-1276,[105],[0],106]],[1,-0.26297470927238464,-0.2659950852394104,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object104",5,[[1,-1277,[107],[0],108]],[1,-0.2563396692276001,-0.22884123027324677,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object105",5,[[1,-1278,[109],[0],110]],[1,-0.2501392662525177,-0.1942315548658371,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object106",5,[[1,-1279,[111],[0],112]],[1,-0.24449574947357178,-0.16320142149925232,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object107",5,[[1,-1280,[113],[0],114]],[1,-0.2391621172428131,-0.1328268200159073,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object108",5,[[1,-1281,[115],[0],116]],[1,-0.24507291615009308,-0.11283881962299347,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object109",5,[[1,-1282,[117],[0],118]],[1,-0.27312207221984863,-0.08741658926010132,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object110",5,[[1,-1283,[119],[0],120]],[1,-0.3046286702156067,-0.058095645159482956,0],[1,1,1,0.7049000263214111]],[3,"Object111",5,[[1,-1284,[121],[0],122]],[1,-0.3393319845199585,-0.02529912441968918,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object112",5,[[1,-1285,[123],[0],124]],[1,-0.37297767400741577,0.00721226679161191,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object113",5,[[1,-1286,[125],[0],126]],[1,-0.40546882152557373,0.03865279257297516,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object114",5,[[1,-1287,[127],[0],128]],[1,-0.43444350361824036,0.06692472100257874,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object115",5,[[1,-1288,[129],[0],130]],[1,-0.4645434617996216,0.09608247876167297,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object116",5,[[1,-1289,[131],[0],132]],[1,-0.4424054026603699,0.11795606464147568,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object117",5,[[1,-1290,[133],[0],134]],[1,-0.4034482538700104,0.12335558235645294,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object118",5,[[1,-1291,[135],[0],136]],[1,-0.3629837930202484,0.12897561490535736,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object119",5,[[1,-1292,[137],[0],138]],[1,-0.32251930236816406,0.13459569215774536,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object120",5,[[1,-1293,[139],[0],140]],[1,-0.28215283155441284,0.14020876586437225,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object121",5,[[1,-1294,[141],[0],142]],[1,-0.24178721010684967,0.14581510424613953,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object122",5,[[1,-1295,[143],[0],144]],[1,-0.20142154395580292,0.1514214277267456,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object123",5,[[1,-1296,[145],[0],146]],[1,-0.16192199289798737,0.15690886974334717,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object124",5,[[1,-1297,[147],[0],148]],[1,-0.13502570986747742,0.1822555661201477,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object125",5,[[1,-1298,[149],[0],150]],[1,-0.12360477447509766,0.20637071132659912,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object126",5,[[1,-1299,[151],[0],152]],[1,-0.1103503629565239,0.23422488570213318,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object127",5,[[1,-1300,[153],[0],154]],[1,-0.09622859954833984,0.2637403607368469,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object128",5,[[1,-1301,[155],[0],156]],[1,-0.08071792870759964,0.2957955598831177,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object129",5,[[1,-1302,[157],[0],158]],[1,-0.06476869434118271,0.32874733209609985,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object130",5,[[1,-1303,[159],[0],160]],[1,-0.048407964408397675,0.36254313588142395,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object131",5,[[1,-1304,[161],[0],162]],[1,-0.030788440257310867,0.39881792664527893,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[2,"Shape001",1,[[1,-1305,[166],[0],167]],[1,-0.013561696745455265,0.03110026799142096,-0.4783639907836914],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object132",1,[[1,-1306,[168],[0],169]],[1,-0.022,0.032,-0.461],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape002",1,[[1,-1307,[170],[0],171]],[1,-0.029,0.032,-0.446],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape003",1,[[1,-1308,[172],[0],173]],[1,-0.039,0.032,-0.425],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object133",1,[[1,-1309,[174],[0],175]],[1,-0.047,0.032,-0.408],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape004",1,[[1,-1310,[176],[0],177]],[1,-0.054,0.032,-0.393],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape005",1,[[1,-1311,[178],[0],179]],[1,-0.064,0.032,-0.373],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object134",1,[[1,-1312,[180],[0],181]],[1,-0.071,0.032,-0.359],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape006",1,[[1,-1313,[182],[0],183]],[1,-0.08,0.032,-0.341],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape007",1,[[1,-1314,[184],[0],185]],[1,-0.09,0.032,-0.321],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object135",1,[[1,-1315,[186],[0],187]],[1,-0.098,0.032,-0.303],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape008",1,[[1,-1316,[188],[0],189]],[1,-0.107,0.032,-0.285],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape009",1,[[1,-1317,[190],[0],191]],[1,-0.116,0.032,-0.266],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape010",1,[[1,-1318,[192],[0],193]],[1,-0.125,0.032,-0.247],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object136",1,[[1,-1319,[194],[0],195]],[1,-0.134,0.032,-0.229],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape011",1,[[1,-1320,[196],[0],197]],[1,-0.142,0.032,-0.213],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape012",1,[[1,-1321,[198],[0],199]],[1,-0.157,0.032,-0.2],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape013",1,[[1,-1322,[200],[0],201]],[1,-0.181,0.032,-0.197],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape014",1,[[1,-1323,[202],[0],203]],[1,-0.204,0.032,-0.194],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape015",1,[[1,-1324,[204],[0],205]],[1,-0.227,0.032,-0.192],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape016",1,[[1,-1325,[206],[0],207]],[1,-0.25,0.032,-0.189],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape017",1,[[1,-1326,[208],[0],209]],[1,-0.269,0.032,-0.187],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape018",1,[[1,-1327,[210],[0],211]],[1,-0.294,0.032,-0.185],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape019",1,[[1,-1328,[212],[0],213]],[1,-0.316,0.032,-0.182],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape020",1,[[1,-1329,[214],[0],215]],[1,-0.48,0.037,-0.154],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape021",1,[[1,-1330,[216],[0],217]],[1,-0.476,0.032,-0.162],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape022",1,[[1,-1331,[218],[0],219]],[1,-0.452,0.032,-0.165],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape023",1,[[1,-1332,[220],[0],221]],[1,-0.43,0.032,-0.168],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape024",1,[[1,-1333,[222],[0],223]],[1,-0.411,0.032,-0.17],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape025",1,[[1,-1334,[224],[0],225]],[1,-0.387,0.032,-0.173],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape026",1,[[1,-1335,[226],[0],227]],[1,-0.364,0.032,-0.176],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape027",1,[[1,-1336,[228],[0],229]],[1,-0.341,0.032,-0.179],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape028",1,[[1,-1337,[230],[0],231]],[1,-0.464,0.037,-0.138],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape029",1,[[1,-1338,[232],[0],233]],[1,-0.447,0.037,-0.121],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape030",1,[[1,-1339,[234],[0],235]],[1,-0.429,0.037,-0.103],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape031",1,[[1,-1340,[236],[0],237]],[1,-0.412,0.037,-0.087],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape032",1,[[1,-1341,[238],[0],239]],[1,-0.394,0.037,-0.069],[3,-0.5708220547776044,0.41732742754277924,0.4173274275427792,0.5708220547776044],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.341,0]],[2,"Shape033",1,[[1,-1342,[240],[0],241]],[1,-0.377,0.037,-0.053],[3,-0.5703518921001829,0.41796975868804354,0.4179697586880435,0.570351892100183],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.47,0]],[2,"Shape034",1,[[1,-1343,[242],[0],243]],[1,-0.359,0.037,-0.036],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape035",1,[[1,-1344,[244],[0],245]],[1,-0.343,0.037,-0.02],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape036",1,[[1,-1345,[246],[0],247]],[1,-0.328,0.037,-0.004],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape037",1,[[1,-1346,[248],[0],249]],[1,-0.311,0.037,0.012],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape038",1,[[1,-1347,[250],[0],251]],[1,-0.296,0.037,0.027],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape039",1,[[1,-1348,[252],[0],253]],[1,-0.281,0.037,0.042],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape040",1,[[1,-1349,[254],[0],255]],[1,-0.263,0.037,0.06],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape041",1,[[1,-1350,[256],[0],257]],[1,-0.249,0.037,0.075],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape042",1,[[1,-1351,[258],[0],259]],[1,-0.241,0.037,0.091],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape043",1,[[1,-1352,[260],[0],261]],[1,-0.244,0.037,0.111],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape044",1,[[1,-1353,[262],[0],263]],[1,-0.248,0.037,0.136],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape045",1,[[1,-1354,[264],[0],265]],[1,-0.253,0.037,0.161],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape046",1,[[1,-1355,[266],[0],267]],[1,-0.257,0.037,0.184],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape047",1,[[1,-1356,[268],[0],269]],[1,-0.261,0.037,0.207],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape048",1,[[1,-1357,[270],[0],271]],[1,-0.265,0.037,0.23],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape049",1,[[1,-1358,[272],[0],273]],[1,-0.27,0.037,0.255],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape050",1,[[1,-1359,[274],[0],275]],[1,-0.274,0.037,0.279],[3,-0.7009359689397046,0.09321355827645184,0.09321355827645182,0.7009359689397047],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.15,0]],[2,"Shape051",1,[[1,-1360,[276],[0],277]],[1,-0.278,0.037,0.303],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape052",1,[[1,-1361,[278],[0],279]],[1,-0.282,0.037,0.323],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape053",1,[[1,-1362,[280],[0],281]],[1,-0.286,0.037,0.345],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape054",1,[[1,-1363,[282],[0],283]],[1,-0.29,0.037,0.367],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape055",1,[[1,-1364,[284],[0],285]],[1,-0.294,0.037,0.389],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape056",1,[[1,-1365,[286],[0],287]],[1,-0.289,0.037,0.406],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape057",1,[[1,-1366,[288],[0],289]],[1,-0.297,0.037,0.402],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape058",1,[[1,-1367,[290],[0],291]],[1,-0.267,0.037,0.394],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape059",1,[[1,-1368,[292],[0],293]],[1,-0.246,0.037,0.383],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape060",1,[[1,-1369,[294],[0],295]],[1,-0.226,0.037,0.372],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape061",1,[[1,-1370,[296],[0],297]],[1,-0.206,0.037,0.361],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape062",1,[[1,-1371,[298],[0],299]],[1,-0.184,0.037,0.349],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape063",1,[[1,-1372,[300],[0],301]],[1,-0.164,0.037,0.338],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape064",1,[[1,-1373,[302],[0],303]],[1,-0.145,0.037,0.328],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape065",1,[[1,-1374,[304],[0],305]],[1,-0.123,0.037,0.316],[3,-0.21850801222441055,0.6724985119639574,0.6724985119639573,0.21850801222441057],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144,0]],[2,"Shape066",1,[[1,-1375,[306],[0],307]],[1,-0.101,0.037,0.305],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape067",1,[[1,-1376,[308],[0],309]],[1,-0.082,0.037,0.295],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape068",1,[[1,-1377,[310],[0],311]],[1,-0.061,0.037,0.284],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape069",1,[[1,-1378,[312],[0],313]],[1,-0.04,0.037,0.273],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape070",1,[[1,-1379,[314],[0],315]],[1,-0.023,0.037,0.265],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape071",1,[[1,-1380,[316],[0],317]],[1,0.012,0.037,0.259],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape072",1,[[1,-1381,[318],[0],319]],[1,-0.008,0.037,0.257],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape073",1,[[1,-1382,[320],[0],321]],[1,0.034,0.037,0.27],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape074",1,[[1,-1383,[322],[0],323]],[1,0.054,0.037,0.281],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape075",1,[[1,-1384,[324],[0],325]],[1,0.077,0.037,0.293],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape076",1,[[1,-1385,[326],[0],327]],[1,0.097,0.037,0.304],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape077",1,[[1,-1386,[328],[0],329]],[1,0.119,0.037,0.315],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape078",1,[[1,-1387,[330],[0],331]],[1,0.14,0.037,0.326],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape079",1,[[1,-1388,[332],[0],333]],[1,0.161,0.037,0.337],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape080",1,[[1,-1389,[334],[0],335]],[1,0.183,0.037,0.349],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape081",1,[[1,-1390,[336],[0],337]],[1,0.202,0.037,0.359],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape082",1,[[1,-1391,[338],[0],339]],[1,0.224,0.037,0.371],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape083",1,[[1,-1392,[340],[0],341]],[1,0.245,0.037,0.382],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape084",1,[[1,-1393,[342],[0],343]],[1,0.264,0.037,0.392],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape085",1,[[1,-1394,[344],[0],345]],[1,0.287,0.037,0.404],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape086",1,[[1,-1395,[346],[0],347]],[1,0.29,0.037,0.369],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape087",1,[[1,-1396,[348],[0],349]],[1,0.293,0.037,0.383],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape088",1,[[1,-1397,[350],[0],351]],[1,0.297,0.037,0.401],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape089",1,[[1,-1398,[352],[0],353]],[1,0.279,0.037,0.312],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape090",1,[[1,-1399,[354],[0],355]],[1,0.281,0.037,0.324],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape091",1,[[1,-1400,[356],[0],357]],[1,0.285,0.037,0.344],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape092",1,[[1,-1401,[358],[0],359]],[1,0.271,0.037,0.27],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape093",1,[[1,-1402,[360],[0],361]],[1,0.275,0.037,0.289],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape094",1,[[1,-1403,[362],[0],363]],[1,0.26,0.037,0.214],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape095",1,[[1,-1404,[364],[0],365]],[1,0.262,0.037,0.225],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape096",1,[[1,-1405,[366],[0],367]],[1,0.266,0.037,0.245],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape097",1,[[1,-1406,[368],[0],369]],[1,0.252,0.037,0.17],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape098",1,[[1,-1407,[370],[0],371]],[1,0.248,0.037,0.149],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape099",1,[[1,-1408,[372],[0],373]],[1,0.244,0.037,0.129],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape100",1,[[1,-1409,[374],[0],375]],[1,0.24,0.037,0.109],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape101",1,[[1,-1410,[376],[0],377]],[1,0.256,0.037,0.19],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape102",1,[[1,-1411,[378],[0],379]],[1,0.237,0.037,0.095],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape103",1,[[1,-1412,[380],[0],381]],[1,0.235,0.037,0.086],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape104",1,[[1,-1413,[382],[0],383]],[1,0.245,0.037,0.069],[3,-0.13295923324800552,0.6944939469096203,0.6944939469096202,0.13295923324800554],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,158.324,0]],[2,"Shape105",1,[[1,-1414,[384],[0],385]],[1,0.262,0.037,0.053],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape106",1,[[1,-1415,[386],[0],387]],[1,0.28,0.037,0.035],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape107",1,[[1,-1416,[388],[0],389]],[1,0.298,0.037,0.018],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape108",1,[[1,-1417,[390],[0],391]],[1,0.315,0.037,0.002],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape109",1,[[1,-1418,[392],[0],393]],[1,0.333,0.037,-0.015],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape110",1,[[1,-1419,[394],[0],395]],[1,0.35,0.037,-0.032],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape111",1,[[1,-1420,[396],[0],397]],[1,0.368,0.037,-0.049],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape112",1,[[1,-1421,[398],[0],399]],[1,0.386,0.037,-0.066],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape113",1,[[1,-1422,[400],[0],401]],[1,0.403,0.037,-0.083],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape114",1,[[1,-1423,[402],[0],403]],[1,0.421,0.037,-0.101],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape115",1,[[1,-1424,[404],[0],405]],[1,0.438,0.037,-0.118],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape116",1,[[1,-1425,[406],[0],407]],[1,0.453,0.037,-0.133],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape117",1,[[1,-1426,[408],[0],409]],[1,0.47,0.037,-0.149],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape118",1,[[1,-1427,[410],[0],411]],[1,0.465,0.037,-0.16],[3,0.5792279653395692,0.40557978767263875,0.4055797876726387,-0.5792279653395693],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290,0]],[2,"Shape119",1,[[1,-1428,[412],[0],413]],[1,0.442,0.037,-0.162],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape120",1,[[1,-1429,[414],[0],415]],[1,0.418,0.037,-0.165],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape121",1,[[1,-1430,[416],[0],417]],[1,0.393,0.037,-0.168],[3,0.5725253055825154,0.41498767989862945,0.41498767989862934,-0.5725253055825155],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,288.128,0]],[2,"Shape122",1,[[1,-1431,[418],[0],419]],[1,0.369,0.037,-0.172],[3,0.5624285974242904,0.4285721325510391,0.42857213255103904,-0.5624285974242905],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,285.385,0]],[2,"Shape123",1,[[1,-1432,[420],[0],421]],[1,0.345,0.037,-0.176],[3,0.5794437836929275,0.4052713924515569,0.4052713924515568,-0.5794437836929276],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.061,0]],[2,"Shape124",1,[[1,-1433,[422],[0],423]],[1,0.321,0.037,-0.178],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape125",1,[[1,-1434,[424],[0],425]],[1,0.299,0.037,-0.181],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape126",1,[[1,-1435,[426],[0],427]],[1,0.278,0.037,-0.183],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape127",1,[[1,-1436,[428],[0],429]],[1,0.256,0.037,-0.185],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape128",1,[[1,-1437,[430],[0],431]],[1,0.232,0.037,-0.188],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape129",1,[[1,-1438,[432],[0],433]],[1,0.208,0.037,-0.191],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape130",1,[[1,-1439,[434],[0],435]],[1,0.189,0.037,-0.194],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape131",1,[[1,-1440,[436],[0],437]],[1,0.166,0.037,-0.198],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape132",1,[[1,-1441,[438],[0],439]],[1,0.15,0.037,-0.208],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape133",1,[[1,-1442,[440],[0],441]],[1,0.139,0.037,-0.228],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape134",1,[[1,-1443,[442],[0],443]],[1,0.118,0.037,-0.267],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape135",1,[[1,-1444,[444],[0],445]],[1,0.129,0.037,-0.247],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape136",1,[[1,-1445,[446],[0],447]],[1,0.108,0.037,-0.285],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape137",1,[[1,-1446,[448],[0],449]],[1,0.099,0.037,-0.302],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape138",1,[[1,-1447,[450],[0],451]],[1,0.077,0.037,-0.343],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape139",1,[[1,-1448,[452],[0],453]],[1,0.088,0.037,-0.322],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Object057",1,[[1,-1449,[454],[0],455]],[1,0.011539740487933492,0.03110026799142096,-0.479156494140625],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object058",1,[[1,-1450,[456],[0],457]],[1,0.02100000000000035,0.03000000000000025,-0.46],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object059",1,[[1,-1451,[458],[0],459]],[1,0.029000000000000248,0.03200000000000003,-0.443],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object060",1,[[1,-1452,[460],[0],461]],[1,0.038000000000000256,0.03200000000000003,-0.42399999999999993],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object061",1,[[1,-1453,[462],[0],463]],[1,0.047000000000000264,0.03200000000000003,-0.405],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object062",1,[[1,-1454,[464],[0],465]],[1,0.057,0.032,-0.385],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object063",1,[[1,-1455,[466],[0],467]],[1,0.063,0.032,-0.372],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object064",1,[[1,-1456,[468],[0],469]],[1,0.07,0.032,-0.358],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[30,"Box_Top",66,[[24,1,-1457,[474],[0],475]]],[3,"Object053",26,[[1,-1458,[479],[0],480]],[1,-0.0012973976554349065,0.046117644757032394,0],[1,1,1,0.7049000263214111]],[3,"Shape001",6,[[1,-1459,[489],[0],490]],[1,-0.011976251378655434,0.43752601742744446,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object057",6,[[1,-1460,[491],[0],492]],[1,0.01312518585473299,0.43831852078437805,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object058",6,[[1,-1461,[493],[0],494]],[1,0.03181959688663483,0.3993992209434509,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object059",6,[[1,-1462,[495],[0],496]],[1,0.04949626326560974,0.363006591796875,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object060",6,[[1,-1463,[497],[0],498]],[1,0.06897416710853577,0.3228136897087097,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object061",6,[[1,-1464,[499],[0],500]],[1,0.08904626220464706,0.28134241700172424,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object062",6,[[1,-1465,[501],[0],502]],[1,0.10832377523183823,0.24099856615066528,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object063",6,[[1,-1466,[503],[0],504]],[1,0.1269415318965912,0.20187249779701233,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object064",6,[[1,-1467,[505],[0],506]],[1,0.1431671380996704,0.16904796659946442,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object065",6,[[1,-1468,[507],[0],508]],[1,0.1622641235589981,0.15714582800865173,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object066",6,[[1,-1469,[509],[0],510]],[1,0.20358389616012573,0.15169481933116913,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object067",6,[[1,-1470,[511],[0],512]],[1,0.25198376178741455,0.14530141651630402,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object068",6,[[1,-1471,[513],[0],514]],[1,0.30038368701934814,0.13890805840492249,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object069",6,[[1,-1472,[515],[0],516]],[1,0.3488888442516327,0.13248682022094727,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object070",6,[[1,-1473,[517],[0],518]],[1,0.397499680519104,0.12606558203697205,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object071",6,[[1,-1474,[519],[0],520]],[1,0.45196807384490967,0.11889509111642838,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object072",6,[[1,-1475,[521],[0],522]],[1,0.4652676284313202,0.09908603876829147,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object073",6,[[1,-1476,[523],[0],524]],[1,0.4346861243247986,0.06960718333721161,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object074",6,[[1,-1477,[525],[0],526]],[1,0.40399566292762756,0.040091972798109055,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object075",6,[[1,-1478,[527],[0],528]],[1,0.370542973279953,0.00815456360578537,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object076",6,[[1,-1479,[529],[0],530]],[1,0.3363422453403473,-0.02475663274526596,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object077",6,[[1,-1480,[531],[0],532]],[1,0.30375948548316956,-0.05641547217965126,0],[1,1,1,0.7049000263214111]],[3,"Object078",6,[[1,-1481,[533],[0],534]],[1,0.27192193269729614,-0.08681831508874893,4.440891999238953e-18],[1,1,1,0.7049000263214111]],[3,"Object079",6,[[1,-1482,[535],[0],536]],[1,0.24510806798934937,-0.11280042678117752,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object080",6,[[1,-1483,[537],[0],538]],[1,0.2435573786497116,-0.14687778055667877,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object081",6,[[1,-1484,[539],[0],540]],[1,0.2490813434123993,-0.17727982997894287,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object082",6,[[1,-1485,[541],[0],542]],[1,0.2568378746509552,-0.21966493129730225,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object083",6,[[1,-1486,[543],[0],544]],[1,0.2651858627796173,-0.2655538320541382,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object084",6,[[1,-1487,[545],[0],546]],[1,0.27337560057640076,-0.3104284107685089,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object085",6,[[1,-1488,[547],[0],548]],[1,0.28222325444221497,-0.35871100425720215,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object086",6,[[1,-1489,[549],[0],550]],[1,0.29148560762405396,-0.40921542048454285,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object087",6,[[1,-1490,[551],[0],552]],[1,0.2773219645023346,-0.43983203172683716,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object088",6,[[1,-1491,[553],[0],554]],[1,0.2348823994398117,-0.4175044894218445,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object089",6,[[1,-1492,[555],[0],556]],[1,0.19366829097270966,-0.39573147892951965,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object090",6,[[1,-1493,[557],[0],558]],[1,0.1495210826396942,-0.37235796451568604,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object091",6,[[1,-1494,[559],[0],560]],[1,0.10439880192279816,-0.3484503924846649,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object092",6,[[1,-1495,[561],[0],562]],[1,0.0664183646440506,-0.32818803191185,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object093",6,[[1,-1496,[563],[0],564]],[1,0.021953992545604706,-0.3044050931930542,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object094",6,[[1,-1497,[565],[0],566]],[1,-0.05073053389787674,-0.3205631375312805,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object095",6,[[1,-1498,[567],[0],568]],[1,-0.1025167927145958,-0.34861716628074646,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object096",6,[[1,-1499,[569],[0],570]],[1,-0.14709314703941345,-0.3726955056190491,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object097",6,[[1,-1500,[571],[0],572]],[1,-0.19068436324596405,-0.3962600827217102,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object098",6,[[1,-1501,[573],[0],574]],[1,-0.23140615224838257,-0.4182368814945221,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object099",6,[[1,-1502,[575],[0],576]],[1,-0.2736360430717468,-0.44090884923934937,-1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object100",6,[[1,-1503,[577],[0],578]],[1,-0.2879696786403656,-0.40794456005096436,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object101",6,[[1,-1504,[579],[0],580]],[1,-0.2790612280368805,-0.35723212361335754,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object102",6,[[1,-1505,[581],[0],582]],[1,-0.27089715003967285,-0.3108690679073334,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object103",6,[[1,-1506,[583],[0],584]],[1,-0.26297470927238464,-0.2659950852394104,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object104",6,[[1,-1507,[585],[0],586]],[1,-0.2563396692276001,-0.22884123027324677,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object105",6,[[1,-1508,[587],[0],588]],[1,-0.2501392662525177,-0.1942315548658371,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object106",6,[[1,-1509,[589],[0],590]],[1,-0.24449574947357178,-0.16320142149925232,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object107",6,[[1,-1510,[591],[0],592]],[1,-0.2391621172428131,-0.1328268200159073,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object108",6,[[1,-1511,[593],[0],594]],[1,-0.24507291615009308,-0.11283881962299347,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object109",6,[[1,-1512,[595],[0],596]],[1,-0.27312207221984863,-0.08741658926010132,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object110",6,[[1,-1513,[597],[0],598]],[1,-0.3046286702156067,-0.058095645159482956,0],[1,1,1,0.7049000263214111]],[3,"Object111",6,[[1,-1514,[599],[0],600]],[1,-0.3393319845199585,-0.02529912441968918,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object112",6,[[1,-1515,[601],[0],602]],[1,-0.37297767400741577,0.00721226679161191,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object113",6,[[1,-1516,[603],[0],604]],[1,-0.40546882152557373,0.03865279257297516,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object114",6,[[1,-1517,[605],[0],606]],[1,-0.43444350361824036,0.06692472100257874,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object115",6,[[1,-1518,[607],[0],608]],[1,-0.4645434617996216,0.09608247876167297,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object116",6,[[1,-1519,[609],[0],610]],[1,-0.4424054026603699,0.11795606464147568,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object117",6,[[1,-1520,[611],[0],612]],[1,-0.4034482538700104,0.12335558235645294,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object118",6,[[1,-1521,[613],[0],614]],[1,-0.3629837930202484,0.12897561490535736,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object119",6,[[1,-1522,[615],[0],616]],[1,-0.32251930236816406,0.13459569215774536,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object120",6,[[1,-1523,[617],[0],618]],[1,-0.28215283155441284,0.14020876586437225,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object121",6,[[1,-1524,[619],[0],620]],[1,-0.24178721010684967,0.14581510424613953,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object122",6,[[1,-1525,[621],[0],622]],[1,-0.20142154395580292,0.1514214277267456,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object123",6,[[1,-1526,[623],[0],624]],[1,-0.16192199289798737,0.15690886974334717,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object124",6,[[1,-1527,[625],[0],626]],[1,-0.13502570986747742,0.1822555661201477,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object125",6,[[1,-1528,[627],[0],628]],[1,-0.12360477447509766,0.20637071132659912,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object126",6,[[1,-1529,[629],[0],630]],[1,-0.1103503629565239,0.23422488570213318,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object127",6,[[1,-1530,[631],[0],632]],[1,-0.09622859954833984,0.2637403607368469,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object128",6,[[1,-1531,[633],[0],634]],[1,-0.08071792870759964,0.2957955598831177,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object129",6,[[1,-1532,[635],[0],636]],[1,-0.06476869434118271,0.32874733209609985,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object130",6,[[1,-1533,[637],[0],638]],[1,-0.048407964408397675,0.36254313588142395,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object131",6,[[1,-1534,[639],[0],640]],[1,-0.030788440257310867,0.39881792664527893,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[47,"Kim",79,[[1,-1535,[641,642],[0],643]],[1,0,0.5571581125259399,-1.3016038913349348e-8]],[2,"Shape001",2,[[1,-1536,[644],[0],645]],[1,-0.013561696745455265,0.03110026799142096,-0.4783639907836914],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object132",2,[[1,-1537,[646],[0],647]],[1,-0.022,0.032,-0.461],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape002",2,[[1,-1538,[648],[0],649]],[1,-0.029,0.032,-0.446],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape003",2,[[1,-1539,[650],[0],651]],[1,-0.039,0.032,-0.425],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object133",2,[[1,-1540,[652],[0],653]],[1,-0.047,0.032,-0.408],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape004",2,[[1,-1541,[654],[0],655]],[1,-0.054,0.032,-0.393],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape005",2,[[1,-1542,[656],[0],657]],[1,-0.064,0.032,-0.373],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object134",2,[[1,-1543,[658],[0],659]],[1,-0.071,0.032,-0.359],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape006",2,[[1,-1544,[660],[0],661]],[1,-0.08,0.032,-0.341],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape007",2,[[1,-1545,[662],[0],663]],[1,-0.09,0.032,-0.321],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object135",2,[[1,-1546,[664],[0],665]],[1,-0.098,0.032,-0.303],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape008",2,[[1,-1547,[666],[0],667]],[1,-0.107,0.032,-0.285],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape009",2,[[1,-1548,[668],[0],669]],[1,-0.116,0.032,-0.266],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape010",2,[[1,-1549,[670],[0],671]],[1,-0.125,0.032,-0.247],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object136",2,[[1,-1550,[672],[0],673]],[1,-0.134,0.032,-0.229],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape011",2,[[1,-1551,[674],[0],675]],[1,-0.142,0.032,-0.213],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape012",2,[[1,-1552,[676],[0],677]],[1,-0.157,0.032,-0.2],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape013",2,[[1,-1553,[678],[0],679]],[1,-0.181,0.032,-0.197],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape014",2,[[1,-1554,[680],[0],681]],[1,-0.204,0.032,-0.194],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape015",2,[[1,-1555,[682],[0],683]],[1,-0.227,0.032,-0.192],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape016",2,[[1,-1556,[684],[0],685]],[1,-0.25,0.032,-0.189],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape017",2,[[1,-1557,[686],[0],687]],[1,-0.269,0.032,-0.187],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape018",2,[[1,-1558,[688],[0],689]],[1,-0.294,0.032,-0.185],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape019",2,[[1,-1559,[690],[0],691]],[1,-0.316,0.032,-0.182],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape020",2,[[1,-1560,[692],[0],693]],[1,-0.48,0.037,-0.154],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape021",2,[[1,-1561,[694],[0],695]],[1,-0.476,0.032,-0.162],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape022",2,[[1,-1562,[696],[0],697]],[1,-0.452,0.032,-0.165],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape023",2,[[1,-1563,[698],[0],699]],[1,-0.43,0.032,-0.168],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape024",2,[[1,-1564,[700],[0],701]],[1,-0.411,0.032,-0.17],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape025",2,[[1,-1565,[702],[0],703]],[1,-0.387,0.032,-0.173],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape026",2,[[1,-1566,[704],[0],705]],[1,-0.364,0.032,-0.176],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape027",2,[[1,-1567,[706],[0],707]],[1,-0.341,0.032,-0.179],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape028",2,[[1,-1568,[708],[0],709]],[1,-0.464,0.037,-0.138],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape029",2,[[1,-1569,[710],[0],711]],[1,-0.447,0.037,-0.121],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape030",2,[[1,-1570,[712],[0],713]],[1,-0.429,0.037,-0.103],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape031",2,[[1,-1571,[714],[0],715]],[1,-0.412,0.037,-0.087],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape032",2,[[1,-1572,[716],[0],717]],[1,-0.394,0.037,-0.069],[3,-0.5708220547776044,0.41732742754277924,0.4173274275427792,0.5708220547776044],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.341,0]],[2,"Shape033",2,[[1,-1573,[718],[0],719]],[1,-0.377,0.037,-0.053],[3,-0.5703518921001829,0.41796975868804354,0.4179697586880435,0.570351892100183],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.47,0]],[2,"Shape034",2,[[1,-1574,[720],[0],721]],[1,-0.359,0.037,-0.036],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape035",2,[[1,-1575,[722],[0],723]],[1,-0.343,0.037,-0.02],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape036",2,[[1,-1576,[724],[0],725]],[1,-0.328,0.037,-0.004],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape037",2,[[1,-1577,[726],[0],727]],[1,-0.311,0.037,0.012],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape038",2,[[1,-1578,[728],[0],729]],[1,-0.296,0.037,0.027],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape039",2,[[1,-1579,[730],[0],731]],[1,-0.281,0.037,0.042],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape040",2,[[1,-1580,[732],[0],733]],[1,-0.263,0.037,0.06],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape041",2,[[1,-1581,[734],[0],735]],[1,-0.249,0.037,0.075],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape042",2,[[1,-1582,[736],[0],737]],[1,-0.241,0.037,0.091],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape043",2,[[1,-1583,[738],[0],739]],[1,-0.244,0.037,0.111],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape044",2,[[1,-1584,[740],[0],741]],[1,-0.248,0.037,0.136],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape045",2,[[1,-1585,[742],[0],743]],[1,-0.253,0.037,0.161],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape046",2,[[1,-1586,[744],[0],745]],[1,-0.257,0.037,0.184],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape047",2,[[1,-1587,[746],[0],747]],[1,-0.261,0.037,0.207],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape048",2,[[1,-1588,[748],[0],749]],[1,-0.265,0.037,0.23],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape049",2,[[1,-1589,[750],[0],751]],[1,-0.27,0.037,0.255],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape050",2,[[1,-1590,[752],[0],753]],[1,-0.274,0.037,0.279],[3,-0.7009359689397046,0.09321355827645184,0.09321355827645182,0.7009359689397047],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.15,0]],[2,"Shape051",2,[[1,-1591,[754],[0],755]],[1,-0.278,0.037,0.303],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape052",2,[[1,-1592,[756],[0],757]],[1,-0.282,0.037,0.323],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape053",2,[[1,-1593,[758],[0],759]],[1,-0.286,0.037,0.345],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape054",2,[[1,-1594,[760],[0],761]],[1,-0.29,0.037,0.367],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape055",2,[[1,-1595,[762],[0],763]],[1,-0.294,0.037,0.389],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape056",2,[[1,-1596,[764],[0],765]],[1,-0.289,0.037,0.406],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape057",2,[[1,-1597,[766],[0],767]],[1,-0.297,0.037,0.402],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape058",2,[[1,-1598,[768],[0],769]],[1,-0.267,0.037,0.394],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape059",2,[[1,-1599,[770],[0],771]],[1,-0.246,0.037,0.383],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape060",2,[[1,-1600,[772],[0],773]],[1,-0.226,0.037,0.372],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape061",2,[[1,-1601,[774],[0],775]],[1,-0.206,0.037,0.361],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape062",2,[[1,-1602,[776],[0],777]],[1,-0.184,0.037,0.349],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape063",2,[[1,-1603,[778],[0],779]],[1,-0.164,0.037,0.338],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape064",2,[[1,-1604,[780],[0],781]],[1,-0.145,0.037,0.328],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape065",2,[[1,-1605,[782],[0],783]],[1,-0.123,0.037,0.316],[3,-0.21850801222441055,0.6724985119639574,0.6724985119639573,0.21850801222441057],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144,0]],[2,"Shape066",2,[[1,-1606,[784],[0],785]],[1,-0.101,0.037,0.305],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape067",2,[[1,-1607,[786],[0],787]],[1,-0.082,0.037,0.295],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape068",2,[[1,-1608,[788],[0],789]],[1,-0.061,0.037,0.284],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape069",2,[[1,-1609,[790],[0],791]],[1,-0.04,0.037,0.273],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape070",2,[[1,-1610,[792],[0],793]],[1,-0.023,0.037,0.265],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape071",2,[[1,-1611,[794],[0],795]],[1,0.012,0.037,0.259],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape072",2,[[1,-1612,[796],[0],797]],[1,-0.008,0.037,0.257],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape073",2,[[1,-1613,[798],[0],799]],[1,0.034,0.037,0.27],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape074",2,[[1,-1614,[800],[0],801]],[1,0.054,0.037,0.281],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape075",2,[[1,-1615,[802],[0],803]],[1,0.077,0.037,0.293],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape076",2,[[1,-1616,[804],[0],805]],[1,0.097,0.037,0.304],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape077",2,[[1,-1617,[806],[0],807]],[1,0.119,0.037,0.315],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape078",2,[[1,-1618,[808],[0],809]],[1,0.14,0.037,0.326],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape079",2,[[1,-1619,[810],[0],811]],[1,0.161,0.037,0.337],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape080",2,[[1,-1620,[812],[0],813]],[1,0.183,0.037,0.349],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape081",2,[[1,-1621,[814],[0],815]],[1,0.202,0.037,0.359],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape082",2,[[1,-1622,[816],[0],817]],[1,0.224,0.037,0.371],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape083",2,[[1,-1623,[818],[0],819]],[1,0.245,0.037,0.382],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape084",2,[[1,-1624,[820],[0],821]],[1,0.264,0.037,0.392],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape085",2,[[1,-1625,[822],[0],823]],[1,0.287,0.037,0.404],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape086",2,[[1,-1626,[824],[0],825]],[1,0.29,0.037,0.369],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape087",2,[[1,-1627,[826],[0],827]],[1,0.293,0.037,0.383],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape088",2,[[1,-1628,[828],[0],829]],[1,0.297,0.037,0.401],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape089",2,[[1,-1629,[830],[0],831]],[1,0.279,0.037,0.312],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape090",2,[[1,-1630,[832],[0],833]],[1,0.281,0.037,0.324],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape091",2,[[1,-1631,[834],[0],835]],[1,0.285,0.037,0.344],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape092",2,[[1,-1632,[836],[0],837]],[1,0.271,0.037,0.27],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape093",2,[[1,-1633,[838],[0],839]],[1,0.275,0.037,0.289],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape094",2,[[1,-1634,[840],[0],841]],[1,0.26,0.037,0.214],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape095",2,[[1,-1635,[842],[0],843]],[1,0.262,0.037,0.225],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape096",2,[[1,-1636,[844],[0],845]],[1,0.266,0.037,0.245],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape097",2,[[1,-1637,[846],[0],847]],[1,0.252,0.037,0.17],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape098",2,[[1,-1638,[848],[0],849]],[1,0.248,0.037,0.149],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape099",2,[[1,-1639,[850],[0],851]],[1,0.244,0.037,0.129],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape100",2,[[1,-1640,[852],[0],853]],[1,0.24,0.037,0.109],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape101",2,[[1,-1641,[854],[0],855]],[1,0.256,0.037,0.19],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape102",2,[[1,-1642,[856],[0],857]],[1,0.237,0.037,0.095],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape103",2,[[1,-1643,[858],[0],859]],[1,0.235,0.037,0.086],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape104",2,[[1,-1644,[860],[0],861]],[1,0.245,0.037,0.069],[3,-0.13295923324800552,0.6944939469096203,0.6944939469096202,0.13295923324800554],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,158.324,0]],[2,"Shape105",2,[[1,-1645,[862],[0],863]],[1,0.262,0.037,0.053],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape106",2,[[1,-1646,[864],[0],865]],[1,0.28,0.037,0.035],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape107",2,[[1,-1647,[866],[0],867]],[1,0.298,0.037,0.018],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape108",2,[[1,-1648,[868],[0],869]],[1,0.315,0.037,0.002],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape109",2,[[1,-1649,[870],[0],871]],[1,0.333,0.037,-0.015],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape110",2,[[1,-1650,[872],[0],873]],[1,0.35,0.037,-0.032],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape111",2,[[1,-1651,[874],[0],875]],[1,0.368,0.037,-0.049],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape112",2,[[1,-1652,[876],[0],877]],[1,0.386,0.037,-0.066],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape113",2,[[1,-1653,[878],[0],879]],[1,0.403,0.037,-0.083],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape114",2,[[1,-1654,[880],[0],881]],[1,0.421,0.037,-0.101],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape115",2,[[1,-1655,[882],[0],883]],[1,0.438,0.037,-0.118],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape116",2,[[1,-1656,[884],[0],885]],[1,0.453,0.037,-0.133],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape117",2,[[1,-1657,[886],[0],887]],[1,0.47,0.037,-0.149],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape118",2,[[1,-1658,[888],[0],889]],[1,0.465,0.037,-0.16],[3,0.5792279653395692,0.40557978767263875,0.4055797876726387,-0.5792279653395693],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290,0]],[2,"Shape119",2,[[1,-1659,[890],[0],891]],[1,0.442,0.037,-0.162],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape120",2,[[1,-1660,[892],[0],893]],[1,0.418,0.037,-0.165],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape121",2,[[1,-1661,[894],[0],895]],[1,0.393,0.037,-0.168],[3,0.5725253055825154,0.41498767989862945,0.41498767989862934,-0.5725253055825155],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,288.128,0]],[2,"Shape122",2,[[1,-1662,[896],[0],897]],[1,0.369,0.037,-0.172],[3,0.5624285974242904,0.4285721325510391,0.42857213255103904,-0.5624285974242905],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,285.385,0]],[2,"Shape123",2,[[1,-1663,[898],[0],899]],[1,0.345,0.037,-0.176],[3,0.5794437836929275,0.4052713924515569,0.4052713924515568,-0.5794437836929276],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.061,0]],[2,"Shape124",2,[[1,-1664,[900],[0],901]],[1,0.321,0.037,-0.178],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape125",2,[[1,-1665,[902],[0],903]],[1,0.299,0.037,-0.181],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape126",2,[[1,-1666,[904],[0],905]],[1,0.278,0.037,-0.183],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape127",2,[[1,-1667,[906],[0],907]],[1,0.256,0.037,-0.185],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape128",2,[[1,-1668,[908],[0],909]],[1,0.232,0.037,-0.188],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape129",2,[[1,-1669,[910],[0],911]],[1,0.208,0.037,-0.191],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape130",2,[[1,-1670,[912],[0],913]],[1,0.189,0.037,-0.194],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape131",2,[[1,-1671,[914],[0],915]],[1,0.166,0.037,-0.198],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape132",2,[[1,-1672,[916],[0],917]],[1,0.15,0.037,-0.208],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape133",2,[[1,-1673,[918],[0],919]],[1,0.139,0.037,-0.228],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape134",2,[[1,-1674,[920],[0],921]],[1,0.118,0.037,-0.267],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape135",2,[[1,-1675,[922],[0],923]],[1,0.129,0.037,-0.247],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape136",2,[[1,-1676,[924],[0],925]],[1,0.108,0.037,-0.285],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape137",2,[[1,-1677,[926],[0],927]],[1,0.099,0.037,-0.302],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape138",2,[[1,-1678,[928],[0],929]],[1,0.077,0.037,-0.343],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape139",2,[[1,-1679,[930],[0],931]],[1,0.088,0.037,-0.322],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Object057",2,[[1,-1680,[932],[0],933]],[1,0.011539740487933492,0.03110026799142096,-0.479156494140625],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object058",2,[[1,-1681,[934],[0],935]],[1,0.02100000000000035,0.03000000000000025,-0.46],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object059",2,[[1,-1682,[936],[0],937]],[1,0.029000000000000248,0.03200000000000003,-0.443],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object060",2,[[1,-1683,[938],[0],939]],[1,0.038000000000000256,0.03200000000000003,-0.42399999999999993],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object061",2,[[1,-1684,[940],[0],941]],[1,0.047000000000000264,0.03200000000000003,-0.405],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object062",2,[[1,-1685,[942],[0],943]],[1,0.057,0.032,-0.385],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object063",2,[[1,-1686,[944],[0],945]],[1,0.063,0.032,-0.372],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object064",2,[[1,-1687,[946],[0],947]],[1,0.07,0.032,-0.358],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[30,"Box_Top",73,[[24,1,-1688,[952],[0],953]]],[3,"Object053",27,[[1,-1689,[957],[0],958]],[1,-0.0012973976554349065,0.046117644757032394,0],[1,1,1,0.7049000263214111]],[3,"Shape001",7,[[1,-1690,[967],[0],968]],[1,-0.011976251378655434,0.43752601742744446,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object057",7,[[1,-1691,[969],[0],970]],[1,0.01312518585473299,0.43831852078437805,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object058",7,[[1,-1692,[971],[0],972]],[1,0.03181959688663483,0.3993992209434509,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object059",7,[[1,-1693,[973],[0],974]],[1,0.04949626326560974,0.363006591796875,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object060",7,[[1,-1694,[975],[0],976]],[1,0.06897416710853577,0.3228136897087097,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object061",7,[[1,-1695,[977],[0],978]],[1,0.08904626220464706,0.28134241700172424,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object062",7,[[1,-1696,[979],[0],980]],[1,0.10832377523183823,0.24099856615066528,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object063",7,[[1,-1697,[981],[0],982]],[1,0.1269415318965912,0.20187249779701233,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object064",7,[[1,-1698,[983],[0],984]],[1,0.1431671380996704,0.16904796659946442,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object065",7,[[1,-1699,[985],[0],986]],[1,0.1622641235589981,0.15714582800865173,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object066",7,[[1,-1700,[987],[0],988]],[1,0.20358389616012573,0.15169481933116913,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object067",7,[[1,-1701,[989],[0],990]],[1,0.25198376178741455,0.14530141651630402,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object068",7,[[1,-1702,[991],[0],992]],[1,0.30038368701934814,0.13890805840492249,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object069",7,[[1,-1703,[993],[0],994]],[1,0.3488888442516327,0.13248682022094727,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object070",7,[[1,-1704,[995],[0],996]],[1,0.397499680519104,0.12606558203697205,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object071",7,[[1,-1705,[997],[0],998]],[1,0.45196807384490967,0.11889509111642838,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object072",7,[[1,-1706,[999],[0],1000]],[1,0.4652676284313202,0.09908603876829147,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object073",7,[[1,-1707,[1001],[0],1002]],[1,0.4346861243247986,0.06960718333721161,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object074",7,[[1,-1708,[1003],[0],1004]],[1,0.40399566292762756,0.040091972798109055,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object075",7,[[1,-1709,[1005],[0],1006]],[1,0.370542973279953,0.00815456360578537,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object076",7,[[1,-1710,[1007],[0],1008]],[1,0.3363422453403473,-0.02475663274526596,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object077",7,[[1,-1711,[1009],[0],1010]],[1,0.30375948548316956,-0.05641547217965126,0],[1,1,1,0.7049000263214111]],[3,"Object078",7,[[1,-1712,[1011],[0],1012]],[1,0.27192193269729614,-0.08681831508874893,4.440891999238953e-18],[1,1,1,0.7049000263214111]],[3,"Object079",7,[[1,-1713,[1013],[0],1014]],[1,0.24510806798934937,-0.11280042678117752,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object080",7,[[1,-1714,[1015],[0],1016]],[1,0.2435573786497116,-0.14687778055667877,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object081",7,[[1,-1715,[1017],[0],1018]],[1,0.2490813434123993,-0.17727982997894287,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object082",7,[[1,-1716,[1019],[0],1020]],[1,0.2568378746509552,-0.21966493129730225,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object083",7,[[1,-1717,[1021],[0],1022]],[1,0.2651858627796173,-0.2655538320541382,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object084",7,[[1,-1718,[1023],[0],1024]],[1,0.27337560057640076,-0.3104284107685089,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object085",7,[[1,-1719,[1025],[0],1026]],[1,0.28222325444221497,-0.35871100425720215,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object086",7,[[1,-1720,[1027],[0],1028]],[1,0.29148560762405396,-0.40921542048454285,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object087",7,[[1,-1721,[1029],[0],1030]],[1,0.2773219645023346,-0.43983203172683716,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object088",7,[[1,-1722,[1031],[0],1032]],[1,0.2348823994398117,-0.4175044894218445,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object089",7,[[1,-1723,[1033],[0],1034]],[1,0.19366829097270966,-0.39573147892951965,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object090",7,[[1,-1724,[1035],[0],1036]],[1,0.1495210826396942,-0.37235796451568604,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object091",7,[[1,-1725,[1037],[0],1038]],[1,0.10439880192279816,-0.3484503924846649,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object092",7,[[1,-1726,[1039],[0],1040]],[1,0.0664183646440506,-0.32818803191185,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object093",7,[[1,-1727,[1041],[0],1042]],[1,0.021953992545604706,-0.3044050931930542,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object094",7,[[1,-1728,[1043],[0],1044]],[1,-0.05073053389787674,-0.3205631375312805,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object095",7,[[1,-1729,[1045],[0],1046]],[1,-0.1025167927145958,-0.34861716628074646,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object096",7,[[1,-1730,[1047],[0],1048]],[1,-0.14709314703941345,-0.3726955056190491,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object097",7,[[1,-1731,[1049],[0],1050]],[1,-0.19068436324596405,-0.3962600827217102,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object098",7,[[1,-1732,[1051],[0],1052]],[1,-0.23140615224838257,-0.4182368814945221,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object099",7,[[1,-1733,[1053],[0],1054]],[1,-0.2736360430717468,-0.44090884923934937,-1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object100",7,[[1,-1734,[1055],[0],1056]],[1,-0.2879696786403656,-0.40794456005096436,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object101",7,[[1,-1735,[1057],[0],1058]],[1,-0.2790612280368805,-0.35723212361335754,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object102",7,[[1,-1736,[1059],[0],1060]],[1,-0.27089715003967285,-0.3108690679073334,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object103",7,[[1,-1737,[1061],[0],1062]],[1,-0.26297470927238464,-0.2659950852394104,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object104",7,[[1,-1738,[1063],[0],1064]],[1,-0.2563396692276001,-0.22884123027324677,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object105",7,[[1,-1739,[1065],[0],1066]],[1,-0.2501392662525177,-0.1942315548658371,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object106",7,[[1,-1740,[1067],[0],1068]],[1,-0.24449574947357178,-0.16320142149925232,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object107",7,[[1,-1741,[1069],[0],1070]],[1,-0.2391621172428131,-0.1328268200159073,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object108",7,[[1,-1742,[1071],[0],1072]],[1,-0.24507291615009308,-0.11283881962299347,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object109",7,[[1,-1743,[1073],[0],1074]],[1,-0.27312207221984863,-0.08741658926010132,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object110",7,[[1,-1744,[1075],[0],1076]],[1,-0.3046286702156067,-0.058095645159482956,0],[1,1,1,0.7049000263214111]],[3,"Object111",7,[[1,-1745,[1077],[0],1078]],[1,-0.3393319845199585,-0.02529912441968918,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object112",7,[[1,-1746,[1079],[0],1080]],[1,-0.37297767400741577,0.00721226679161191,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object113",7,[[1,-1747,[1081],[0],1082]],[1,-0.40546882152557373,0.03865279257297516,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object114",7,[[1,-1748,[1083],[0],1084]],[1,-0.43444350361824036,0.06692472100257874,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object115",7,[[1,-1749,[1085],[0],1086]],[1,-0.4645434617996216,0.09608247876167297,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object116",7,[[1,-1750,[1087],[0],1088]],[1,-0.4424054026603699,0.11795606464147568,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object117",7,[[1,-1751,[1089],[0],1090]],[1,-0.4034482538700104,0.12335558235645294,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object118",7,[[1,-1752,[1091],[0],1092]],[1,-0.3629837930202484,0.12897561490535736,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object119",7,[[1,-1753,[1093],[0],1094]],[1,-0.32251930236816406,0.13459569215774536,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object120",7,[[1,-1754,[1095],[0],1096]],[1,-0.28215283155441284,0.14020876586437225,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object121",7,[[1,-1755,[1097],[0],1098]],[1,-0.24178721010684967,0.14581510424613953,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object122",7,[[1,-1756,[1099],[0],1100]],[1,-0.20142154395580292,0.1514214277267456,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object123",7,[[1,-1757,[1101],[0],1102]],[1,-0.16192199289798737,0.15690886974334717,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object124",7,[[1,-1758,[1103],[0],1104]],[1,-0.13502570986747742,0.1822555661201477,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object125",7,[[1,-1759,[1105],[0],1106]],[1,-0.12360477447509766,0.20637071132659912,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object126",7,[[1,-1760,[1107],[0],1108]],[1,-0.1103503629565239,0.23422488570213318,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object127",7,[[1,-1761,[1109],[0],1110]],[1,-0.09622859954833984,0.2637403607368469,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object128",7,[[1,-1762,[1111],[0],1112]],[1,-0.08071792870759964,0.2957955598831177,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object129",7,[[1,-1763,[1113],[0],1114]],[1,-0.06476869434118271,0.32874733209609985,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object130",7,[[1,-1764,[1115],[0],1116]],[1,-0.048407964408397675,0.36254313588142395,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object131",7,[[1,-1765,[1117],[0],1118]],[1,-0.030788440257310867,0.39881792664527893,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[47,"Kim",86,[[1,-1766,[1119,1120],[0],1121]],[1,0,0.5571581125259399,-1.3016038913349348e-8]],[2,"Shape001",3,[[1,-1767,[1122],[0],1123]],[1,-0.013561696745455265,0.03110026799142096,-0.4783639907836914],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object132",3,[[1,-1768,[1124],[0],1125]],[1,-0.022,0.032,-0.461],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape002",3,[[1,-1769,[1126],[0],1127]],[1,-0.029,0.032,-0.446],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape003",3,[[1,-1770,[1128],[0],1129]],[1,-0.039,0.032,-0.425],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object133",3,[[1,-1771,[1130],[0],1131]],[1,-0.047,0.032,-0.408],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape004",3,[[1,-1772,[1132],[0],1133]],[1,-0.054,0.032,-0.393],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape005",3,[[1,-1773,[1134],[0],1135]],[1,-0.064,0.032,-0.373],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object134",3,[[1,-1774,[1136],[0],1137]],[1,-0.071,0.032,-0.359],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape006",3,[[1,-1775,[1138],[0],1139]],[1,-0.08,0.032,-0.341],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape007",3,[[1,-1776,[1140],[0],1141]],[1,-0.09,0.032,-0.321],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object135",3,[[1,-1777,[1142],[0],1143]],[1,-0.098,0.032,-0.303],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape008",3,[[1,-1778,[1144],[0],1145]],[1,-0.107,0.032,-0.285],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape009",3,[[1,-1779,[1146],[0],1147]],[1,-0.116,0.032,-0.266],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape010",3,[[1,-1780,[1148],[0],1149]],[1,-0.125,0.032,-0.247],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object136",3,[[1,-1781,[1150],[0],1151]],[1,-0.134,0.032,-0.229],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape011",3,[[1,-1782,[1152],[0],1153]],[1,-0.142,0.032,-0.213],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape012",3,[[1,-1783,[1154],[0],1155]],[1,-0.157,0.032,-0.2],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape013",3,[[1,-1784,[1156],[0],1157]],[1,-0.181,0.032,-0.197],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape014",3,[[1,-1785,[1158],[0],1159]],[1,-0.204,0.032,-0.194],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape015",3,[[1,-1786,[1160],[0],1161]],[1,-0.227,0.032,-0.192],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape016",3,[[1,-1787,[1162],[0],1163]],[1,-0.25,0.032,-0.189],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape017",3,[[1,-1788,[1164],[0],1165]],[1,-0.269,0.032,-0.187],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape018",3,[[1,-1789,[1166],[0],1167]],[1,-0.294,0.032,-0.185],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape019",3,[[1,-1790,[1168],[0],1169]],[1,-0.316,0.032,-0.182],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape020",3,[[1,-1791,[1170],[0],1171]],[1,-0.48,0.037,-0.154],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape021",3,[[1,-1792,[1172],[0],1173]],[1,-0.476,0.032,-0.162],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape022",3,[[1,-1793,[1174],[0],1175]],[1,-0.452,0.032,-0.165],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape023",3,[[1,-1794,[1176],[0],1177]],[1,-0.43,0.032,-0.168],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape024",3,[[1,-1795,[1178],[0],1179]],[1,-0.411,0.032,-0.17],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape025",3,[[1,-1796,[1180],[0],1181]],[1,-0.387,0.032,-0.173],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape026",3,[[1,-1797,[1182],[0],1183]],[1,-0.364,0.032,-0.176],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape027",3,[[1,-1798,[1184],[0],1185]],[1,-0.341,0.032,-0.179],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape028",3,[[1,-1799,[1186],[0],1187]],[1,-0.464,0.037,-0.138],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape029",3,[[1,-1800,[1188],[0],1189]],[1,-0.447,0.037,-0.121],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape030",3,[[1,-1801,[1190],[0],1191]],[1,-0.429,0.037,-0.103],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape031",3,[[1,-1802,[1192],[0],1193]],[1,-0.412,0.037,-0.087],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape032",3,[[1,-1803,[1194],[0],1195]],[1,-0.394,0.037,-0.069],[3,-0.5708220547776044,0.41732742754277924,0.4173274275427792,0.5708220547776044],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.341,0]],[2,"Shape033",3,[[1,-1804,[1196],[0],1197]],[1,-0.377,0.037,-0.053],[3,-0.5703518921001829,0.41796975868804354,0.4179697586880435,0.570351892100183],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.47,0]],[2,"Shape034",3,[[1,-1805,[1198],[0],1199]],[1,-0.359,0.037,-0.036],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape035",3,[[1,-1806,[1200],[0],1201]],[1,-0.343,0.037,-0.02],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape036",3,[[1,-1807,[1202],[0],1203]],[1,-0.328,0.037,-0.004],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape037",3,[[1,-1808,[1204],[0],1205]],[1,-0.311,0.037,0.012],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape038",3,[[1,-1809,[1206],[0],1207]],[1,-0.296,0.037,0.027],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape039",3,[[1,-1810,[1208],[0],1209]],[1,-0.281,0.037,0.042],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape040",3,[[1,-1811,[1210],[0],1211]],[1,-0.263,0.037,0.06],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape041",3,[[1,-1812,[1212],[0],1213]],[1,-0.249,0.037,0.075],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape042",3,[[1,-1813,[1214],[0],1215]],[1,-0.241,0.037,0.091],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape043",3,[[1,-1814,[1216],[0],1217]],[1,-0.244,0.037,0.111],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape044",3,[[1,-1815,[1218],[0],1219]],[1,-0.248,0.037,0.136],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape045",3,[[1,-1816,[1220],[0],1221]],[1,-0.253,0.037,0.161],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape046",3,[[1,-1817,[1222],[0],1223]],[1,-0.257,0.037,0.184],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape047",3,[[1,-1818,[1224],[0],1225]],[1,-0.261,0.037,0.207],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape048",3,[[1,-1819,[1226],[0],1227]],[1,-0.265,0.037,0.23],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape049",3,[[1,-1820,[1228],[0],1229]],[1,-0.27,0.037,0.255],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape050",3,[[1,-1821,[1230],[0],1231]],[1,-0.274,0.037,0.279],[3,-0.7009359689397046,0.09321355827645184,0.09321355827645182,0.7009359689397047],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.15,0]],[2,"Shape051",3,[[1,-1822,[1232],[0],1233]],[1,-0.278,0.037,0.303],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape052",3,[[1,-1823,[1234],[0],1235]],[1,-0.282,0.037,0.323],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape053",3,[[1,-1824,[1236],[0],1237]],[1,-0.286,0.037,0.345],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape054",3,[[1,-1825,[1238],[0],1239]],[1,-0.29,0.037,0.367],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape055",3,[[1,-1826,[1240],[0],1241]],[1,-0.294,0.037,0.389],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape056",3,[[1,-1827,[1242],[0],1243]],[1,-0.289,0.037,0.406],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape057",3,[[1,-1828,[1244],[0],1245]],[1,-0.297,0.037,0.402],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape058",3,[[1,-1829,[1246],[0],1247]],[1,-0.267,0.037,0.394],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape059",3,[[1,-1830,[1248],[0],1249]],[1,-0.246,0.037,0.383],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape060",3,[[1,-1831,[1250],[0],1251]],[1,-0.226,0.037,0.372],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape061",3,[[1,-1832,[1252],[0],1253]],[1,-0.206,0.037,0.361],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape062",3,[[1,-1833,[1254],[0],1255]],[1,-0.184,0.037,0.349],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape063",3,[[1,-1834,[1256],[0],1257]],[1,-0.164,0.037,0.338],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape064",3,[[1,-1835,[1258],[0],1259]],[1,-0.145,0.037,0.328],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape065",3,[[1,-1836,[1260],[0],1261]],[1,-0.123,0.037,0.316],[3,-0.21850801222441055,0.6724985119639574,0.6724985119639573,0.21850801222441057],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144,0]],[2,"Shape066",3,[[1,-1837,[1262],[0],1263]],[1,-0.101,0.037,0.305],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape067",3,[[1,-1838,[1264],[0],1265]],[1,-0.082,0.037,0.295],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape068",3,[[1,-1839,[1266],[0],1267]],[1,-0.061,0.037,0.284],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape069",3,[[1,-1840,[1268],[0],1269]],[1,-0.04,0.037,0.273],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape070",3,[[1,-1841,[1270],[0],1271]],[1,-0.023,0.037,0.265],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape071",3,[[1,-1842,[1272],[0],1273]],[1,0.012,0.037,0.259],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape072",3,[[1,-1843,[1274],[0],1275]],[1,-0.008,0.037,0.257],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape073",3,[[1,-1844,[1276],[0],1277]],[1,0.034,0.037,0.27],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape074",3,[[1,-1845,[1278],[0],1279]],[1,0.054,0.037,0.281],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape075",3,[[1,-1846,[1280],[0],1281]],[1,0.077,0.037,0.293],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape076",3,[[1,-1847,[1282],[0],1283]],[1,0.097,0.037,0.304],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape077",3,[[1,-1848,[1284],[0],1285]],[1,0.119,0.037,0.315],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape078",3,[[1,-1849,[1286],[0],1287]],[1,0.14,0.037,0.326],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape079",3,[[1,-1850,[1288],[0],1289]],[1,0.161,0.037,0.337],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape080",3,[[1,-1851,[1290],[0],1291]],[1,0.183,0.037,0.349],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape081",3,[[1,-1852,[1292],[0],1293]],[1,0.202,0.037,0.359],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape082",3,[[1,-1853,[1294],[0],1295]],[1,0.224,0.037,0.371],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape083",3,[[1,-1854,[1296],[0],1297]],[1,0.245,0.037,0.382],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape084",3,[[1,-1855,[1298],[0],1299]],[1,0.264,0.037,0.392],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape085",3,[[1,-1856,[1300],[0],1301]],[1,0.287,0.037,0.404],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape086",3,[[1,-1857,[1302],[0],1303]],[1,0.29,0.037,0.369],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape087",3,[[1,-1858,[1304],[0],1305]],[1,0.293,0.037,0.383],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape088",3,[[1,-1859,[1306],[0],1307]],[1,0.297,0.037,0.401],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape089",3,[[1,-1860,[1308],[0],1309]],[1,0.279,0.037,0.312],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape090",3,[[1,-1861,[1310],[0],1311]],[1,0.281,0.037,0.324],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape091",3,[[1,-1862,[1312],[0],1313]],[1,0.285,0.037,0.344],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape092",3,[[1,-1863,[1314],[0],1315]],[1,0.271,0.037,0.27],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape093",3,[[1,-1864,[1316],[0],1317]],[1,0.275,0.037,0.289],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape094",3,[[1,-1865,[1318],[0],1319]],[1,0.26,0.037,0.214],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape095",3,[[1,-1866,[1320],[0],1321]],[1,0.262,0.037,0.225],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape096",3,[[1,-1867,[1322],[0],1323]],[1,0.266,0.037,0.245],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape097",3,[[1,-1868,[1324],[0],1325]],[1,0.252,0.037,0.17],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape098",3,[[1,-1869,[1326],[0],1327]],[1,0.248,0.037,0.149],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape099",3,[[1,-1870,[1328],[0],1329]],[1,0.244,0.037,0.129],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape100",3,[[1,-1871,[1330],[0],1331]],[1,0.24,0.037,0.109],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape101",3,[[1,-1872,[1332],[0],1333]],[1,0.256,0.037,0.19],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape102",3,[[1,-1873,[1334],[0],1335]],[1,0.237,0.037,0.095],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape103",3,[[1,-1874,[1336],[0],1337]],[1,0.235,0.037,0.086],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape104",3,[[1,-1875,[1338],[0],1339]],[1,0.245,0.037,0.069],[3,-0.13295923324800552,0.6944939469096203,0.6944939469096202,0.13295923324800554],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,158.324,0]],[2,"Shape105",3,[[1,-1876,[1340],[0],1341]],[1,0.262,0.037,0.053],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape106",3,[[1,-1877,[1342],[0],1343]],[1,0.28,0.037,0.035],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape107",3,[[1,-1878,[1344],[0],1345]],[1,0.298,0.037,0.018],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape108",3,[[1,-1879,[1346],[0],1347]],[1,0.315,0.037,0.002],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape109",3,[[1,-1880,[1348],[0],1349]],[1,0.333,0.037,-0.015],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape110",3,[[1,-1881,[1350],[0],1351]],[1,0.35,0.037,-0.032],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape111",3,[[1,-1882,[1352],[0],1353]],[1,0.368,0.037,-0.049],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape112",3,[[1,-1883,[1354],[0],1355]],[1,0.386,0.037,-0.066],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape113",3,[[1,-1884,[1356],[0],1357]],[1,0.403,0.037,-0.083],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape114",3,[[1,-1885,[1358],[0],1359]],[1,0.421,0.037,-0.101],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape115",3,[[1,-1886,[1360],[0],1361]],[1,0.438,0.037,-0.118],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape116",3,[[1,-1887,[1362],[0],1363]],[1,0.453,0.037,-0.133],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape117",3,[[1,-1888,[1364],[0],1365]],[1,0.47,0.037,-0.149],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape118",3,[[1,-1889,[1366],[0],1367]],[1,0.465,0.037,-0.16],[3,0.5792279653395692,0.40557978767263875,0.4055797876726387,-0.5792279653395693],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290,0]],[2,"Shape119",3,[[1,-1890,[1368],[0],1369]],[1,0.442,0.037,-0.162],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape120",3,[[1,-1891,[1370],[0],1371]],[1,0.418,0.037,-0.165],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape121",3,[[1,-1892,[1372],[0],1373]],[1,0.393,0.037,-0.168],[3,0.5725253055825154,0.41498767989862945,0.41498767989862934,-0.5725253055825155],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,288.128,0]],[2,"Shape122",3,[[1,-1893,[1374],[0],1375]],[1,0.369,0.037,-0.172],[3,0.5624285974242904,0.4285721325510391,0.42857213255103904,-0.5624285974242905],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,285.385,0]],[2,"Shape123",3,[[1,-1894,[1376],[0],1377]],[1,0.345,0.037,-0.176],[3,0.5794437836929275,0.4052713924515569,0.4052713924515568,-0.5794437836929276],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.061,0]],[2,"Shape124",3,[[1,-1895,[1378],[0],1379]],[1,0.321,0.037,-0.178],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape125",3,[[1,-1896,[1380],[0],1381]],[1,0.299,0.037,-0.181],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape126",3,[[1,-1897,[1382],[0],1383]],[1,0.278,0.037,-0.183],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape127",3,[[1,-1898,[1384],[0],1385]],[1,0.256,0.037,-0.185],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape128",3,[[1,-1899,[1386],[0],1387]],[1,0.232,0.037,-0.188],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape129",3,[[1,-1900,[1388],[0],1389]],[1,0.208,0.037,-0.191],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape130",3,[[1,-1901,[1390],[0],1391]],[1,0.189,0.037,-0.194],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape131",3,[[1,-1902,[1392],[0],1393]],[1,0.166,0.037,-0.198],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape132",3,[[1,-1903,[1394],[0],1395]],[1,0.15,0.037,-0.208],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape133",3,[[1,-1904,[1396],[0],1397]],[1,0.139,0.037,-0.228],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape134",3,[[1,-1905,[1398],[0],1399]],[1,0.118,0.037,-0.267],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape135",3,[[1,-1906,[1400],[0],1401]],[1,0.129,0.037,-0.247],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape136",3,[[1,-1907,[1402],[0],1403]],[1,0.108,0.037,-0.285],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape137",3,[[1,-1908,[1404],[0],1405]],[1,0.099,0.037,-0.302],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape138",3,[[1,-1909,[1406],[0],1407]],[1,0.077,0.037,-0.343],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape139",3,[[1,-1910,[1408],[0],1409]],[1,0.088,0.037,-0.322],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Object057",3,[[1,-1911,[1410],[0],1411]],[1,0.011539740487933492,0.03110026799142096,-0.479156494140625],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object058",3,[[1,-1912,[1412],[0],1413]],[1,0.02100000000000035,0.03000000000000025,-0.46],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object059",3,[[1,-1913,[1414],[0],1415]],[1,0.029000000000000248,0.03200000000000003,-0.443],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object060",3,[[1,-1914,[1416],[0],1417]],[1,0.038000000000000256,0.03200000000000003,-0.42399999999999993],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object061",3,[[1,-1915,[1418],[0],1419]],[1,0.047000000000000264,0.03200000000000003,-0.405],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object062",3,[[1,-1916,[1420],[0],1421]],[1,0.057,0.032,-0.385],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object063",3,[[1,-1917,[1422],[0],1423]],[1,0.063,0.032,-0.372],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object064",3,[[1,-1918,[1424],[0],1425]],[1,0.07,0.032,-0.358],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[30,"Box_Top",80,[[24,1,-1919,[1430],[0],1431]]],[3,"Object053",28,[[1,-1920,[1435],[0],1436]],[1,-0.0012973976554349065,0.046117644757032394,0],[1,1,1,0.7049000263214111]],[3,"Shape001",8,[[1,-1921,[1445],[0],1446]],[1,-0.011976251378655434,0.43752601742744446,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object057",8,[[1,-1922,[1447],[0],1448]],[1,0.01312518585473299,0.43831852078437805,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object058",8,[[1,-1923,[1449],[0],1450]],[1,0.03181959688663483,0.3993992209434509,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object059",8,[[1,-1924,[1451],[0],1452]],[1,0.04949626326560974,0.363006591796875,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object060",8,[[1,-1925,[1453],[0],1454]],[1,0.06897416710853577,0.3228136897087097,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object061",8,[[1,-1926,[1455],[0],1456]],[1,0.08904626220464706,0.28134241700172424,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object062",8,[[1,-1927,[1457],[0],1458]],[1,0.10832377523183823,0.24099856615066528,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object063",8,[[1,-1928,[1459],[0],1460]],[1,0.1269415318965912,0.20187249779701233,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object064",8,[[1,-1929,[1461],[0],1462]],[1,0.1431671380996704,0.16904796659946442,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object065",8,[[1,-1930,[1463],[0],1464]],[1,0.1622641235589981,0.15714582800865173,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object066",8,[[1,-1931,[1465],[0],1466]],[1,0.20358389616012573,0.15169481933116913,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object067",8,[[1,-1932,[1467],[0],1468]],[1,0.25198376178741455,0.14530141651630402,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object068",8,[[1,-1933,[1469],[0],1470]],[1,0.30038368701934814,0.13890805840492249,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object069",8,[[1,-1934,[1471],[0],1472]],[1,0.3488888442516327,0.13248682022094727,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object070",8,[[1,-1935,[1473],[0],1474]],[1,0.397499680519104,0.12606558203697205,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object071",8,[[1,-1936,[1475],[0],1476]],[1,0.45196807384490967,0.11889509111642838,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object072",8,[[1,-1937,[1477],[0],1478]],[1,0.4652676284313202,0.09908603876829147,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object073",8,[[1,-1938,[1479],[0],1480]],[1,0.4346861243247986,0.06960718333721161,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object074",8,[[1,-1939,[1481],[0],1482]],[1,0.40399566292762756,0.040091972798109055,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object075",8,[[1,-1940,[1483],[0],1484]],[1,0.370542973279953,0.00815456360578537,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object076",8,[[1,-1941,[1485],[0],1486]],[1,0.3363422453403473,-0.02475663274526596,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object077",8,[[1,-1942,[1487],[0],1488]],[1,0.30375948548316956,-0.05641547217965126,0],[1,1,1,0.7049000263214111]],[3,"Object078",8,[[1,-1943,[1489],[0],1490]],[1,0.27192193269729614,-0.08681831508874893,4.440891999238953e-18],[1,1,1,0.7049000263214111]],[3,"Object079",8,[[1,-1944,[1491],[0],1492]],[1,0.24510806798934937,-0.11280042678117752,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object080",8,[[1,-1945,[1493],[0],1494]],[1,0.2435573786497116,-0.14687778055667877,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object081",8,[[1,-1946,[1495],[0],1496]],[1,0.2490813434123993,-0.17727982997894287,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object082",8,[[1,-1947,[1497],[0],1498]],[1,0.2568378746509552,-0.21966493129730225,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object083",8,[[1,-1948,[1499],[0],1500]],[1,0.2651858627796173,-0.2655538320541382,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object084",8,[[1,-1949,[1501],[0],1502]],[1,0.27337560057640076,-0.3104284107685089,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object085",8,[[1,-1950,[1503],[0],1504]],[1,0.28222325444221497,-0.35871100425720215,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object086",8,[[1,-1951,[1505],[0],1506]],[1,0.29148560762405396,-0.40921542048454285,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object087",8,[[1,-1952,[1507],[0],1508]],[1,0.2773219645023346,-0.43983203172683716,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object088",8,[[1,-1953,[1509],[0],1510]],[1,0.2348823994398117,-0.4175044894218445,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object089",8,[[1,-1954,[1511],[0],1512]],[1,0.19366829097270966,-0.39573147892951965,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object090",8,[[1,-1955,[1513],[0],1514]],[1,0.1495210826396942,-0.37235796451568604,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object091",8,[[1,-1956,[1515],[0],1516]],[1,0.10439880192279816,-0.3484503924846649,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object092",8,[[1,-1957,[1517],[0],1518]],[1,0.0664183646440506,-0.32818803191185,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object093",8,[[1,-1958,[1519],[0],1520]],[1,0.021953992545604706,-0.3044050931930542,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object094",8,[[1,-1959,[1521],[0],1522]],[1,-0.05073053389787674,-0.3205631375312805,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object095",8,[[1,-1960,[1523],[0],1524]],[1,-0.1025167927145958,-0.34861716628074646,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object096",8,[[1,-1961,[1525],[0],1526]],[1,-0.14709314703941345,-0.3726955056190491,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object097",8,[[1,-1962,[1527],[0],1528]],[1,-0.19068436324596405,-0.3962600827217102,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object098",8,[[1,-1963,[1529],[0],1530]],[1,-0.23140615224838257,-0.4182368814945221,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object099",8,[[1,-1964,[1531],[0],1532]],[1,-0.2736360430717468,-0.44090884923934937,-1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object100",8,[[1,-1965,[1533],[0],1534]],[1,-0.2879696786403656,-0.40794456005096436,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object101",8,[[1,-1966,[1535],[0],1536]],[1,-0.2790612280368805,-0.35723212361335754,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object102",8,[[1,-1967,[1537],[0],1538]],[1,-0.27089715003967285,-0.3108690679073334,-1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object103",8,[[1,-1968,[1539],[0],1540]],[1,-0.26297470927238464,-0.2659950852394104,-9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object104",8,[[1,-1969,[1541],[0],1542]],[1,-0.2563396692276001,-0.22884123027324677,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object105",8,[[1,-1970,[1543],[0],1544]],[1,-0.2501392662525177,-0.1942315548658371,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object106",8,[[1,-1971,[1545],[0],1546]],[1,-0.24449574947357178,-0.16320142149925232,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object107",8,[[1,-1972,[1547],[0],1548]],[1,-0.2391621172428131,-0.1328268200159073,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object108",8,[[1,-1973,[1549],[0],1550]],[1,-0.24507291615009308,-0.11283881962299347,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object109",8,[[1,-1974,[1551],[0],1552]],[1,-0.27312207221984863,-0.08741658926010132,-4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object110",8,[[1,-1975,[1553],[0],1554]],[1,-0.3046286702156067,-0.058095645159482956,0],[1,1,1,0.7049000263214111]],[3,"Object111",8,[[1,-1976,[1555],[0],1556]],[1,-0.3393319845199585,-0.02529912441968918,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object112",8,[[1,-1977,[1557],[0],1558]],[1,-0.37297767400741577,0.00721226679161191,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object113",8,[[1,-1978,[1559],[0],1560]],[1,-0.40546882152557373,0.03865279257297516,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object114",8,[[1,-1979,[1561],[0],1562]],[1,-0.43444350361824036,0.06692472100257874,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object115",8,[[1,-1980,[1563],[0],1564]],[1,-0.4645434617996216,0.09608247876167297,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object116",8,[[1,-1981,[1565],[0],1566]],[1,-0.4424054026603699,0.11795606464147568,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object117",8,[[1,-1982,[1567],[0],1568]],[1,-0.4034482538700104,0.12335558235645294,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object118",8,[[1,-1983,[1569],[0],1570]],[1,-0.3629837930202484,0.12897561490535736,4.76837147544984e-9],[1,1,1,0.7049000263214111]],[3,"Object119",8,[[1,-1984,[1571],[0],1572]],[1,-0.32251930236816406,0.13459569215774536,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object120",8,[[1,-1985,[1573],[0],1574]],[1,-0.28215283155441284,0.14020876586437225,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object121",8,[[1,-1986,[1575],[0],1576]],[1,-0.24178721010684967,0.14581510424613953,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object122",8,[[1,-1987,[1577],[0],1578]],[1,-0.20142154395580292,0.1514214277267456,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object123",8,[[1,-1988,[1579],[0],1580]],[1,-0.16192199289798737,0.15690886974334717,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object124",8,[[1,-1989,[1581],[0],1582]],[1,-0.13502570986747742,0.1822555661201477,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object125",8,[[1,-1990,[1583],[0],1584]],[1,-0.12360477447509766,0.20637071132659912,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object126",8,[[1,-1991,[1585],[0],1586]],[1,-0.1103503629565239,0.23422488570213318,9.53674295089968e-9],[1,1,1,0.7049000263214111]],[3,"Object127",8,[[1,-1992,[1587],[0],1588]],[1,-0.09622859954833984,0.2637403607368469,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object128",8,[[1,-1993,[1589],[0],1590]],[1,-0.08071792870759964,0.2957955598831177,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object129",8,[[1,-1994,[1591],[0],1592]],[1,-0.06476869434118271,0.32874733209609985,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[3,"Object130",8,[[1,-1995,[1593],[0],1594]],[1,-0.048407964408397675,0.36254313588142395,1.907348590179936e-8],[1,1,1,0.7049000263214111]],[3,"Object131",8,[[1,-1996,[1595],[0],1596]],[1,-0.030788440257310867,0.39881792664527893,1.4305114426349519e-8],[1,1,1,0.7049000263214111]],[47,"Kim",93,[[1,-1997,[1597,1598],[0],1599]],[1,0,0.5571581125259399,-1.3016038913349348e-8]],[2,"Shape001",4,[[1,-1998,[1600],[0],1601]],[1,-0.013561696745455265,0.03110026799142096,-0.4783639907836914],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object132",4,[[1,-1999,[1602],[0],1603]],[1,-0.022,0.032,-0.461],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape002",4,[[1,-2000,[1604],[0],1605]],[1,-0.029,0.032,-0.446],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape003",4,[[1,-2001,[1606],[0],1607]],[1,-0.039,0.032,-0.425],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object133",4,[[1,-2002,[1608],[0],1609]],[1,-0.047,0.032,-0.408],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape004",4,[[1,-2003,[1610],[0],1611]],[1,-0.054,0.032,-0.393],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape005",4,[[1,-2004,[1612],[0],1613]],[1,-0.064,0.032,-0.373],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object134",4,[[1,-2005,[1614],[0],1615]],[1,-0.071,0.032,-0.359],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape006",4,[[1,-2006,[1616],[0],1617]],[1,-0.08,0.032,-0.341],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape007",4,[[1,-2007,[1618],[0],1619]],[1,-0.09,0.032,-0.321],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object135",4,[[1,-2008,[1620],[0],1621]],[1,-0.098,0.032,-0.303],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape008",4,[[1,-2009,[1622],[0],1623]],[1,-0.107,0.032,-0.285],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape009",4,[[1,-2010,[1624],[0],1625]],[1,-0.116,0.032,-0.266],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape010",4,[[1,-2011,[1626],[0],1627]],[1,-0.125,0.032,-0.247],[3,-0.7071067811865476,-4.9065389333868005e-18,4.906538933386797e-18,0.7071067811865475],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Object136",4,[[1,-2012,[1628],[0],1629]],[1,-0.134,0.032,-0.229],[3,-0.7071067811865476,-7.727836986321755e-34,0,0.7071067811865475],[1,0.9999999999999997,1.0000000000000002,0.7049000263214112],[1,-90.00000000000003,-6.261747954649051e-32,6.261747954649051e-32]],[2,"Shape011",4,[[1,-2013,[1630],[0],1631]],[1,-0.142,0.032,-0.213],[3,-0.7071067811865477,-4.9065389333868005e-18,4.906538933386795e-18,0.7071067811865474],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90.00000000000003,-2.648343778830095e-31,7.951386703658794e-16]],[2,"Shape012",4,[[1,-2014,[1632],[0],1633]],[1,-0.157,0.032,-0.2],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape013",4,[[1,-2015,[1634],[0],1635]],[1,-0.181,0.032,-0.197],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape014",4,[[1,-2016,[1636],[0],1637]],[1,-0.204,0.032,-0.194],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape015",4,[[1,-2017,[1638],[0],1639]],[1,-0.227,0.032,-0.192],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape016",4,[[1,-2018,[1640],[0],1641]],[1,-0.25,0.032,-0.189],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape017",4,[[1,-2019,[1642],[0],1643]],[1,-0.269,0.032,-0.187],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape018",4,[[1,-2020,[1644],[0],1645]],[1,-0.294,0.032,-0.185],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape019",4,[[1,-2021,[1646],[0],1647]],[1,-0.316,0.032,-0.182],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape020",4,[[1,-2022,[1648],[0],1649]],[1,-0.48,0.037,-0.154],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape021",4,[[1,-2023,[1650],[0],1651]],[1,-0.476,0.032,-0.162],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape022",4,[[1,-2024,[1652],[0],1653]],[1,-0.452,0.032,-0.165],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape023",4,[[1,-2025,[1654],[0],1655]],[1,-0.43,0.032,-0.168],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape024",4,[[1,-2026,[1656],[0],1657]],[1,-0.411,0.032,-0.17],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape025",4,[[1,-2027,[1658],[0],1659]],[1,-0.387,0.032,-0.173],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape026",4,[[1,-2028,[1660],[0],1661]],[1,-0.364,0.032,-0.176],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape027",4,[[1,-2029,[1662],[0],1663]],[1,-0.341,0.032,-0.179],[3,-0.6210933706713069,-0.3379985575533637,-0.33799855755336367,0.621093370671307],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,-57.11,0]],[2,"Shape028",4,[[1,-2030,[1664],[0],1665]],[1,-0.464,0.037,-0.138],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape029",4,[[1,-2031,[1666],[0],1667]],[1,-0.447,0.037,-0.121],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape030",4,[[1,-2032,[1668],[0],1669]],[1,-0.429,0.037,-0.103],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape031",4,[[1,-2033,[1670],[0],1671]],[1,-0.412,0.037,-0.087],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape032",4,[[1,-2034,[1672],[0],1673]],[1,-0.394,0.037,-0.069],[3,-0.5708220547776044,0.41732742754277924,0.4173274275427792,0.5708220547776044],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.341,0]],[2,"Shape033",4,[[1,-2035,[1674],[0],1675]],[1,-0.377,0.037,-0.053],[3,-0.5703518921001829,0.41796975868804354,0.4179697586880435,0.570351892100183],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,72.47,0]],[2,"Shape034",4,[[1,-2036,[1676],[0],1677]],[1,-0.359,0.037,-0.036],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape035",4,[[1,-2037,[1678],[0],1679]],[1,-0.343,0.037,-0.02],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape036",4,[[1,-2038,[1680],[0],1681]],[1,-0.328,0.037,-0.004],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape037",4,[[1,-2039,[1682],[0],1683]],[1,-0.311,0.037,0.012],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape038",4,[[1,-2040,[1684],[0],1685]],[1,-0.296,0.037,0.027],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape039",4,[[1,-2041,[1686],[0],1687]],[1,-0.281,0.037,0.042],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape040",4,[[1,-2042,[1688],[0],1689]],[1,-0.263,0.037,0.06],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape041",4,[[1,-2043,[1690],[0],1691]],[1,-0.249,0.037,0.075],[3,-0.5775845221488258,0.4079168049665427,0.40791680496654265,0.5775845221488259],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,70.463,0]],[2,"Shape042",4,[[1,-2044,[1692],[0],1693]],[1,-0.241,0.037,0.091],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape043",4,[[1,-2045,[1694],[0],1695]],[1,-0.244,0.037,0.111],[3,-0.6975401757198376,0.11592110789989016,0.11592110789989013,0.6975401757198377],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,18.871,0]],[2,"Shape044",4,[[1,-2046,[1696],[0],1697]],[1,-0.248,0.037,0.136],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape045",4,[[1,-2047,[1698],[0],1699]],[1,-0.253,0.037,0.161],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape046",4,[[1,-2048,[1700],[0],1701]],[1,-0.257,0.037,0.184],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape047",4,[[1,-2049,[1702],[0],1703]],[1,-0.261,0.037,0.207],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape048",4,[[1,-2050,[1704],[0],1705]],[1,-0.265,0.037,0.23],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape049",4,[[1,-2051,[1706],[0],1707]],[1,-0.27,0.037,0.255],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape050",4,[[1,-2052,[1708],[0],1709]],[1,-0.274,0.037,0.279],[3,-0.7009359689397046,0.09321355827645184,0.09321355827645182,0.7009359689397047],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.15,0]],[2,"Shape051",4,[[1,-2053,[1710],[0],1711]],[1,-0.278,0.037,0.303],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape052",4,[[1,-2054,[1712],[0],1713]],[1,-0.282,0.037,0.323],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape053",4,[[1,-2055,[1714],[0],1715]],[1,-0.286,0.037,0.345],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape054",4,[[1,-2056,[1716],[0],1717]],[1,-0.29,0.037,0.367],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape055",4,[[1,-2057,[1718],[0],1719]],[1,-0.294,0.037,0.389],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape056",4,[[1,-2058,[1720],[0],1721]],[1,-0.289,0.037,0.406],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape057",4,[[1,-2059,[1722],[0],1723]],[1,-0.297,0.037,0.402],[3,-0.7009319010637156,0.09324414228896856,0.09324414228896855,0.7009319010637157],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,15.155,0]],[2,"Shape058",4,[[1,-2060,[1724],[0],1725]],[1,-0.267,0.037,0.394],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape059",4,[[1,-2061,[1726],[0],1727]],[1,-0.246,0.037,0.383],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape060",4,[[1,-2062,[1728],[0],1729]],[1,-0.226,0.037,0.372],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape061",4,[[1,-2063,[1730],[0],1731]],[1,-0.206,0.037,0.361],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape062",4,[[1,-2064,[1732],[0],1733]],[1,-0.184,0.037,0.349],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape063",4,[[1,-2065,[1734],[0],1735]],[1,-0.164,0.037,0.338],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape064",4,[[1,-2066,[1736],[0],1737]],[1,-0.145,0.037,0.328],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape065",4,[[1,-2067,[1738],[0],1739]],[1,-0.123,0.037,0.316],[3,-0.21850801222441055,0.6724985119639574,0.6724985119639573,0.21850801222441057],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144,0]],[2,"Shape066",4,[[1,-2068,[1740],[0],1741]],[1,-0.101,0.037,0.305],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape067",4,[[1,-2069,[1742],[0],1743]],[1,-0.082,0.037,0.295],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape068",4,[[1,-2070,[1744],[0],1745]],[1,-0.061,0.037,0.284],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape069",4,[[1,-2071,[1746],[0],1747]],[1,-0.04,0.037,0.273],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape070",4,[[1,-2072,[1748],[0],1749]],[1,-0.023,0.037,0.265],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape071",4,[[1,-2073,[1750],[0],1751]],[1,0.012,0.037,0.259],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape072",4,[[1,-2074,[1752],[0],1753]],[1,-0.008,0.037,0.257],[3,-0.21607696762540068,0.6732835539813903,0.6732835539813902,0.2160769676254007],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,144.414,0]],[2,"Shape073",4,[[1,-2075,[1754],[0],1755]],[1,0.034,0.037,0.27],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape074",4,[[1,-2076,[1756],[0],1757]],[1,0.054,0.037,0.281],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape075",4,[[1,-2077,[1758],[0],1759]],[1,0.077,0.037,0.293],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape076",4,[[1,-2078,[1760],[0],1761]],[1,0.097,0.037,0.304],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape077",4,[[1,-2079,[1762],[0],1763]],[1,0.119,0.037,0.315],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape078",4,[[1,-2080,[1764],[0],1765]],[1,0.14,0.037,0.326],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape079",4,[[1,-2081,[1766],[0],1767]],[1,0.161,0.037,0.337],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape080",4,[[1,-2082,[1768],[0],1769]],[1,0.183,0.037,0.349],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape081",4,[[1,-2083,[1770],[0],1771]],[1,0.202,0.037,0.359],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape082",4,[[1,-2084,[1772],[0],1773]],[1,0.224,0.037,0.371],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape083",4,[[1,-2085,[1774],[0],1775]],[1,0.245,0.037,0.382],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape084",4,[[1,-2086,[1776],[0],1777]],[1,0.264,0.037,0.392],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape085",4,[[1,-2087,[1778],[0],1779]],[1,0.287,0.037,0.404],[3,-0.508975713518172,0.4908601868645162,0.49086018686451616,0.5089757135181721],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,87.924,0]],[2,"Shape086",4,[[1,-2088,[1780],[0],1781]],[1,0.29,0.037,0.369],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape087",4,[[1,-2089,[1782],[0],1783]],[1,0.293,0.037,0.383],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape088",4,[[1,-2090,[1784],[0],1785]],[1,0.297,0.037,0.401],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape089",4,[[1,-2091,[1786],[0],1787]],[1,0.279,0.037,0.312],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape090",4,[[1,-2092,[1788],[0],1789]],[1,0.281,0.037,0.324],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape091",4,[[1,-2093,[1790],[0],1791]],[1,0.285,0.037,0.344],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape092",4,[[1,-2094,[1792],[0],1793]],[1,0.271,0.037,0.27],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape093",4,[[1,-2095,[1794],[0],1795]],[1,0.275,0.037,0.289],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape094",4,[[1,-2096,[1796],[0],1797]],[1,0.26,0.037,0.214],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape095",4,[[1,-2097,[1798],[0],1799]],[1,0.262,0.037,0.225],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape096",4,[[1,-2098,[1800],[0],1801]],[1,0.266,0.037,0.245],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape097",4,[[1,-2099,[1802],[0],1803]],[1,0.252,0.037,0.17],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape098",4,[[1,-2100,[1804],[0],1805]],[1,0.248,0.037,0.149],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape099",4,[[1,-2101,[1806],[0],1807]],[1,0.244,0.037,0.129],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape100",4,[[1,-2102,[1808],[0],1809]],[1,0.24,0.037,0.109],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape101",4,[[1,-2103,[1810],[0],1811]],[1,0.256,0.037,0.19],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape102",4,[[1,-2104,[1812],[0],1813]],[1,0.237,0.037,0.095],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape103",4,[[1,-2105,[1814],[0],1815]],[1,0.235,0.037,0.086],[3,0.22586577212364134,0.6700631708898732,0.6700631708898731,-0.22586577212364137],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,217.256,0]],[2,"Shape104",4,[[1,-2106,[1816],[0],1817]],[1,0.245,0.037,0.069],[3,-0.13295923324800552,0.6944939469096203,0.6944939469096202,0.13295923324800554],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,158.324,0]],[2,"Shape105",4,[[1,-2107,[1818],[0],1819]],[1,0.262,0.037,0.053],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape106",4,[[1,-2108,[1820],[0],1821]],[1,0.28,0.037,0.035],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape107",4,[[1,-2109,[1822],[0],1823]],[1,0.298,0.037,0.018],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape108",4,[[1,-2110,[1824],[0],1825]],[1,0.315,0.037,0.002],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape109",4,[[1,-2111,[1826],[0],1827]],[1,0.333,0.037,-0.015],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape110",4,[[1,-2112,[1828],[0],1829]],[1,0.35,0.037,-0.032],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape111",4,[[1,-2113,[1830],[0],1831]],[1,0.368,0.037,-0.049],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape112",4,[[1,-2114,[1832],[0],1833]],[1,0.386,0.037,-0.066],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape113",4,[[1,-2115,[1834],[0],1835]],[1,0.403,0.037,-0.083],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape114",4,[[1,-2116,[1836],[0],1837]],[1,0.421,0.037,-0.101],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape115",4,[[1,-2117,[1838],[0],1839]],[1,0.438,0.037,-0.118],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape116",4,[[1,-2118,[1840],[0],1841]],[1,0.453,0.037,-0.133],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape117",4,[[1,-2119,[1842],[0],1843]],[1,0.47,0.037,-0.149],[3,-0.11926771232981924,0.6969757619857462,0.6969757619857461,0.11926771232981925],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,160.579,0]],[2,"Shape118",4,[[1,-2120,[1844],[0],1845]],[1,0.465,0.037,-0.16],[3,0.5792279653395692,0.40557978767263875,0.4055797876726387,-0.5792279653395693],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290,0]],[2,"Shape119",4,[[1,-2121,[1846],[0],1847]],[1,0.442,0.037,-0.162],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape120",4,[[1,-2122,[1848],[0],1849]],[1,0.418,0.037,-0.165],[3,0.5817578329383818,0.4019425628306087,0.40194256283060864,-0.5817578329383819],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.718,0]],[2,"Shape121",4,[[1,-2123,[1850],[0],1851]],[1,0.393,0.037,-0.168],[3,0.5725253055825154,0.41498767989862945,0.41498767989862934,-0.5725253055825155],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,288.128,0]],[2,"Shape122",4,[[1,-2124,[1852],[0],1853]],[1,0.369,0.037,-0.172],[3,0.5624285974242904,0.4285721325510391,0.42857213255103904,-0.5624285974242905],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,285.385,0]],[2,"Shape123",4,[[1,-2125,[1854],[0],1855]],[1,0.345,0.037,-0.176],[3,0.5794437836929275,0.4052713924515569,0.4052713924515568,-0.5794437836929276],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.061,0]],[2,"Shape124",4,[[1,-2126,[1856],[0],1857]],[1,0.321,0.037,-0.178],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape125",4,[[1,-2127,[1858],[0],1859]],[1,0.299,0.037,-0.181],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape126",4,[[1,-2128,[1860],[0],1861]],[1,0.278,0.037,-0.183],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape127",4,[[1,-2129,[1862],[0],1863]],[1,0.256,0.037,-0.185],[3,0.5806507390019809,0.4035402325623226,0.40354023256232247,-0.580650739001981],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,290.403,0]],[2,"Shape128",4,[[1,-2130,[1864],[0],1865]],[1,0.232,0.037,-0.188],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape129",4,[[1,-2131,[1866],[0],1867]],[1,0.208,0.037,-0.191],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape130",4,[[1,-2132,[1868],[0],1869]],[1,0.189,0.037,-0.194],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape131",4,[[1,-2133,[1870],[0],1871]],[1,0.166,0.037,-0.198],[3,0.5700380487239152,0.4183976852314449,0.4183976852314448,-0.5700380487239153],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,287.444,0]],[2,"Shape132",4,[[1,-2134,[1872],[0],1873]],[1,0.15,0.037,-0.208],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape133",4,[[1,-2135,[1874],[0],1875]],[1,0.139,0.037,-0.228],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape134",4,[[1,-2136,[1876],[0],1877]],[1,0.118,0.037,-0.267],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape135",4,[[1,-2137,[1878],[0],1879]],[1,0.129,0.037,-0.247],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape136",4,[[1,-2138,[1880],[0],1881]],[1,0.108,0.037,-0.285],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape137",4,[[1,-2139,[1882],[0],1883]],[1,0.099,0.037,-0.302],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape138",4,[[1,-2140,[1884],[0],1885]],[1,0.077,0.037,-0.343],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Shape139",4,[[1,-2141,[1886],[0],1887]],[1,0.088,0.037,-0.322],[3,-0.62721137512625,0.3265055756219769,0.32650557562197685,0.62721137512625],[1,0.9999999999999994,1.0000000000000004,0.7049000263214112],[1,-90,55,0]],[2,"Object057",4,[[1,-2142,[1888],[0],1889]],[1,0.011539740487933492,0.03110026799142096,-0.479156494140625],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object058",4,[[1,-2143,[1890],[0],1891]],[1,0.02100000000000035,0.03000000000000025,-0.46],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object059",4,[[1,-2144,[1892],[0],1893]],[1,0.029000000000000248,0.03200000000000003,-0.443],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object060",4,[[1,-2145,[1894],[0],1895]],[1,0.038000000000000256,0.03200000000000003,-0.42399999999999993],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object061",4,[[1,-2146,[1896],[0],1897]],[1,0.047000000000000264,0.03200000000000003,-0.405],[3,-0.7071067811865475,-2.4532694666933995e-18,2.4532694666934e-18,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,3.975693351829398e-16]],[2,"Object062",4,[[1,-2147,[1898],[0],1899]],[1,0.057,0.032,-0.385],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object063",4,[[1,-2148,[1900],[0],1901]],[1,0.063,0.032,-0.372],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[2,"Object064",4,[[1,-2149,[1902],[0],1903]],[1,0.07,0.032,-0.358],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,0.9999999999999993,1.0000000000000002,0.7049000263214112],[1,-90,0,0]],[30,"Box_Top",87,[[24,1,-2150,[1908],[0],1909]]],[4,["c9yHDaZl1RrIPN4hW5VIUa"]],[3,"Sofa",9,[[24,1,-2151,[1924],[0],1925]],[1,0.396,-0.004,-7.031],[1,1.3,1.3,1.3]],[2,"Plane",9,[[88,"Plane<ModelComponent>",-2152,[1926],[0],1927]],[1,0.018379139259771884,0,1.0229947792394547],[3,0,0.35966298131010116,0,0.933082279263265],[1,5,5,5],[1,0,42.159,0]],[2,"Wall",9,[[1,-2153,[1928],[0],1929]],[1,-2.233,-0.209,4.569],[3,0,-0.16960751601546442,0,0.9855116896876789],[1,5,5,5],[1,0,-19.53,0]],[4,["24oLqCEUNZBoV9smqStgYf"]],[4,["24oLqCEUNZBoV9smqStgYf"]],[2,"Sniper_01_Cube",114,[[1,-2154,[1977,1978,1979,1980],[0],1981]],[1,0.065,-0.075,-0.077],[3,-0.21058286174121366,-0.1173155096186363,-0.687580059730461,0.6849274348460981],[1,20,20,20],[1,-94.351,-86.576,-63.186]],[2,"Sniper_01_Cube",115,[[1,-2155,[1989,1990,1991,1992],[0],1993]],[1,0.065,-0.075,-0.077],[3,-0.21058286174121366,-0.1173155096186363,-0.687580059730461,0.6849274348460981],[1,20,20,20],[1,-94.351,-86.576,-63.186]],[4,["d8QrElb5FeK4VmrCbhjIcg"]],[4,["e0GyjK+QJZZJOsOGb2e7TK"]],[126,45,13],[127],[83,"GamePlay","86mcuecddE+K4ExRkbCWxY",15,[1068]],[30,"BgSound",127,[[65,false,-2156,2027]]],[30,"iPhoneSound",127,[[65,false,-2157,2028]]]],0,[0,-1,211,0,-2,212,0,-3,213,0,-4,214,0,-5,215,0,-6,216,0,-7,217,0,-8,218,0,-9,219,0,-10,220,0,-11,221,0,-12,222,0,-13,223,0,-14,224,0,-15,225,0,-16,226,0,-17,227,0,-18,228,0,-19,229,0,-20,230,0,-21,231,0,-22,232,0,-23,233,0,-24,234,0,-25,235,0,-26,236,0,-27,237,0,-28,238,0,-29,239,0,-30,240,0,-31,241,0,-32,242,0,-33,243,0,-34,244,0,-35,245,0,-36,246,0,-37,247,0,-38,248,0,-39,249,0,-40,250,0,-41,251,0,-42,252,0,-43,253,0,-44,254,0,-45,255,0,-46,256,0,-47,257,0,-48,258,0,-49,259,0,-50,260,0,-51,261,0,-52,262,0,-53,263,0,-54,264,0,-55,265,0,-56,266,0,-57,267,0,-58,268,0,-59,269,0,-60,270,0,-61,271,0,-62,272,0,-63,273,0,-64,274,0,-65,275,0,-66,276,0,-67,277,0,-68,278,0,-69,279,0,-70,280,0,-71,281,0,-72,282,0,-73,283,0,-74,284,0,-75,285,0,-76,286,0,-77,287,0,-78,288,0,-79,289,0,-80,290,0,-81,291,0,-82,292,0,-83,293,0,-84,294,0,-85,295,0,-86,296,0,-87,297,0,-88,298,0,-89,299,0,-90,300,0,-91,301,0,-92,302,0,-93,303,0,-94,304,0,-95,305,0,-96,306,0,-97,307,0,-98,308,0,-99,309,0,-100,310,0,-101,311,0,-102,312,0,-103,313,0,-104,314,0,-105,315,0,-106,316,0,-107,317,0,-108,318,0,-109,319,0,-110,320,0,-111,321,0,-112,322,0,-113,323,0,-114,324,0,-115,325,0,-116,326,0,-117,327,0,-118,328,0,-119,329,0,-120,330,0,-121,331,0,-122,332,0,-123,333,0,-124,334,0,-125,335,0,-126,336,0,-127,337,0,-128,338,0,-129,339,0,-130,340,0,-131,341,0,-132,342,0,-133,343,0,-134,344,0,-135,345,0,-136,346,0,-137,347,0,-138,348,0,-139,349,0,-140,350,0,-141,351,0,-142,352,0,-143,353,0,-144,354,0,-145,355,0,-146,356,0,-147,357,0,-148,358,0,-149,359,0,-150,360,0,-151,361,0,-152,362,0,-1,442,0,-2,443,0,-3,444,0,-4,445,0,-5,446,0,-6,447,0,-7,448,0,-8,449,0,-9,450,0,-10,451,0,-11,452,0,-12,453,0,-13,454,0,-14,455,0,-15,456,0,-16,457,0,-17,458,0,-18,459,0,-19,460,0,-20,461,0,-21,462,0,-22,463,0,-23,464,0,-24,465,0,-25,466,0,-26,467,0,-27,468,0,-28,469,0,-29,470,0,-30,471,0,-31,472,0,-32,473,0,-33,474,0,-34,475,0,-35,476,0,-36,477,0,-37,478,0,-38,479,0,-39,480,0,-40,481,0,-41,482,0,-42,483,0,-43,484,0,-44,485,0,-45,486,0,-46,487,0,-47,488,0,-48,489,0,-49,490,0,-50,491,0,-51,492,0,-52,493,0,-53,494,0,-54,495,0,-55,496,0,-56,497,0,-57,498,0,-58,499,0,-59,500,0,-60,501,0,-61,502,0,-62,503,0,-63,504,0,-64,505,0,-65,506,0,-66,507,0,-67,508,0,-68,509,0,-69,510,0,-70,511,0,-71,512,0,-72,513,0,-73,514,0,-74,515,0,-75,516,0,-76,517,0,-77,518,0,-78,519,0,-79,520,0,-80,521,0,-81,522,0,-82,523,0,-83,524,0,-84,525,0,-85,526,0,-86,527,0,-87,528,0,-88,529,0,-89,530,0,-90,531,0,-91,532,0,-92,533,0,-93,534,0,-94,535,0,-95,536,0,-96,537,0,-97,538,0,-98,539,0,-99,540,0,-100,541,0,-101,542,0,-102,543,0,-103,544,0,-104,545,0,-105,546,0,-106,547,0,-107,548,0,-108,549,0,-109,550,0,-110,551,0,-111,552,0,-112,553,0,-113,554,0,-114,555,0,-115,556,0,-116,557,0,-117,558,0,-118,559,0,-119,560,0,-120,561,0,-121,562,0,-122,563,0,-123,564,0,-124,565,0,-125,566,0,-126,567,0,-127,568,0,-128,569,0,-129,570,0,-130,571,0,-131,572,0,-132,573,0,-133,574,0,-134,575,0,-135,576,0,-136,577,0,-137,578,0,-138,579,0,-139,580,0,-140,581,0,-141,582,0,-142,583,0,-143,584,0,-144,585,0,-145,586,0,-146,587,0,-147,588,0,-148,589,0,-149,590,0,-150,591,0,-151,592,0,-152,593,0,-1,673,0,-2,674,0,-3,675,0,-4,676,0,-5,677,0,-6,678,0,-7,679,0,-8,680,0,-9,681,0,-10,682,0,-11,683,0,-12,684,0,-13,685,0,-14,686,0,-15,687,0,-16,688,0,-17,689,0,-18,690,0,-19,691,0,-20,692,0,-21,693,0,-22,694,0,-23,695,0,-24,696,0,-25,697,0,-26,698,0,-27,699,0,-28,700,0,-29,701,0,-30,702,0,-31,703,0,-32,704,0,-33,705,0,-34,706,0,-35,707,0,-36,708,0,-37,709,0,-38,710,0,-39,711,0,-40,712,0,-41,713,0,-42,714,0,-43,715,0,-44,716,0,-45,717,0,-46,718,0,-47,719,0,-48,720,0,-49,721,0,-50,722,0,-51,723,0,-52,724,0,-53,725,0,-54,726,0,-55,727,0,-56,728,0,-57,729,0,-58,730,0,-59,731,0,-60,732,0,-61,733,0,-62,734,0,-63,735,0,-64,736,0,-65,737,0,-66,738,0,-67,739,0,-68,740,0,-69,741,0,-70,742,0,-71,743,0,-72,744,0,-73,745,0,-74,746,0,-75,747,0,-76,748,0,-77,749,0,-78,750,0,-79,751,0,-80,752,0,-81,753,0,-82,754,0,-83,755,0,-84,756,0,-85,757,0,-86,758,0,-87,759,0,-88,760,0,-89,761,0,-90,762,0,-91,763,0,-92,764,0,-93,765,0,-94,766,0,-95,767,0,-96,768,0,-97,769,0,-98,770,0,-99,771,0,-100,772,0,-101,773,0,-102,774,0,-103,775,0,-104,776,0,-105,777,0,-106,778,0,-107,779,0,-108,780,0,-109,781,0,-110,782,0,-111,783,0,-112,784,0,-113,785,0,-114,786,0,-115,787,0,-116,788,0,-117,789,0,-118,790,0,-119,791,0,-120,792,0,-121,793,0,-122,794,0,-123,795,0,-124,796,0,-125,797,0,-126,798,0,-127,799,0,-128,800,0,-129,801,0,-130,802,0,-131,803,0,-132,804,0,-133,805,0,-134,806,0,-135,807,0,-136,808,0,-137,809,0,-138,810,0,-139,811,0,-140,812,0,-141,813,0,-142,814,0,-143,815,0,-144,816,0,-145,817,0,-146,818,0,-147,819,0,-148,820,0,-149,821,0,-150,822,0,-151,823,0,-152,824,0,-1,904,0,-2,905,0,-3,906,0,-4,907,0,-5,908,0,-6,909,0,-7,910,0,-8,911,0,-9,912,0,-10,913,0,-11,914,0,-12,915,0,-13,916,0,-14,917,0,-15,918,0,-16,919,0,-17,920,0,-18,921,0,-19,922,0,-20,923,0,-21,924,0,-22,925,0,-23,926,0,-24,927,0,-25,928,0,-26,929,0,-27,930,0,-28,931,0,-29,932,0,-30,933,0,-31,934,0,-32,935,0,-33,936,0,-34,937,0,-35,938,0,-36,939,0,-37,940,0,-38,941,0,-39,942,0,-40,943,0,-41,944,0,-42,945,0,-43,946,0,-44,947,0,-45,948,0,-46,949,0,-47,950,0,-48,951,0,-49,952,0,-50,953,0,-51,954,0,-52,955,0,-53,956,0,-54,957,0,-55,958,0,-56,959,0,-57,960,0,-58,961,0,-59,962,0,-60,963,0,-61,964,0,-62,965,0,-63,966,0,-64,967,0,-65,968,0,-66,969,0,-67,970,0,-68,971,0,-69,972,0,-70,973,0,-71,974,0,-72,975,0,-73,976,0,-74,977,0,-75,978,0,-76,979,0,-77,980,0,-78,981,0,-79,982,0,-80,983,0,-81,984,0,-82,985,0,-83,986,0,-84,987,0,-85,988,0,-86,989,0,-87,990,0,-88,991,0,-89,992,0,-90,993,0,-91,994,0,-92,995,0,-93,996,0,-94,997,0,-95,998,0,-96,999,0,-97,1000,0,-98,1001,0,-99,1002,0,-100,1003,0,-101,1004,0,-102,1005,0,-103,1006,0,-104,1007,0,-105,1008,0,-106,1009,0,-107,1010,0,-108,1011,0,-109,1012,0,-110,1013,0,-111,1014,0,-112,1015,0,-113,1016,0,-114,1017,0,-115,1018,0,-116,1019,0,-117,1020,0,-118,1021,0,-119,1022,0,-120,1023,0,-121,1024,0,-122,1025,0,-123,1026,0,-124,1027,0,-125,1028,0,-126,1029,0,-127,1030,0,-128,1031,0,-129,1032,0,-130,1033,0,-131,1034,0,-132,1035,0,-133,1036,0,-134,1037,0,-135,1038,0,-136,1039,0,-137,1040,0,-138,1041,0,-139,1042,0,-140,1043,0,-141,1044,0,-142,1045,0,-143,1046,0,-144,1047,0,-145,1048,0,-146,1049,0,-147,1050,0,-148,1051,0,-149,1052,0,-150,1053,0,-151,1054,0,-152,1055,0,-1,135,0,-2,136,0,-3,137,0,-4,138,0,-5,139,0,-6,140,0,-7,141,0,-8,142,0,-9,143,0,-10,144,0,-11,145,0,-12,146,0,-13,147,0,-14,148,0,-15,149,0,-16,150,0,-17,151,0,-18,152,0,-19,153,0,-20,154,0,-21,155,0,-22,156,0,-23,157,0,-24,158,0,-25,159,0,-26,160,0,-27,161,0,-28,162,0,-29,163,0,-30,164,0,-31,165,0,-32,166,0,-33,167,0,-34,168,0,-35,169,0,-36,170,0,-37,171,0,-38,172,0,-39,173,0,-40,174,0,-41,175,0,-42,176,0,-43,177,0,-44,178,0,-45,179,0,-46,180,0,-47,181,0,-48,182,0,-49,183,0,-50,184,0,-51,185,0,-52,186,0,-53,187,0,-54,188,0,-55,189,0,-56,190,0,-57,191,0,-58,192,0,-59,193,0,-60,194,0,-61,195,0,-62,196,0,-63,197,0,-64,198,0,-65,199,0,-66,200,0,-67,201,0,-68,202,0,-69,203,0,-70,204,0,-71,205,0,-72,206,0,-73,207,0,-74,208,0,-75,209,0,-76,210,0,-1,365,0,-2,366,0,-3,367,0,-4,368,0,-5,369,0,-6,370,0,-7,371,0,-8,372,0,-9,373,0,-10,374,0,-11,375,0,-12,376,0,-13,377,0,-14,378,0,-15,379,0,-16,380,0,-17,381,0,-18,382,0,-19,383,0,-20,384,0,-21,385,0,-22,386,0,-23,387,0,-24,388,0,-25,389,0,-26,390,0,-27,391,0,-28,392,0,-29,393,0,-30,394,0,-31,395,0,-32,396,0,-33,397,0,-34,398,0,-35,399,0,-36,400,0,-37,401,0,-38,402,0,-39,403,0,-40,404,0,-41,405,0,-42,406,0,-43,407,0,-44,408,0,-45,409,0,-46,410,0,-47,411,0,-48,412,0,-49,413,0,-50,414,0,-51,415,0,-52,416,0,-53,417,0,-54,418,0,-55,419,0,-56,420,0,-57,421,0,-58,422,0,-59,423,0,-60,424,0,-61,425,0,-62,426,0,-63,427,0,-64,428,0,-65,429,0,-66,430,0,-67,431,0,-68,432,0,-69,433,0,-70,434,0,-71,435,0,-72,436,0,-73,437,0,-74,438,0,-75,439,0,-76,440,0,-1,596,0,-2,597,0,-3,598,0,-4,599,0,-5,600,0,-6,601,0,-7,602,0,-8,603,0,-9,604,0,-10,605,0,-11,606,0,-12,607,0,-13,608,0,-14,609,0,-15,610,0,-16,611,0,-17,612,0,-18,613,0,-19,614,0,-20,615,0,-21,616,0,-22,617,0,-23,618,0,-24,619,0,-25,620,0,-26,621,0,-27,622,0,-28,623,0,-29,624,0,-30,625,0,-31,626,0,-32,627,0,-33,628,0,-34,629,0,-35,630,0,-36,631,0,-37,632,0,-38,633,0,-39,634,0,-40,635,0,-41,636,0,-42,637,0,-43,638,0,-44,639,0,-45,640,0,-46,641,0,-47,642,0,-48,643,0,-49,644,0,-50,645,0,-51,646,0,-52,647,0,-53,648,0,-54,649,0,-55,650,0,-56,651,0,-57,652,0,-58,653,0,-59,654,0,-60,655,0,-61,656,0,-62,657,0,-63,658,0,-64,659,0,-65,660,0,-66,661,0,-67,662,0,-68,663,0,-69,664,0,-70,665,0,-71,666,0,-72,667,0,-73,668,0,-74,669,0,-75,670,0,-76,671,0,-1,827,0,-2,828,0,-3,829,0,-4,830,0,-5,831,0,-6,832,0,-7,833,0,-8,834,0,-9,835,0,-10,836,0,-11,837,0,-12,838,0,-13,839,0,-14,840,0,-15,841,0,-16,842,0,-17,843,0,-18,844,0,-19,845,0,-20,846,0,-21,847,0,-22,848,0,-23,849,0,-24,850,0,-25,851,0,-26,852,0,-27,853,0,-28,854,0,-29,855,0,-30,856,0,-31,857,0,-32,858,0,-33,859,0,-34,860,0,-35,861,0,-36,862,0,-37,863,0,-38,864,0,-39,865,0,-40,866,0,-41,867,0,-42,868,0,-43,869,0,-44,870,0,-45,871,0,-46,872,0,-47,873,0,-48,874,0,-49,875,0,-50,876,0,-51,877,0,-52,878,0,-53,879,0,-54,880,0,-55,881,0,-56,882,0,-57,883,0,-58,884,0,-59,885,0,-60,886,0,-61,887,0,-62,888,0,-63,889,0,-64,890,0,-65,891,0,-66,892,0,-67,893,0,-68,894,0,-69,895,0,-70,896,0,-71,897,0,-72,898,0,-73,899,0,-74,900,0,-75,901,0,-76,902,0,-1,1058,0,-2,1059,0,-3,1060,0,-4,95,0,-5,96,0,-6,97,0,-7,98,0,-8,99,0,-9,100,0,-10,101,0,-11,102,0,-12,103,0,-13,104,0,-14,105,0,-15,106,0,-16,107,0,-17,108,0,-18,109,0,-1,65,0,-2,11,0,-4,110,0,-5,111,0,-6,12,0,-7,22,0,-8,23,0,-9,24,0,2,11,0,2,11,0,2,11,0,2,11,0,2,11,0,6,94,0,6,94,0,6,94,0,0,11,0,4,11,0,2,12,0,2,12,0,20,112,0,6,56,0,6,56,0,6,56,0,6,56,0,25,113,0,0,12,0,5,12,0,-2,112,0,4,12,0,0,13,0,-1,116,0,-2,117,0,-3,118,0,-4,119,0,-5,120,0,0,14,0,0,14,0,21,63,0,0,14,0,-1,123,0,-2,124,0,-3,60,0,-1,65,0,-3,95,0,-4,96,0,-5,97,0,-6,98,0,-7,99,0,-8,100,0,-9,101,0,-10,102,0,-11,103,0,-12,104,0,-13,105,0,-14,106,0,-15,107,0,-16,108,0,-17,109,0,-18,110,0,-19,111,0,-21,22,0,-22,23,0,-23,24,0,-1,128,0,-2,62,0,-3,17,0,-4,64,0,-5,127,0,-6,1069,0,0,16,0,22,45,0,26,46,0,27,1068,0,28,130,0,0,16,0,-1,46,0,-2,45,0,-3,48,0,0,17,0,29,133,0,0,17,0,0,17,0,-1,132,0,-2,49,0,0,18,0,-1,25,0,-3,72,0,0,19,0,-1,26,0,-3,79,0,0,20,0,-1,27,0,-3,86,0,0,21,0,-1,28,0,-3,93,0,2,22,0,2,22,0,20,114,0,6,57,0,6,57,0,6,57,0,6,57,0,5,22,0,-2,114,0,4,22,0,2,23,0,2,23,0,20,115,0,6,58,0,6,58,0,6,58,0,6,58,0,5,23,0,-2,115,0,4,23,0,2,24,0,2,24,0,6,1065,0,2,24,0,6,1065,0,6,1066,0,2,24,0,6,1066,0,4,24,0,-1,134,0,-2,68,0,-3,69,0,-4,70,0,-5,71,0,-1,364,0,-2,75,0,-3,76,0,-4,77,0,-5,78,0,-1,595,0,-2,82,0,-3,83,0,-4,84,0,-5,85,0,-1,826,0,-2,89,0,-3,90,0,-4,91,0,-5,92,0,0,29,0,14,71,0,15,70,0,16,69,0,17,68,0,18,72,0,0,29,0,0,29,0,-1,66,0,0,30,0,14,78,0,15,77,0,16,76,0,17,75,0,18,79,0,0,30,0,0,30,0,-1,73,0,0,31,0,14,85,0,15,84,0,16,83,0,17,82,0,18,86,0,0,31,0,0,31,0,-1,80,0,0,32,0,14,92,0,15,91,0,16,90,0,17,89,0,18,93,0,0,32,0,0,32,0,-1,87,0,0,45,0,-2,1067,0,0,46,0,-1,121,0,-2,59,0,0,47,0,0,47,0,-1,61,0,-2,126,0,0,48,0,-2,131,0,0,49,0,0,49,0,22,1067,0,30,129,0,21,63,0,0,49,0,0,50,0,0,50,0,0,50,0,0,59,0,0,59,0,-1,122,0,0,60,0,0,60,0,-1,125,0,0,61,0,0,61,0,-1,129,0,-2,130,0,6,1057,0,6,1057,0,4,65,0,-1,67,0,-2,363,0,0,67,0,0,68,0,0,69,0,0,70,0,0,71,0,-1,74,0,-2,594,0,0,74,0,0,75,0,0,76,0,0,77,0,0,78,0,-1,441,0,-1,81,0,-2,825,0,0,81,0,0,82,0,0,83,0,0,84,0,0,85,0,-1,672,0,-1,88,0,-2,1056,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,-1,903,0,4,95,0,4,96,0,4,97,0,4,98,0,4,99,0,4,100,0,4,101,0,4,102,0,4,103,0,4,104,0,4,105,0,4,106,0,4,107,0,4,108,0,4,109,0,6,1061,0,6,1061,0,4,110,0,6,1062,0,6,1062,0,4,111,0,-1,113,0,0,113,0,-1,1063,0,-1,1064,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,-1,1070,0,-2,1071,0,0,128,0,-1,133,0,0,134,0,0,135,0,0,136,0,0,137,0,0,138,0,0,139,0,0,140,0,0,141,0,0,142,0,0,143,0,0,144,0,0,145,0,0,146,0,0,147,0,0,148,0,0,149,0,0,150,0,0,151,0,0,152,0,0,153,0,0,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,164,0,0,165,0,0,166,0,0,167,0,0,168,0,0,169,0,0,170,0,0,171,0,0,172,0,0,173,0,0,174,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,182,0,0,183,0,0,184,0,0,185,0,0,186,0,0,187,0,0,188,0,0,189,0,0,190,0,0,191,0,0,192,0,0,193,0,0,194,0,0,195,0,0,196,0,0,197,0,0,198,0,0,199,0,0,200,0,0,201,0,0,202,0,0,203,0,0,204,0,0,205,0,0,206,0,0,207,0,0,208,0,0,209,0,0,210,0,0,211,0,0,212,0,0,213,0,0,214,0,0,215,0,0,216,0,0,217,0,0,218,0,0,219,0,0,220,0,0,221,0,0,222,0,0,223,0,0,224,0,0,225,0,0,226,0,0,227,0,0,228,0,0,229,0,0,230,0,0,231,0,0,232,0,0,233,0,0,234,0,0,235,0,0,236,0,0,237,0,0,238,0,0,239,0,0,240,0,0,241,0,0,242,0,0,243,0,0,244,0,0,245,0,0,246,0,0,247,0,0,248,0,0,249,0,0,250,0,0,251,0,0,252,0,0,253,0,0,254,0,0,255,0,0,256,0,0,257,0,0,258,0,0,259,0,0,260,0,0,261,0,0,262,0,0,263,0,0,264,0,0,265,0,0,266,0,0,267,0,0,268,0,0,269,0,0,270,0,0,271,0,0,272,0,0,273,0,0,274,0,0,275,0,0,276,0,0,277,0,0,278,0,0,279,0,0,280,0,0,281,0,0,282,0,0,283,0,0,284,0,0,285,0,0,286,0,0,287,0,0,288,0,0,289,0,0,290,0,0,291,0,0,292,0,0,293,0,0,294,0,0,295,0,0,296,0,0,297,0,0,298,0,0,299,0,0,300,0,0,301,0,0,302,0,0,303,0,0,304,0,0,305,0,0,306,0,0,307,0,0,308,0,0,309,0,0,310,0,0,311,0,0,312,0,0,313,0,0,314,0,0,315,0,0,316,0,0,317,0,0,318,0,0,319,0,0,320,0,0,321,0,0,322,0,0,323,0,0,324,0,0,325,0,0,326,0,0,327,0,0,328,0,0,329,0,0,330,0,0,331,0,0,332,0,0,333,0,0,334,0,0,335,0,0,336,0,0,337,0,0,338,0,0,339,0,0,340,0,0,341,0,0,342,0,0,343,0,0,344,0,0,345,0,0,346,0,0,347,0,0,348,0,0,349,0,0,350,0,0,351,0,0,352,0,0,353,0,0,354,0,0,355,0,0,356,0,0,357,0,0,358,0,0,359,0,0,360,0,0,361,0,0,362,0,0,363,0,0,364,0,0,365,0,0,366,0,0,367,0,0,368,0,0,369,0,0,370,0,0,371,0,0,372,0,0,373,0,0,374,0,0,375,0,0,376,0,0,377,0,0,378,0,0,379,0,0,380,0,0,381,0,0,382,0,0,383,0,0,384,0,0,385,0,0,386,0,0,387,0,0,388,0,0,389,0,0,390,0,0,391,0,0,392,0,0,393,0,0,394,0,0,395,0,0,396,0,0,397,0,0,398,0,0,399,0,0,400,0,0,401,0,0,402,0,0,403,0,0,404,0,0,405,0,0,406,0,0,407,0,0,408,0,0,409,0,0,410,0,0,411,0,0,412,0,0,413,0,0,414,0,0,415,0,0,416,0,0,417,0,0,418,0,0,419,0,0,420,0,0,421,0,0,422,0,0,423,0,0,424,0,0,425,0,0,426,0,0,427,0,0,428,0,0,429,0,0,430,0,0,431,0,0,432,0,0,433,0,0,434,0,0,435,0,0,436,0,0,437,0,0,438,0,0,439,0,0,440,0,0,441,0,0,442,0,0,443,0,0,444,0,0,445,0,0,446,0,0,447,0,0,448,0,0,449,0,0,450,0,0,451,0,0,452,0,0,453,0,0,454,0,0,455,0,0,456,0,0,457,0,0,458,0,0,459,0,0,460,0,0,461,0,0,462,0,0,463,0,0,464,0,0,465,0,0,466,0,0,467,0,0,468,0,0,469,0,0,470,0,0,471,0,0,472,0,0,473,0,0,474,0,0,475,0,0,476,0,0,477,0,0,478,0,0,479,0,0,480,0,0,481,0,0,482,0,0,483,0,0,484,0,0,485,0,0,486,0,0,487,0,0,488,0,0,489,0,0,490,0,0,491,0,0,492,0,0,493,0,0,494,0,0,495,0,0,496,0,0,497,0,0,498,0,0,499,0,0,500,0,0,501,0,0,502,0,0,503,0,0,504,0,0,505,0,0,506,0,0,507,0,0,508,0,0,509,0,0,510,0,0,511,0,0,512,0,0,513,0,0,514,0,0,515,0,0,516,0,0,517,0,0,518,0,0,519,0,0,520,0,0,521,0,0,522,0,0,523,0,0,524,0,0,525,0,0,526,0,0,527,0,0,528,0,0,529,0,0,530,0,0,531,0,0,532,0,0,533,0,0,534,0,0,535,0,0,536,0,0,537,0,0,538,0,0,539,0,0,540,0,0,541,0,0,542,0,0,543,0,0,544,0,0,545,0,0,546,0,0,547,0,0,548,0,0,549,0,0,550,0,0,551,0,0,552,0,0,553,0,0,554,0,0,555,0,0,556,0,0,557,0,0,558,0,0,559,0,0,560,0,0,561,0,0,562,0,0,563,0,0,564,0,0,565,0,0,566,0,0,567,0,0,568,0,0,569,0,0,570,0,0,571,0,0,572,0,0,573,0,0,574,0,0,575,0,0,576,0,0,577,0,0,578,0,0,579,0,0,580,0,0,581,0,0,582,0,0,583,0,0,584,0,0,585,0,0,586,0,0,587,0,0,588,0,0,589,0,0,590,0,0,591,0,0,592,0,0,593,0,0,594,0,0,595,0,0,596,0,0,597,0,0,598,0,0,599,0,0,600,0,0,601,0,0,602,0,0,603,0,0,604,0,0,605,0,0,606,0,0,607,0,0,608,0,0,609,0,0,610,0,0,611,0,0,612,0,0,613,0,0,614,0,0,615,0,0,616,0,0,617,0,0,618,0,0,619,0,0,620,0,0,621,0,0,622,0,0,623,0,0,624,0,0,625,0,0,626,0,0,627,0,0,628,0,0,629,0,0,630,0,0,631,0,0,632,0,0,633,0,0,634,0,0,635,0,0,636,0,0,637,0,0,638,0,0,639,0,0,640,0,0,641,0,0,642,0,0,643,0,0,644,0,0,645,0,0,646,0,0,647,0,0,648,0,0,649,0,0,650,0,0,651,0,0,652,0,0,653,0,0,654,0,0,655,0,0,656,0,0,657,0,0,658,0,0,659,0,0,660,0,0,661,0,0,662,0,0,663,0,0,664,0,0,665,0,0,666,0,0,667,0,0,668,0,0,669,0,0,670,0,0,671,0,0,672,0,0,673,0,0,674,0,0,675,0,0,676,0,0,677,0,0,678,0,0,679,0,0,680,0,0,681,0,0,682,0,0,683,0,0,684,0,0,685,0,0,686,0,0,687,0,0,688,0,0,689,0,0,690,0,0,691,0,0,692,0,0,693,0,0,694,0,0,695,0,0,696,0,0,697,0,0,698,0,0,699,0,0,700,0,0,701,0,0,702,0,0,703,0,0,704,0,0,705,0,0,706,0,0,707,0,0,708,0,0,709,0,0,710,0,0,711,0,0,712,0,0,713,0,0,714,0,0,715,0,0,716,0,0,717,0,0,718,0,0,719,0,0,720,0,0,721,0,0,722,0,0,723,0,0,724,0,0,725,0,0,726,0,0,727,0,0,728,0,0,729,0,0,730,0,0,731,0,0,732,0,0,733,0,0,734,0,0,735,0,0,736,0,0,737,0,0,738,0,0,739,0,0,740,0,0,741,0,0,742,0,0,743,0,0,744,0,0,745,0,0,746,0,0,747,0,0,748,0,0,749,0,0,750,0,0,751,0,0,752,0,0,753,0,0,754,0,0,755,0,0,756,0,0,757,0,0,758,0,0,759,0,0,760,0,0,761,0,0,762,0,0,763,0,0,764,0,0,765,0,0,766,0,0,767,0,0,768,0,0,769,0,0,770,0,0,771,0,0,772,0,0,773,0,0,774,0,0,775,0,0,776,0,0,777,0,0,778,0,0,779,0,0,780,0,0,781,0,0,782,0,0,783,0,0,784,0,0,785,0,0,786,0,0,787,0,0,788,0,0,789,0,0,790,0,0,791,0,0,792,0,0,793,0,0,794,0,0,795,0,0,796,0,0,797,0,0,798,0,0,799,0,0,800,0,0,801,0,0,802,0,0,803,0,0,804,0,0,805,0,0,806,0,0,807,0,0,808,0,0,809,0,0,810,0,0,811,0,0,812,0,0,813,0,0,814,0,0,815,0,0,816,0,0,817,0,0,818,0,0,819,0,0,820,0,0,821,0,0,822,0,0,823,0,0,824,0,0,825,0,0,826,0,0,827,0,0,828,0,0,829,0,0,830,0,0,831,0,0,832,0,0,833,0,0,834,0,0,835,0,0,836,0,0,837,0,0,838,0,0,839,0,0,840,0,0,841,0,0,842,0,0,843,0,0,844,0,0,845,0,0,846,0,0,847,0,0,848,0,0,849,0,0,850,0,0,851,0,0,852,0,0,853,0,0,854,0,0,855,0,0,856,0,0,857,0,0,858,0,0,859,0,0,860,0,0,861,0,0,862,0,0,863,0,0,864,0,0,865,0,0,866,0,0,867,0,0,868,0,0,869,0,0,870,0,0,871,0,0,872,0,0,873,0,0,874,0,0,875,0,0,876,0,0,877,0,0,878,0,0,879,0,0,880,0,0,881,0,0,882,0,0,883,0,0,884,0,0,885,0,0,886,0,0,887,0,0,888,0,0,889,0,0,890,0,0,891,0,0,892,0,0,893,0,0,894,0,0,895,0,0,896,0,0,897,0,0,898,0,0,899,0,0,900,0,0,901,0,0,902,0,0,903,0,0,904,0,0,905,0,0,906,0,0,907,0,0,908,0,0,909,0,0,910,0,0,911,0,0,912,0,0,913,0,0,914,0,0,915,0,0,916,0,0,917,0,0,918,0,0,919,0,0,920,0,0,921,0,0,922,0,0,923,0,0,924,0,0,925,0,0,926,0,0,927,0,0,928,0,0,929,0,0,930,0,0,931,0,0,932,0,0,933,0,0,934,0,0,935,0,0,936,0,0,937,0,0,938,0,0,939,0,0,940,0,0,941,0,0,942,0,0,943,0,0,944,0,0,945,0,0,946,0,0,947,0,0,948,0,0,949,0,0,950,0,0,951,0,0,952,0,0,953,0,0,954,0,0,955,0,0,956,0,0,957,0,0,958,0,0,959,0,0,960,0,0,961,0,0,962,0,0,963,0,0,964,0,0,965,0,0,966,0,0,967,0,0,968,0,0,969,0,0,970,0,0,971,0,0,972,0,0,973,0,0,974,0,0,975,0,0,976,0,0,977,0,0,978,0,0,979,0,0,980,0,0,981,0,0,982,0,0,983,0,0,984,0,0,985,0,0,986,0,0,987,0,0,988,0,0,989,0,0,990,0,0,991,0,0,992,0,0,993,0,0,994,0,0,995,0,0,996,0,0,997,0,0,998,0,0,999,0,0,1000,0,0,1001,0,0,1002,0,0,1003,0,0,1004,0,0,1005,0,0,1006,0,0,1007,0,0,1008,0,0,1009,0,0,1010,0,0,1011,0,0,1012,0,0,1013,0,0,1014,0,0,1015,0,0,1016,0,0,1017,0,0,1018,0,0,1019,0,0,1020,0,0,1021,0,0,1022,0,0,1023,0,0,1024,0,0,1025,0,0,1026,0,0,1027,0,0,1028,0,0,1029,0,0,1030,0,0,1031,0,0,1032,0,0,1033,0,0,1034,0,0,1035,0,0,1036,0,0,1037,0,0,1038,0,0,1039,0,0,1040,0,0,1041,0,0,1042,0,0,1043,0,0,1044,0,0,1045,0,0,1046,0,0,1047,0,0,1048,0,0,1049,0,0,1050,0,0,1051,0,0,1052,0,0,1053,0,0,1054,0,0,1055,0,0,1056,0,0,1058,0,0,1059,0,0,1060,0,0,1063,0,0,1064,0,0,1070,0,0,1071,0,31,15,1,5,18,2,5,19,3,5,20,4,5,21,5,5,18,6,5,19,7,5,20,8,5,21,9,5,10,10,5,64,13,5,45,14,5,16,16,5,17,18,5,67,19,5,74,20,5,81,21,5,88,47,5,48,50,5,72,63,0,64,130,32,131,1068,0,1069,2157],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[7,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,12,-1,1,-1,1,19,-1,12,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,12,-1,1,-1,1,19,-1,12,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,12,-1,1,-1,1,19,-1,12,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,12,-1,1,-1,1,19,-1,12,2,7,2,2,2,2,2,2,2,2,2,-1,1,-1,1,-1,1,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,-1,-2,-3,-4,1,2,2,2,2,2,2,7,-1,-2,-3,-4,1,2,2,2,2,2,2,7,-1,-2,-3,-4,1,2,2,2,2,2,2,7,2,2,2,2,2,2,2,2,2,10,10,10,10,10,10,23,10,10,10,23,10,-1,12,10,10,10,24,24,33,34],[195,5,22,5,23,5,24,5,25,5,26,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,4,93,94,95,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,1,0,4,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,16,16,2,96,2,97,98,17,17,5,22,5,23,5,24,5,25,5,26,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,4,93,94,95,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,1,0,4,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,16,16,2,96,2,97,98,17,17,5,22,5,23,5,24,5,25,5,26,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,4,93,94,95,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,1,0,4,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,16,16,2,96,2,97,98,17,17,5,22,5,23,5,24,5,25,5,26,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,4,93,94,95,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,4,0,1,0,1,0,1,0,4,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,16,16,2,96,2,97,98,17,17,99,20,99,107,107,99,99,19,19,196,197,198,199,200,201,202,203,6,2,108,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,108,2,109,2,109,2,20,101,102,103,104,105,21,2,19,18,18,100,20,101,102,103,104,105,21,2,19,18,18,100,20,101,102,103,104,105,21,2,19,18,18,100,20,21,2,19,110,18,100,2,110,21,204,111,205,111,206,112,113,114,112,207,113,114,115,115,208,209,210,211,212,213,214]],[[[6,".bin",1380871301,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":12,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.60087251663208,0,-5.46927547454834],"maxPosition",8,[1,4.050391674041748,3.958040952682495,6.5]]],-1],0,0,[],[],[]],[[[6,".bin",2135193732,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26304,"length":8796,"count":2199,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26304,"count":548,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9039103388786316,0.004530000034719706,-0.9178241491317749],"maxPosition",8,[1,0.89805668592453,2.4078049659729004,0.7977915406227112]]],-1],0,0,[],[],[]],[[{"name":"meter2","rect":{"x":1,"y":0,"width":798,"height":398},"offset":{"x":0,"y":1},"originalSize":{"width":800,"height":400},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[11],[215]],[[[25,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"metallic":0.3},"mainColor",8,[4,4283552050],"emissive",8,[4,4282992969]],{},{}],11,0,0]]],0,0,[0],[3],[3]],[[[16,"Material #119",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0},"mainColor",8,[4,4292857029],"albedoScale",8,[1,1,1,1],"emissive",8,[2,0,0,0,1]]],11]]],0,0,[0],[3],[3]],[[[6,".bin",3483839656,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":912,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2064,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":912,"count":38,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]},{"view":{"offset":1488,"length":576,"count":24,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,-0.06304106116294861,-0.5591291785240173,-0.06304106116294861],"maxPosition",8,[1,0.06304106116294861,0.5591291785240173,0.06304106116294861]]],-1],0,0,[],[],[]],[[[16,"Material #118",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0,"roughness":0},"mainColor",8,[4,4289239700],"albedoScale",8,[1,1,1,1],"emissive",8,[2,0,0,0,1]]],11]]],0,0,[0],[3],[3]]]]
