[1,["967pEAU49Ek71RtCQ3uksK","1etaduXFVPeb2mkwvj2NIN@56d31","1etaduXFVPeb2mkwvj2NIN@1d18e","1etaduXFVPeb2mkwvj2NIN@a88f6","1etaduXFVPeb2mkwvj2NIN@c2762","30l6wRL65EpaHG5TcDxuUA","12Y9dMgWdJKJGmTiZyQR9H@fc873","12Y9dMgWdJKJGmTiZyQR9H@a804a","6beAYzj0dFSKMNA5Hmd25W","6cHQzrvxlCdL0GNU9dAH2C","7euXHV9pNI1rAQxybOiyBj@1e57b","00FYiMbj1KD403DZWs9k9w","8f+gzlIPRAXKf16KDBJesN","8beIpqzCRKhpireq+tmIlO","a3F8gkvtVCZ4Mr9jdViajt","90fN+R3BZNRq0CvtEP4Aux","03AtbseltMBaODeDZ5IFtB","64dUha2KdB1rufLiIo80XC","0678F7aMZK97xXvSs+/dyx","edqQe6HhFOfonUO6/+m7ma","07pJweYaFLHKCgPN4JP1vD@f57c1","07pJweYaFLHKCgPN4JP1vD@438fe","1etaduXFVPeb2mkwvj2NIN@e2349","1etaduXFVPeb2mkwvj2NIN@80c75","1etaduXFVPeb2mkwvj2NIN@ff8ed","1etaduXFVPeb2mkwvj2NIN@6da96","1etaduXFVPeb2mkwvj2NIN@0c841","1etaduXFVPeb2mkwvj2NIN@44b97","1etaduXFVPeb2mkwvj2NIN@b46eb","1etaduXFVPeb2mkwvj2NIN@b05e6","1etaduXFVPeb2mkwvj2NIN@b7142","5cLansedhDdJ2s4zKkuNgx","b4yIsUQOxO0IlGGpnpPlGx","68CJGEeFNPsICA1nf5owrM@7598f","68CJGEeFNPsICA1nf5owrM@8a6b5","68CJGEeFNPsICA1nf5owrM@39b7c","42ilDlklJKmaoqkmIb2zPB@3e9cc","1brw/JvvpFnIvdrxpFCgMZ","a7YStUNeNCOKGpSntUY1g5","79y5iO4AlCu58IAp/0MY4l@4379c","adVma0LRJBQ7S5Uztyc9Cv","12Y9dMgWdJKJGmTiZyQR9H@2e76e","5cr1N5fRdEWro8AFPBS1aO","42ilDlklJKmaoqkmIb2zPB@dbac2","ec+hIws2pKYr8ZyOegbeWV","21eNfdjDBBKpvkx51BHa5+","a9VovhGgtELotJQJgEmko8","d9tmB4Tu1HfKxlhzuRwTNQ","d3x4IMKphEKYvHuEU7yaxB","641H7aSmVPXqlnAS/j+QNb@6c48a","d1NGQ2rJZCcbhjH0/erZWw","b18n+uWEdEOrbgwW7LccVi","3e0eYSmGNJrLJBaASQKmTH@6c48a","f0HoOqFTFJqLAfwRKyA0Pd","51NXRLEJJFKaRuD3cynwRK","68CJGEeFNPsICA1nf5owrM@1dcb4","68CJGEeFNPsICA1nf5owrM@13f99","68CJGEeFNPsICA1nf5owrM@87456","68CJGEeFNPsICA1nf5owrM@9c123","68CJGEeFNPsICA1nf5owrM@538ca","68CJGEeFNPsICA1nf5owrM@84b9c","68CJGEeFNPsICA1nf5owrM@850f6","68CJGEeFNPsICA1nf5owrM@91d15","68CJGEeFNPsICA1nf5owrM@0fc45","68CJGEeFNPsICA1nf5owrM@f6530","68CJGEeFNPsICA1nf5owrM@52b4b","68CJGEeFNPsICA1nf5owrM@7f784","8aGWRa5FlIiJENGV7mcYQk","21dvJArRpPEbl7G0lOc+jd@f9941","6axlB+a5xDza5V5/iNjZKV@6c48a","50InfkYPBMYpz/sMwSo62V@cf5ee","73AJtWifNIzo/eHtdZxaAF@6c48a","d3d0gR/+5LdKhYwq+jFk/g","c6qBuI4BVMhaAUIT4fvP7X","feT4AqmZlCwpgn/F/tFYys","a2/AKqxttIs7HTiYiI0Oip","eaR4LKqmlNkpOFR6+uAeK+@1f586","21dvJArRpPEbl7G0lOc+jd@6c48a","13XkYBRCdL0rfY+znIUaWZ@6c48a","42ilDlklJKmaoqkmIb2zPB@0a1ef","42ilDlklJKmaoqkmIb2zPB@05da8","42ilDlklJKmaoqkmIb2zPB@c2762","42ilDlklJKmaoqkmIb2zPB@554c7","42ilDlklJKmaoqkmIb2zPB@c4192","42ilDlklJKmaoqkmIb2zPB@575aa","42ilDlklJKmaoqkmIb2zPB@5003a","42ilDlklJKmaoqkmIb2zPB@1dcb4","42ilDlklJKmaoqkmIb2zPB@13f99","42ilDlklJKmaoqkmIb2zPB@87456","42ilDlklJKmaoqkmIb2zPB@538ca","42ilDlklJKmaoqkmIb2zPB@84b9c","42ilDlklJKmaoqkmIb2zPB@850f6","42ilDlklJKmaoqkmIb2zPB@91d15","42ilDlklJKmaoqkmIb2zPB@f6530","42ilDlklJKmaoqkmIb2zPB@52b4b","42ilDlklJKmaoqkmIb2zPB@08c68","42ilDlklJKmaoqkmIb2zPB@a5f8b","42ilDlklJKmaoqkmIb2zPB@c1084","42ilDlklJKmaoqkmIb2zPB@2f6d1","42ilDlklJKmaoqkmIb2zPB@40935","170EdS1SVC4pT+Pmh8H5dG@6c48a","56JN0EXPBJ6JTeaL3p/fs9@6c48a","5a2KQwaspLQKdFXcnf+xgU@7d6ab","5a2KQwaspLQKdFXcnf+xgU@5c108","5a2KQwaspLQKdFXcnf+xgU@88b23","cbUkEPzbxJQqSDcl52dXHE","85NO3bnO1MdaGiBgkem5c2@6c48a","41qGTAK/hOjIf63bSYcNPr@6c48a","79y5iO4AlCu58IAp/0MY4l@5c108","79y5iO4AlCu58IAp/0MY4l@bbd92","79y5iO4AlCu58IAp/0MY4l@7d6ab","7dj5uJT9FMn6OrOOx83tfK@6c48a","25HBoRdRNNGZM5pJp5E5bv@6c48a","98MSuty7RNG5zIPTvnvGm7@6c48a","9cZ2aO5Z5JiKkaiB2jskcL@6c48a","7dj5uJT9FMn6OrOOx83tfK@f9941","14V09SeIFIq74kebb23yK/@a550e","97W/bGjEFA3phTJH0OTmfD@2bb83","97W/bGjEFA3phTJH0OTmfD@1e47e","97W/bGjEFA3phTJH0OTmfD@5754e","97W/bGjEFA3phTJH0OTmfD@ead62","97W/bGjEFA3phTJH0OTmfD@ce148","97W/bGjEFA3phTJH0OTmfD@c6a9b","97W/bGjEFA3phTJH0OTmfD@055e6","97W/bGjEFA3phTJH0OTmfD@9d283","97W/bGjEFA3phTJH0OTmfD@b9c63","49s64AkOpGsb3Q9hwGPLzr","5a2KQwaspLQKdFXcnf+xgU@9b2da","9cZ2aO5Z5JiKkaiB2jskcL@f9941","bcPtjLYhFA5YIlG2cRdepI@f9941","98MSuty7RNG5zIPTvnvGm7@f9941","ac3Ajh8O5C25mVv/kBR/Pl@f9941","56JN0EXPBJ6JTeaL3p/fs9@f9941","d5uRlqbmJNoL/dr2wXI91d@f9941","cdVz2ta49NT74mWjOGfUZ5@f9941","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","bfWrRK7BlE9Ihj4w9n1uSG","d7TKupzbRB+Iofw5lQH+uk","f0PcjIMUlJIJHfVWdtweCg","419B1g6GJKAaRGK5ipIJjn","1fElzd6idLAZthYzkrr81w","c52Ek9sbxMNoeqXBV3Qe0W","2drJHcHvlC9Kq/dh/NVZEw","feKsK2vJtFYowJcNbaW0N6","dafORWS25F9IE2lTTSyYdg","ac3Ajh8O5C25mVv/kBR/Pl@6c48a","7dwz2cNX1PRJIw8w1WEbxS","855HqRA5ZCj6UTDb0EGCGJ","bcPtjLYhFA5YIlG2cRdepI@6c48a","cdVz2ta49NT74mWjOGfUZ5@6c48a","d5uRlqbmJNoL/dr2wXI91d@6c48a"],["node","_mesh","_parent","value","root","asset","_skeleton","_effectAsset","mainTexture","_spriteFrame","_textureSource","_clip","data","_particleSystem","_mainTexture","_defaultClip","car_Top","_file","GameController","baseColorMap","donePoint","Down_turnleftPoint","turnRightPoint","turnLeftPoint","unlockHiddenCarSound","LoadCustomer","Impact","Happy","carMoveToPlace","carExit","clickSound","bgSound","_cameraComponent","Cam3D","UIGameController","spawnPos","scene","QueueLabel","customer","_envmapHDR","_envmapLDR","_font"],[["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_parent","_components","_lpos","_children","_lscale","_lrot","_euler","_prefab"],-3,1,9,5,2,5,5,5,4],"cc.ImageAsset","cc.SpriteFrame",["cc.Node",["_name","_id","_parent","_components","_lrot","_euler","_prefab","_lpos","_children","_lscale"],1,1,2,5,5,4,5,9,5],["cc.MeshRenderer",["_name","_enabled","_shadowCastingMode","node","_materials","lightmapSettings","_mesh","__prefab"],0,1,3,4,6,4],["cc.CurveRange",["mode","constantMin","constantMax","constant","spline"],-1,4],["cc.RealKeyframeValue",["rightTangent","leftTangent","interpolationMode","rightTangentWeight","leftTangentWeight","value"],-3],["cc.Node",["_name","_layer","_id","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],0,12,1,5,2,5,5,5],["cc.Material",["_states","_defines","_techIdx","_name","_props"],-1,12],["cc.GradientRange",["_mode","gradient","color"],2,4,5],["cc.ShapeModule",["_enable","_shapeType","radius","radiusThickness","emitFrom","arcSpeed","_scale"],-2,4,5],["cc.RigidBody",["_group","_mass","_type","node","_angularFactor"],0,1,5],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color"],2,1,6,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","removedComponents"],1,9,9],"cc.TextureCube",["cc.Prefab",["_name"],2],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["cc.SkinnedMeshRenderer",["node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton","__prefab"],3,1,3,4,1,6,6,4],["cc.Material",["_props","_defines","_states"],0],["cc.Mesh",["_hash","_native","_struct"],1,11],["cc.Gradient",["alphaKeys","colorKeys"],3,9,9],["cc.AlphaKey",["alpha","time"],1],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.ForceOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.RotationOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.ParticleSystemRenderer",["_renderMode","_velocityScale","_lengthScale","_mainTexture"],0,6],["cc.BoxCollider",["node","_center","_size"],3,1,5,5],["cc.Camera",["_priority","_visibility","_projection","_orthoHeight","_far","_clearFlags","node","_color"],-3,1,5],["cc.AudioSource",["_playOnAwake","_loop","_volume","node"],0,1],["cc.Node",["_name","_children","_components","_prefab","_lrot","_lscale","_euler"],2,2,2,4,5,5,5],["cc.SkeletalAnimation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["ebb54xiAR9FgbPyztrQpOb7",["node","__prefab","CustomerColors"],3,1,4,2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.ModelLightmapSettings",[],3],["cc.MeshRenderer",["_materials","node","lightmapSettings","_mesh"],2,1,4,6],["cc.Material",["_defines","_states","_props"],2,12,12],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.ParticleSystem",["duration","_simulationSpace","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],1,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ParticleSystem",["duration","loop","playOnAwake","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],0,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.ColorKey",["time"],2],["cc.RealCurve",["_times","_values"],2,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleAsset",["_name","_native"],1],["cc.SceneAsset",["_name"],2],["1922fOJWDZMRp4O0GKv7em2",["node","turnLeftPoint","turnRightPoint","Down_turnleftPoint","donePoint","CarStops"],3,1,1,1,1,1,2],["09628Cevr1CG7Vq9qwaq0pk",["node"],3,1],["87bdcj1WRNLPYZcpKUtqk8s",["CarColor","CarStyle","node","car_Top"],1,1,1],["6b3313nS1VKCLCVaB9Df1SK",["node","bgSound","clickSound","carExit","carMoveToPlace","Happy","Impact","LoadCustomer","unlockHiddenCarSound"],3,1,1,1,1,1,1,1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_type","_enabled","_pcf","_shadowColor","_size"],0,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","_top","_bottom","node"],0,1],["f0056d7ivJEIK4YtBjsByxC",["node"],3,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["d9990GYYyVHk7xqiY++3LYe",["node","Cam3D","Canvas","target3D"],3,1,1,1,1],["f6c022SKolJ0LFO1LunLlqP",["node","UIGameController","GameController","Cam_3D"],3,1,1,1,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.PlaneCollider",["node"],3,1],["cc.LabelOutline",["_width","node"],2,1],["807943GWgZJ+qmn8na567+2",["node"],3,1],["eae0aGAa2xB+78k4FQWX5Oc",["node","Camera3D","Canvas","TouchArea","QueuePopup","Tut_1","CTA","CTA_btn"],3,1,1,1,1,1,1,1,1],["9aa2eHF0CNMMaktDBvyAFOG",[],3],["cb2b8yS1oVPBrEtpBOl+Z+I",["node","spawnPos","posStops","customer"],3,1,1,2,6],["cc.ParticleSystem2D",["emissionRate","life","lifeVar","angle","angleVar","startSize","startSizeVar","endSize","speed","speedVar","tangentialAccel","_custom","_totalParticles","_positionType","node","posVar","_startColor","_startColorVar","_endColor","_file","_spriteFrame"],-11,1,5,5,5,5,6,6],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","node","_color","_staticSettings"],1,1,5,4],["cc.StaticLightSettings",[],3],["cc.Label",["_string","_actualFontSize","_fontFamily","_isSystemFontUsed","node"],-1,1],["ff71eoWlMBIfr8Nb2N1UV2l",["node","UIGameController"],3,1,1],["cc.Burst",["count"],3,4],["cc.TTFFont",["_name","_native"],1]],[[37,1],[0,0,6,7,2],[4,3,4,5,6,1],[58,0,2],[75,0,1,2,2],[4,0,3,4,5,6,2],[4,2,3,4,5,6,2],[0,0,9,2],[0,0,2,6,9,3],[0,0,6,7,8,11,10,12,2],[73,0,1,2,2],[36,0,1,2,3,2],[0,4,5,6,13,3],[74,0,1,2,3],[71,0,1,2,3],[14,0,2,3,2],[0,0,6,9,2],[5,1],[14,0,2,2],[0,0,6,9,8,11,12,2],[72,0,1,2,2],[0,0,9,7,2],[20,1,0,2,3],[38,0,1,2,3,2],[17,0,1,2,2],[18,0,1,2,3,4,5,1],[0,0,2,6,7,3],[0,0,6,7,8,10,2],[29,0,1,2,1],[0,0,6,8,2],[3,0,2,8,7,4,5,2],[0,0,2,6,7,8,11,10,12,3],[11,0,3,2],[67,0,1],[34,0,2],[5,3,2],[0,0,6,9,7,8,10,2],[4,3,7,4,5,6,1],[0,0,6,9,7,8,11,10,12,2],[0,0,2,6,9,8,11,10,12,3],[8,0,1,4,3],[9,1],[5,0,1,2,4],[5,0,4,2],[22,0,1,3],[47,0,1,2],[12,0,1],[0,0,6,9,13,8,11,12,2],[0,0,6,7,13,8,11,10,12,2],[0,0,6,7,8,11,12,2],[6,2,5,3],[12,0,1,1],[0,0,2,6,7,13,3],[0,0,6,7,13,8,2],[0,0,2,9,8,3],[0,0,6,7,11,10,12,2],[3,0,2,3,2],[18,0,6,1,2,3,4,5,1],[42,0,1,2,4],[0,0,9,8,2],[31,0,3,2],[0,0,6,9,7,2],[0,0,6,7,8,2],[11,0,2,3,3],[0,0,6,13,8,2],[3,0,2,8,6,7,4,5,2],[4,0,1,3,4,5,6,3],[9,0,1,2],[45,0,1,2],[48,0,1,2,3,1],[49,0,1,2,3,4,1],[29,0,1],[0,0,1,6,9,7,3],[0,0,6,9,8,2],[8,2,0,1,4,4],[8,3,0,1,4,4],[44,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,4],[21,0,1],[23,0,1,2,3,4,2],[24,1,2,3,1],[26,1,2,3,1],[28,3,1],[87,0,1],[16,0,2],[16,1],[0,0,9,13,2],[0,0,1,6,7,3],[41,0,1,2,4],[5,0,2,3],[6,2,0,3,1,4,6],[6,2,5,0,3,1,4,7],[25,2,3,4,5,1],[27,4,5,1],[11,0,1,3,4,3],[53,0,1],[54,0,1,2,3,3],[68,0,1,2,3,2],[13,1,2,1],[13,1,3,2,1],[82,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,15],[0,0,6,7,13,8,11,12,2],[0,0,1,6,9,7,8,10,3],[0,0,1,6,7,8,10,3],[0,0,1,6,7,8,3],[3,0,2,3,6,4,5,2],[19,0,2,1,4],[20,0,2,2],[10,0,1,2,3,5,5],[10,4,5,2],[6,2,0,1,4],[6,0,3,1,4,5],[6,5,0,3,1,4,6],[25,0,1,2,3,4,5,3],[27,0,1,2,3,4,5,5],[13,0,1,3,2,2],[0,0,9,7,13,11,10,12,2],[0,0,6,7,13,11,10,12,2],[0,0,6,7,13,8,10,2],[0,0,9,8,10,2],[0,0,3,9,7,3],[0,0,1,3,6,9,7,8,4],[0,0,2,1,6,9,7,4],[0,0,1,9,7,8,10,3],[0,4,5,13,3],[0,0,1,6,7,8,11,10,12,3],[0,0,2,6,9,8,10,3],[0,0,1,6,7,10,3],[0,0,3,6,7,11,12,3],[0,0,3,6,9,3],[0,0,2,6,7,8,3],[0,0,6,8,11,10,12,2],[0,0,3,6,7,3],[3,0,3,6,4,5,2],[3,0,2,3,7,2],[3,0,1,2,3,3],[3,0,2,3,6,7,4,9,5,2],[7,0,1,4,6,3,3],[7,0,1,3,5,7,3],[7,0,2,4,3,5,8,9,3],[32,0,1,2,3,4,5,6,2],[33,0,1,2,3,4,2],[35,0,1,2,1],[17,0,3,4,2],[4,0,3,7,4,5,6,2],[19,0,1,3],[39,0,1,2,2],[40,0,1,2,3,4],[43,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,3],[9,2,1],[5,0,1,3],[21,1,0,1],[46,0,2],[22,0,2],[10,0,1,5,6,3],[23,1,2,3,4,1],[24,0,1,2,3,2],[26,0,1,2,3,2],[28,0,1,2,3,4],[50,0,1,3],[51,0,2],[52,0,1,2,3,4,5,1],[55,0,1,2,3,4,5,6,7,8,1],[56,0,1,2,3,2],[57,0,1,2,3,4,2],[59,0,1,2,3,4,1],[60,0,1,2,3,4,2],[61,0,1,2,3,4,4],[62,0,1,2,2],[63,1],[64,1],[12,0,1,2,1],[65,0,1,1],[66,0,1,2,3,4],[69,0,1,2,3,1],[30,0,1,3],[30,2,0,3,4,5,1,6,7,7],[70,0,1,2,3,1],[14,0,1,2,3],[76,0,1],[77,0,1,2],[78,0,1],[79,0,1,2,3,4,5,6,7,1],[80,1],[81,0,1,2,3,1],[83,0,1,2,3,4,3],[84,1],[85,0,1,2,3,4,5],[86,0,1,1],[31,1,0,2,3,4],[88,0,1,3]],[[[[83,"Stick_Customer"],[115,"Stick_Customer",[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21],[[140,true,-2,[34,"b7X9P/ZXhEiaKzyWYRNx9H"],[26,27,28],29],[141,-11,[34,"d9vvMA4M5OEYECDdsMLZqr"],[-3,-4,-5,-6,-7,-8,-9,-10]]],[24,"a5V4sYW6tC26fEyxts/NBS",-1,0],[3,0,1,0,6.123233995736766e-17],[1,0.8,0.8,0.8],[1,0,180,0]],[47,"Root_M",1,[-22,-23,-24],[24,"f4c/IdttVDOJJPd4p3a1Yb",1,0],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[47,"Chest_M",2,[-25,-26,-27],[24,"c9SMrJe6tM5phZQwggiVXQ",1,0],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[52,"Red",false,1,[[57,-28,[34,"82oZaEkEdEHK+5LT+quDui"],[0],[0],1,1,2]],[24,"e7beZ4lplEmbBf9iZUd5l4",1,0]],[52,"Blue",false,1,[[57,-29,[34,"00ha6w3q5DG7i47AE472R9"],[3],[0],1,4,5]],[24,"9dd14Yyz1DsYeYUSDgg85I",1,0]],[52,"Green",false,1,[[57,-30,[34,"0fPYu9ggxG2b7STLjvXG6k"],[6],[0],1,7,8]],[24,"f1ZuWKBA1GWZFuApdBp8u8",1,0]],[52,"Pink",false,1,[[57,-31,[34,"d2p8aE815Eo44j5tejfkUP"],[9],[0],1,10,11]],[24,"53ao62vTtCSr3raeDOX1yv",1,0]],[52,"Purple",false,1,[[57,-32,[34,"f70d3BtURFWIh0MGZ0rtml"],[12],[0],1,13,14]],[24,"9ffk4QlR9N7rFVpCOHN8pP",1,0]],[52,"Orange",false,1,[[57,-33,[34,"d1GFhDNWBAHZsI/KKSP68K"],[15],[0],1,16,17]],[24,"6eEIOz/dtDv4t9UeyLK2/z",1,0]],[52,"Yellow",false,1,[[57,-34,[34,"0bU+bQdIlHVIDsz+OJsA62"],[20],[0],1,21,22]],[24,"64o0+4SjdAgLiipzfZ7kUl",1,0]],[52,"Blue_light",false,1,[[57,-35,[34,"28JNaDd95BzZSgkhh/3swL"],[23],[0],1,24,25]],[24,"99I05tm/pNrZgmr514SfbC",1,0]],[47,"Hip_R",2,[-36],[24,"a5cdDal19Bnq2qUw3Ut15c",1,0],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[65,"Knee_R",12,[[64,"Ankle_R",-37,[24,"f5hsBUWgBBXafybwbVZHkY",1,0],[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[24,"03H29lCS5ACrQ1Sao0hBuo",1,0],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[47,"Neck_M",3,[-38],[24,"1a4CCp+zFLt7RewLS6J127",1,0],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[65,"Head_M",14,[[64,"HeadEnd_M",-39,[24,"8fmaKNeBFEn50jN1t23mNf",1,0],[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[24,"c0AwJXS8xCa7FUv544nfh+",1,0],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[47,"Scapula_R",3,[-40],[24,"c9nF1ToIBGO6Xj2bOd+0qF",1,0],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[47,"Shoulder_R",16,[-41],[24,"c8DvbS1BBJgYS61YJPbgjX",1,0],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[65,"Elbow_R",17,[[64,"Wrist_R",-42,[24,"c5r1H2O5NOLb3CmvyJvOsS",1,0],[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[24,"22/SuEkf5CuI9TV1VERcxI",1,0],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[47,"Scapula_L",3,[-43],[24,"7emPgqNNtC6YLr6lC7kWjQ",1,0],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[47,"Shoulder_L",19,[-44],[24,"5e13Rua1BLnLdq+LWJ58wJ",1,0],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[65,"Elbow_L",20,[[64,"Wrist_L",-45,[24,"5fEmL3mttIC7rXvKAj2i2i",1,0],[1,-0.429713636636734,0,5.684341759025859e-16]]],[24,"b9HJMJiDxDqKxQUKl0vFME",1,0],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[47,"Hip_L",2,[-46],[24,"6bLjxUQgdNMZjTLwNF5HtL",1,0],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[65,"Knee_L",22,[[64,"Ankle_L",-47,[24,"649kyQCg9K8bPU97MWBdrQ",1,0],[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[24,"624EEhpLFFwIH/ALN/v5ad",1,0],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[116,"Shadow",1,[[143,"Quad<ModelComponent>",-48,[34,"80D1FF2mlFPLxYmhqBTgm5"],[18],[0],19]],[24,"c7Z2grImtJo4ZAuknc+1ku",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]]],0,[0,4,1,0,0,1,0,-1,5,0,-2,6,0,-3,9,0,-4,7,0,-5,8,0,-6,4,0,-7,10,0,-8,11,0,0,1,0,-1,4,0,-2,2,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,24,0,-9,10,0,-10,11,0,-1,12,0,-2,3,0,-3,22,0,-1,14,0,-2,16,0,-3,19,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,-1,13,0,2,13,0,-1,15,0,2,15,0,-1,17,0,-1,18,0,2,18,0,-1,20,0,-1,21,0,2,21,0,-1,23,0,2,23,0,0,24,0,12,1,48],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,-1,1,6,-1,1,6,-1,-2,-3,15],[12,20,21,13,20,21,14,20,21,15,20,21,16,20,21,17,20,21,42,6,18,20,21,19,20,21,76,70,10,70]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[{"lineWidth":30},[{},"mainColor",8,[4,4294917063],"shadeColor1",8,[4,4286645845],"shadeColor2",8,[4,4287892061],"specular",8,[4,1291795399]],{},{}],0,11,0,0]]],0,0,[0],[7],[38]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"lineWidth":30},"baseColor",8,[4,4278216632]],[{},"mainColor",8,[4,4278233545],"shadeColor1",8,[4,4278211795],"shadeColor2",8,[4,4278205564],"specular",8,[4,1277415150],"emissive",8,[4,1108308111]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[146,"Skin-0",4188099628,["Root_M","Root_M/Hip_R","Root_M/Hip_R/Knee_R","Root_M/Hip_R/Knee_R/Ankle_R","Root_M/Chest_M","Root_M/Chest_M/Neck_M","Root_M/Chest_M/Neck_M/Head_M","Root_M/Chest_M/Neck_M/Head_M/HeadEnd_M","Root_M/Chest_M/Scapula_R","Root_M/Chest_M/Scapula_R/Shoulder_R","Root_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R","Root_M/Chest_M/Scapula_R/Shoulder_R/Elbow_R/Wrist_R","Root_M/Chest_M/Scapula_L","Root_M/Chest_M/Scapula_L/Shoulder_L","Root_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L","Root_M/Chest_M/Scapula_L/Shoulder_L/Elbow_L/Wrist_L","Root_M/Hip_L","Root_M/Hip_L/Knee_L","Root_M/Hip_L/Knee_L/Ankle_L"],[[[7,6.096004138905084e-17,-5.546435927836693e-17,1,0,0.9955530166625977,0.09419780224561691,-5.546438574814653e-17,0,-0.09419780224561691,0.9955530166625977,6.096006785883044e-17,0,-1.2338459491729736,-0.0813949704170227,7.070084749058139e-17,1],[7,-0.015989603474736214,-0.11939198523759842,-0.9927180409431458,0,-0.9854180216789246,0.1700890064239502,-0.004584212321788073,0,0.16939786076545715,0.9781690239906311,-0.12037066370248795,0,1.0992494821548462,-0.17718039453029633,-0.27354905009269714,1],[7,0.021449536085128784,-0.11853298544883728,-0.9927180409431458,0,-0.9900329113006592,-0.14076100289821625,-0.004584297072142363,0,-0.13919267058372498,0.9829220175743103,-0.12037081271409988,0,0.6014260053634644,0.00790424458682537,-0.27354899048805237,1],[7,0.021449536085128784,-0.11853298544883728,-0.9927180409431458,0,-0.9900329113006592,-0.14076100289821625,-0.004584297072142363,0,-0.13919267058372498,0.9829220175743103,-0.12037081271409988,0,0.006851599086076021,0.00790424458682537,-0.27354899048805237,1],[7,6.121874377998802e-17,-6.252107017128131e-17,1,0,0.9997779726982117,-0.02104710042476654,-6.252110325850581e-17,0,0.02104710042476654,0.9997779726982117,6.121877686721252e-17,0,-1.901503562927246,0.138446643948555,1.250636205687094e-16,1],[7,6.118696680957618e-17,-6.358833830226663e-17,1,0,0.9992589950561523,-0.03847689926624298,-6.358837138949113e-17,0,0.03847689926624298,0.9992589950561523,6.118699989680069e-17,0,-2.1723437309265137,0.176352396607399,1.4413323065227008e-16,1],[7,6.122425611159007e-17,-6.222872469047037e-17,1,0,0.9998679757118225,-0.01627179980278015,-6.222869822069077e-17,0,0.01627179980278015,0.9998679757118225,6.122423625925537e-17,0,-2.345874071121216,0.12427624315023422,1.5135782612230822e-16,1],[7,6.122425611159007e-17,-6.222872469047037e-17,1,0,0.9998679757118225,-0.01627179980278015,-6.222869822069077e-17,0,0.01627179980278015,0.9998679757118225,6.122423625925537e-17,0,-3.3392200469970703,0.12427624315023422,2.1217464615137918e-16,1],[7,-0.9045099020004272,0.020563799887895584,-0.42595699429512024,0,-0.42645323276519775,-0.04421769827604294,0.9034280180931091,0,-0.0002569263451732695,0.9988099932670593,0.04876483231782913,0,0.7290658950805664,0.20587953925132751,-1.860106348991394,1],[7,-0.9983659982681274,-0.0546783022582531,0.01658232882618904,0,0.03307170420885086,-0.31633105874061584,0.9480721950531006,0,-0.046593450009822845,0.9470719695091248,0.31762248277664185,0,-0.45183929800987244,0.6835654973983765,-1.743036150932312,1],[7,-0.9980629682540894,0.05996109917759895,0.0165823046118021,0,-0.003355184104293585,-0.3180379867553711,0.9480719566345215,0,0.06212124601006508,0.946179986000061,0.3176230788230896,0,-0.9496065378189087,0.7975059151649475,-1.7430357933044434,1],[7,-0.9980629682540894,0.05996109917759895,0.0165823046118021,0,-0.003355184104293585,-0.3180379867553711,0.9480719566345215,0,0.06212124601006508,0.946179986000061,0.3176230788230896,0,-1.3793201446533203,0.7975059151649475,-1.7430357933044434,1],[7,-0.9045099020004272,0.020563799887895584,-0.42595699429512024,0,0.42645323276519775,0.04421769827604294,-0.9034280180931091,0,0.0002569263451732695,-0.9988099932670593,-0.04876483231782913,0,-0.7290658950805664,-0.20587953925132751,1.860106348991394,1],[7,-0.9983659982681274,-0.0546783022582531,0.01658232882618904,0,-0.03307170420885086,0.31633105874061584,-0.9480721950531006,0,0.046593450009822845,-0.9470719695091248,-0.31762248277664185,0,0.45183929800987244,-0.6835654973983765,1.743036150932312,1],[7,-0.9980629682540894,0.05996109917759895,0.0165823046118021,0,0.003355184104293585,0.3180379867553711,-0.9480719566345215,0,-0.06212124601006508,-0.946179986000061,-0.3176230788230896,0,0.9496065378189087,-0.7975059151649475,1.7430357933044434,1],[7,-0.9980629682540894,0.05996109917759895,0.0165823046118021,0,0.003355184104293585,0.3180379867553711,-0.9480719566345215,0,-0.06212124601006508,-0.946179986000061,-0.3176230788230896,0,1.3793201446533203,-0.7975059151649475,1.7430357933044434,1],[7,-0.01598961278796196,-0.11939198523759842,-0.9927180409431458,0,0.9854180216789246,-0.1700890064239502,0.004584202077239752,0,-0.16939786076545715,-0.9781690239906311,0.12037066370248795,0,-1.0992493629455566,0.17718039453029633,0.27354905009269714,1],[7,0.02144952490925789,-0.11853298544883728,-0.9927180409431458,0,0.9900329113006592,0.14076100289821625,0.004584286827594042,0,0.13919267058372498,-0.9829220175743103,0.12037081271409988,0,-0.6014260053634644,-0.00790424458682537,0.27354899048805237,1],[7,0.02144952490925789,-0.11853298544883728,-0.9927180409431458,0,0.9900329113006592,0.14076100289821625,0.004584286827594042,0,0.13919267058372498,-0.9829220175743103,0.12037081271409988,0,-0.006851596292108297,-0.00790424458682537,0.27354899048805237,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[22,".bin",2432768697,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":7056,"count":1764,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":304,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]]},"minPosition",8,[1,-1.4619245529174805,-0.000025998029741458595,-0.6335217356681824],"maxPosition",8,[1,1.4619245529174805,3.325444221496582,0.5601312518119812]]],-1],0,0,[],[],[]],[[[22,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[22,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[22,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[22,".bin",4238197539,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2880,"length":360,"count":90,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":5160,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2880,"count":60,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3240,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-34.966243743896484,-0.24999959766864777,-53.00639343261719],"maxPosition",8,[1,26.481054306030273,0.19735150039196014,-14.913683891296387]]],-1],0,0,[],[],[]],[[[87,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[22,".bin",2807389438,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6747698783874512,0.0009726714924909174,-0.9706524610519409],"maxPosition",8,[1,-0.5117460489273071,0.4862567186355591,-0.48536837100982666]]],-1],0,0,[],[],[]],[[[22,".bin",2004333475,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":1176,"count":294,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5079923272132874,0.7446458339691162,-0.8731224536895752],"maxPosition",8,[1,0.5079923272132874,1.1459581851959229,0.438088983297348]]],-1],0,0,[],[],[]],[[[22,".bin",1059389006,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6747698783874512,0.0009718322544358671,0.38814282417297363],"maxPosition",8,[1,-0.5117460489273071,0.4862558841705322,0.8734269738197327]]],-1],0,0,[],[],[]],[[[22,".bin",1184839980,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29664,"length":8208,"count":2052,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":43632,"length":1248,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29664,"count":618,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":37872,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6623214483261108,0.11965393275022507,-1.3660485744476318],"maxPosition",8,[1,0.6623214483261108,0.760112464427948,1.2671782970428467]]],-1],0,0,[],[],[]],[[[22,".bin",340416308,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5117460489273071,0.0009718322544358671,0.38814282417297363],"maxPosition",8,[1,0.6747698783874512,0.4862558841705322,0.8734269738197327]]],-1],0,0,[],[],[]],[[[22,".bin",1407991463,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3858860433101654,0.3558458983898163,-0.12173980474472046],"maxPosition",8,[1,-0.05243827775120735,0.7326855659484863,0.27182406187057495]]],-1],0,0,[],[],[]],[[[22,".bin",1432834239,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4800,"length":672,"count":168,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4800,"count":100,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5084291696548462,0.7581133842468262,-0.6753007769584656],"maxPosition",8,[1,0.5084291696548462,1.015496850013733,0.2547720968723297]]],-1],0,0,[],[],[]],[[[22,".bin",3237293843,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":600,"count":150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.383483350276947,0.36028534173965454,-0.7123047113418579],"maxPosition",8,[1,-0.05003557354211807,0.737125039100647,-0.31874093413352966]]],-1],0,0,[],[],[]],[[[22,".bin",1724170031,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.03637750446796417,0.36028534173965454,-0.7123047113418579],"maxPosition",8,[1,0.3698252737522125,0.737125039100647,-0.31874093413352966]]],-1],0,0,[],[],[]],[[[22,".bin",3396905857,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.03637750446796417,0.360284686088562,-0.12173976749181747],"maxPosition",8,[1,0.3698252737522125,0.7371243238449097,0.27182406187057495]]],-1],0,0,[],[],[]],[[[22,".bin",4250252698,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9936,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9936,"count":207,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4286309778690338,0.7216379642486572,-0.9372618198394775],"maxPosition",8,[1,0.4286309778690338,1.0532457828521729,0.5120426416397095]]],-1],0,0,[],[],[]],[[[106,3759697297,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":0,"length":0,"count":0,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":0,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0,0,0],"maxPosition",8,[1,0,0,0]]]],0,0,[],[],[]],[[[22,".bin",322968264,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5117460489273071,0.0009726714924909174,-0.9706524610519409],"maxPosition",8,[1,0.6747698783874512,0.4862567186355591,-0.48536837100982666]]],-1],0,0,[],[],[]],[[[58,"CarMoveToPlaceArea",".mp3",2.712],-1],0,0,[],[],[]],[[{"name":"Snow","rect":{"x":0,"y":0,"width":54,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":54,"height":62},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[77]],[[[74,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_BATCHING":true,"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.25,"metallic":0},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[78,37]],[[[58,"CarCrash",".mp3",1.896],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true,"USE_BATCHING":true},{"USE_BATCHING":true},{},{}],[[{"lineWidth":30},[{},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4294967295],"emissive",8,[4,4294967295]],{},{}],0,11,0,0]]],0,0,[0],[7],[38]],[[[58,"CarExit",".mp3",1.959184],-1],0,0,[],[],[]],[[[22,".bin",2582695504,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":576,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":576,"count":12,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005284153390675783,-0.009999999776482582,-0.003152514109387994],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[22,".bin",356895989,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25056,"length":11868,"count":2967,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25056,"count":522,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-21.577760696411133,-1.5312420129776,-3.164909601211548],"maxPosition",8,[1,17.127134323120117,1.6437338590621948,1.0217125415802002]]],-1],0,0,[],[],[]],[[[22,".bin",1942143377,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16320,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16320,"count":340,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.329177379608154,-0.8140552043914795,-0.13045597076416016],"maxPosition",8,[1,3.8946433067321777,0.4557103216648102,0.1304558962583542]]],-1],0,0,[],[],[]],[[[22,".bin",4271425490,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5664,"length":1464,"count":366,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5664,"count":118,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.019922807812690735,-0.0099471565335989,-0.038987915962934494],"maxPosition",8,[1,0.019922807812690735,0.00522953225299716,0.006102078128606081]]],-1],0,0,[],[],[]],[[[75,"Color_Building_in_Game",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[79,37]],[[[22,".bin",479688345,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005284153390675783,-0.009999999776482582,0],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[22,".bin",2948894321,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":180528,"length":38856,"count":9714,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":180528,"count":3761,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.1503636837005615,-1.3014159202575684,-1.4056719541549683],"maxPosition",8,[1,2.771519184112549,2.5354652404785156,1.4056719541549683]]],-1],0,0,[],[],[]],[[[22,".bin",1588181566,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43152,"length":6216,"count":1554,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43152,"count":899,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5692058205604553,-0.6063945889472961,-0.4546128511428833],"maxPosition",8,[1,0.5634137988090515,0.4978647530078888,0.4603993594646454]]],-1],0,0,[],[],[]],[[[22,".bin",3064768187,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30528,"length":6264,"count":1566,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30528,"count":636,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.471960544586182,-4.710632801055908,-2.929952383041382],"maxPosition",8,[1,4.814756870269775,6.795826435089111,5.5348334312438965]]],-1],0,0,[],[],[]],[[[75,"hl_hwl",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"tilingOffset",8,[2,1,1,0,0.05999999865889549],"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[80,37]],[[[22,".bin",818250912,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31872,"length":5280,"count":1320,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31872,"count":664,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-8.151200294494629,-0.817080557346344,-0.13045595586299896],"maxPosition",8,[1,8.155689239501953,0.45268484950065613,0.13045591115951538]]],-1],0,0,[],[],[]],[[[22,".bin",1899770351,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23232,"length":3540,"count":885,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.458978533744812,-0.6075612306594849,-0.4609536826610565],"maxPosition",8,[1,0.45961886644363403,0.28966063261032104,0.4580416977405548]]],-1],0,0,[],[],[]],[[[22,".bin",231557474,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72768,"length":16752,"count":4188,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72768,"count":1516,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.576501727104187,-1.7305165529251099,-1.2335352897644043],"maxPosition",8,[1,1.1824390888214111,1.8910061120986938,1.0186803340911865]]],-1],0,0,[],[],[]],[[[22,".bin",3526497468,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":70,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-18.231252670288086,-0.15672649443149567,-0.17865639925003052],"maxPosition",8,[1,26.118711471557617,0.1580425500869751,0.17865683138370514]]],-1],0,0,[],[],[]],[[[22,".bin",1588181566,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43152,"length":6216,"count":1554,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43152,"count":899,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5692058205604553,-0.6063945889472961,-0.4546128511428833],"maxPosition",8,[1,0.5634137988090515,0.4978647530078888,0.4603993594646454]]],-1],0,0,[],[],[]],[[[22,".bin",531634375,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005284153390675783,-0.009999999776482582,0],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0]]],-1],0,0,[],[],[]],[[[22,".bin",2864668844,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1584,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1584,"count":33,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22061404585838318,-0.32371798157691956,-0.0015746450517326593],"maxPosition",8,[1,0.2186579555273056,-0.1527361422777176,-0.0015746450517326593]]],-1],0,0,[],[],[]],[[[22,".bin",3355323030,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":51408,"length":16440,"count":4110,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":51408,"count":1071,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-5.288916110992432,-5.008244514465332,-3.3398871421813965],"maxPosition",8,[1,5.654796600341797,4.33013391494751,5.181257724761963]]],-1],0,0,[],[],[]],[[[22,".bin",2014574286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":240,"length":36,"count":9,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":240,"count":5,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-25.535398483276367,0,-2.8406996726989746],"maxPosition",8,[1,32.499595642089844,0,1.8937997817993164]]],-1],0,0,[],[],[]],[[[84],[85,"XMAS MAP",[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19],[24,"ffkQedWfhWxpyCwcqK3O5O",-1,0]],[53,"Roof",1,[[37,-20,[34,"5d8A0sO8pQvZAOoLQg8rCW"],[0],[0],1]],[24,"b1BCgFV/xYaqnT0F8sOEGn",1,0],[1,-8.238637924194336,6.719433784484863,17.989561080932617]],[53,"Road",1,[[37,-21,[34,"17H5LrTHZRcJ3y2i607UrV"],[2],[0],3]],[24,"41sCYD611XZZJADPNluZMY",1,0],[1,-3.05210018157959,-0.15999896824359894,13.44314956665039]],[53,"Fance2",1,[[37,-22,[34,"96tuOi4ENZPLuY7qdtgzSc"],[4],[0],5]],[24,"3dqtbUNbVSIIdApicbmrNn",1,0],[1,5.491863250732422,0.5307175517082214,15.631850242614746]],[100,"xekeo",1,[[37,-23,[34,"d3lJGy6o5faZ2E4axjJydu"],[6],[0],7]],[24,"f8ww/QH6Fec7t3QW6OFfwN",1,0],[1,1.538496494293213,1.042561411857605,19.05348014831543],[3,-3.641313392672542e-8,0.263670147082379,9.953271119502054e-9,0.964612903468306],[1,-0.000004325712097970551,30.575895381197654,-3.0075699954885053e-13]],[53,"Fance",1,[[37,-24,[34,"51sL2D8LpViYFtIu7qLk00"],[8],[0],9]],[24,"9dqDGCchBeFr3kct+6TCyX",1,0],[1,-17.583803176879883,0.5276920795440674,15.631850242614746]],[53,"Snow",1,[[37,-25,[34,"4aSypdtrhfwa7bxdJdItVV"],[10],[0],11]],[24,"d3RCCUOzJcN46nHxipWKwC",1,0],[1,-1.6403552293777466,-0.10281623154878616,15.221787452697754]],[53,"Plane_032",1,[[37,-26,[34,"f8Cp28pOFd44uFFFdu9a6d"],[12],[0],13]],[24,"d8KMHPVlxdNJWyK2oqplxO",1,0],[1,-4.315327167510986,-0.03061278909444809,15.096580505371094]],[53,"House",1,[[37,-27,[34,"84VbGa3KhawbTNkoLDtt96"],[14],[0],15]],[24,"31Np7BheNYEpEjLtnUMWvL",1,0],[1,-8.421527862548828,3.5928163528442383,17.55059814453125]],[117,"Gift_1",1,[[37,-28,[34,"bfbZ9gxa1UyY5mIqWMAXuC"],[16],[0],17]],[24,"10I8tlnYhb77tm+w6jLxNh",1,0],[1,-11.215473175048828,0.8834390044212341,15.281773567199707],[1,1.8159985542297363,1.8159985542297363,1.8159985542297363]],[100,"snowman",1,[[37,-29,[34,"7ctf5QoGpQHrCpuPCz2L8g"],[18],[0],19]],[24,"b5k1fhEIRcFKqWbypVqtCt",1,0],[1,-1.0633594989776611,1.3575241565704346,16.572614669799805],[3,-3.64577883870176e-8,-0.2593032752362367,-9.78842620051888e-9,0.9657959471087871],[1,-0.000004325711632323781,-30.057449976028515,1.814658978868497e-13]],[48,"Gift_2",1,[[37,-30,[34,"c8Kg1Fv8xTWp9H7njCczML"],[20],[0],21]],[24,"811s/HWqJe7r+tn1cAYjWC",1,0],[1,-5.319501876831055,0.9532644152641296,15.04229736328125],[3,-3.6076212187481074e-8,0.29438224392178824,1.1112625470366827e-8,0.9556877599213937],[1,1.87006413936615,1.8700640201568604,1.87006413936615],[1,-0.000004325711494332343,34.240995437451964,4.4079603306808006e-13]],[53,"Tree",1,[[37,-31,[34,"2fU6mCC0hUFovuY3N9lkOH"],[22],[0],23]],[24,"2eJEilQEJd5LeEy+gd7iic",1,0],[1,-0.009917691349983215,1.918708086013794,23.677833557128906]],[48,"Gift_2.001",1,[[37,-32,[34,"5aOkNM4PxSJ4j7+HyDoIsf"],[24],[0],25]],[24,"d6kG7yL8RT15gdQb6xqYrC",1,0],[1,-11.232421875,1.912044644355774,15.3099365234375],[3,-3.355195656613734e-8,-0.4582603965497745,-1.7298856034861906e-8,0.8888179841531345],[1,1.2298381328582764,1.2298381328582764,1.2298381328582764],[1,-0.000004325712524759044,-54.5498218407151,-1.6364159768564554e-13]],[48,"Plane",1,[[37,-33,[34,"acNtW63PZRtavl9GswVBbF"],[26],[0],27]],[24,"d39BmuElxWO5anJSHbYg51",1,0],[1,-5.467287540435791,2360.47998046875,15.191370010375977],[3,-0.6761396497078339,0.2069664141228558,0.20696639922169469,0.6761397689171229],[1,100,79.04281616210938,100],[1,-89.99999041027088,34.03870561194521,0.0000016726988803998045]],[48,"Plane.001",1,[[37,-34,[34,"193N36F1dXObV84zURN92z"],[28],[0],29]],[24,"ebbiKyWotUQJncZWRy3N35",1,0],[1,-11.368356704711914,0.08498165756464005,15.382742881774902],[3,-0.7070904389743736,0.004807401459108798,0.004807401924770086,0.7070904389743736],[1,125.37608337402344,99.99999237060547,100],[1,-90.00000000025655,0.7790787945541611,3.7730948960282336e-8]],[48,"Plane.004",1,[[37,-35,[34,"d6VMhWZF5cUrlS4DS9j/PN"],[30],[0],31]],[24,"71AEhOpjRdy50NwKDE082H",1,0],[1,0,-0.08603250235319138,-0.08587910979986191],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[48,"Snow.001",1,[[37,-36,[34,"7fFfFO2P1YQLvXWSGZuIHT"],[32],[0],33]],[24,"7aedjN3aZcErYibuA/MQt3",1,0],[1,-8.234928131103516,4.36594295501709,15.351085662841797],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,48.57352828979492],[1,-90.00000965934633,0,0]],[48,"Plane.003",1,[[37,-37,[34,"39D36/ksBVdpV3+fh5zY+v"],[34],[0],35]],[24,"10HpIIIq1QSaK+CauIkG5u",1,0],[1,-5.475599765777588,-0.14557181298732758,14.814175605773926],[3,-0.6299252580933583,-0.3212385511772923,-0.3212385511772923,0.6299251984887129],[1,101.38812255859375,80.8671875,80.86719512939453],[1,-90.00000430250853,-54.03979725128406,0.00000219412009944808]]],0,[0,4,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,-12,13,0,-13,14,0,-14,15,0,-15,16,0,-16,17,0,-17,18,0,-18,19,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,12,1,37],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[36,81,82,83,36,84,36,85,36,86,36,87,36,88,36,89,36,90,36,91,36,92,36,93,36,94,36,95,36,96,36,97,36,98,36,99]],[[[22,".bin",3358610979,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57120,"length":4896,"count":1224,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":57120,"count":1190,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.5946882963180542,-2.2289648056030273,-1.6273809671401978],"maxPosition",8,[1,1.6329054832458496,3.409574508666992,1.633766531944275]]],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_BATCHING":true},{},{}],[[[{"metallic":0.3},"mainColor",8,[4,4292598747]],{},{}],11,0,0]]],0,0,[0],[7],[37]],[[[74,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_BATCHING":true,"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[100,37]],[[{"name":"icon","rect":{"x":0,"y":0,"width":511,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":511,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[101]],[[[75,"Material.006",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.14002801477909088},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[102,37]],[[[22,".bin",1909176406,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38592,"length":13464,"count":3366,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38592,"count":804,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04140159487724304,-0.019135622307658195,-0.002369294175878167],"maxPosition",8,[1,0.006348482798784971,0.015114027075469494,0.05479692295193672]]],-1],0,0,[],[],[]],[[[84],[85,"Board",[-2],[24,"4c+7DECGFZFYngLa8ew/xa",-1,0]],[48,"Cube.009",1,[[37,-3,[34,"c40DvkosFTG4xuWPwT/8OO"],[0],[0],1]],[24,"f3hUya8J9WDI1yV/RSivTa",1,0],[1,3.2857251167297363,-0.01552891731262207,13.442083358764648],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,69.00731658935547,69.00731658935547,69.00731658935547],[1,-90.00000965934633,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[103,104]],[[[83,"VFX_Smoke"],[132,"VFX_Smoke",[-2],[24,"54Y0jZZ95G4bNLwJNyEXwH",-1,0],[3,-1,0,0,6.123233995736766e-17],[1,-180,0,0]],[147,1,0,1,[34,"5cyMZfHBFMt7p3d8UTki5n"],[[0,null],6,0],[41],[42,3,1.2,1.6],[17],[17],[88,3,0.5],[17],[17],[88,3,6.283185307179586],[17],[42,3,0.36,0.55],[35,-0.1],[17],[35,4.5],[68,true,[67,1,[150,[[151,0.7165178571428571]],[[152,255],[44,255,0.71875],[44,0,1]]]]],[153,true,0,[35,1],[1,1,0.4,0.33]],[154,[43,1,[45,[0,1],[[50,2,1],[109,2,-2.373015873015874,-2.373015873015874]]]],[17],[17],[17]],[69,[17],[17],[17],[35,1]],[155,true,[42,3,-3,3],[149,3,-3],[17]],[91,[17],[17],[17],[17]],[156,true,[17],[17],[42,3,-1.5707963267948966,1.5707963267948966]],[113,true,2,2,0.2,[43,1,[45,[0,1],[[110,1,1,1,1],[111,1,1,1,1,1]]]],[42,3,1,4]],[70,[35,1],[17],[41],[41],-3],[81,1]]],0,[0,4,1,0,-1,2,0,13,2,0,12,1,3],[0,0],[-1,14],[105,49]],[[[74,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_BATCHING":true,"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[106,37]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[{"lineWidth":30},[{},"mainColor",8,[4,4280769535],"shadeColor1",8,[4,4278397607],"shadeColor2",8,[4,4278199998],"specular",8,[4,1275110399],"emissive",8,[4,4280172741]],{},{}],0,11,0,0]]],0,0,[0],[7],[38]],[[[22,".bin",2805095500,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42778685688972473,0.8501489758491516,-1.5670799016952515],"maxPosition",8,[1,-0.09433899074792862,1.2269881963729858,-1.1315929889678955]]],-1],0,0,[],[],[]],[[[22,".bin",1892770659,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.09239166229963303,0.8501492142677307,1.1503585577011108],"maxPosition",8,[1,0.42583924531936646,1.226988434791565,1.5858454704284668]]],-1],0,0,[],[],[]],[[[22,".bin",577588349,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42778685688972473,0.8501492142677307,1.1503585577011108],"maxPosition",8,[1,-0.09433899074792862,1.226988434791565,1.5858454704284668]]],-1],0,0,[],[],[]],[[[22,".bin",2050276557,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.4821661412715912,0.0009722993709146976,1.1434330940246582],"maxPosition",8,[1,0.6451898217201233,0.48625633120536804,1.628717303276062]]],-1],0,0,[],[],[]],[[[22,".bin",1455076980,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27888,"length":3804,"count":951,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27888,"count":581,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.621773362159729,0.49085110425949097,-2.09207820892334],"maxPosition",8,[1,0.6203204393386841,1.2640044689178467,2.295536994934082]]],-1],0,0,[],[],[]],[[[22,".bin",2832540090,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42778685688972473,0.8501491546630859,-0.2083606868982315],"maxPosition",8,[1,-0.09433899074792862,1.2269883155822754,0.2271263301372528]]],-1],0,0,[],[],[]],[[[22,".bin",557930724,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32592,"length":7008,"count":1752,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32592,"count":679,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6556494235992432,0.09750956296920776,-2.1085283756256104],"maxPosition",8,[1,0.6541961431503296,1.2643256187438965,2.350327968597412]]],-1],0,0,[],[],[]],[[[106,3759697297,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":0,"length":0,"count":0,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":0,"stride":24},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false}]}]},"minPosition",8,[1,0,0,0],"maxPosition",8,[1,0,0,0]]]],0,0,[],[],[]],[[[22,".bin",1728438120,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.09239166229963303,0.8501491546630859,-0.2083606868982315],"maxPosition",8,[1,0.42583924531936646,1.2269883155822754,0.2271263301372528]]],-1],0,0,[],[],[]],[[[22,".bin",730211653,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42778685688972473,0.8501490950584412,-0.8877202868461609],"maxPosition",8,[1,-0.09433899074792862,1.2269883155822754,-0.45223334431648254]]],-1],0,0,[],[],[]],[[[22,".bin",3184491035,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.09239166229963303,0.8501492142677307,0.4709989130496979],"maxPosition",8,[1,0.42583924531936646,1.226988434791565,0.906485915184021]]],-1],0,0,[],[],[]],[[[22,".bin",341459389,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6720,"length":2448,"count":612,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6720,"count":140,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5934332013130188,1.259026288986206,-2.0402324199676514],"maxPosition",8,[1,0.5919802784919739,1.5230534076690674,2.1167778968811035]]],-1],0,0,[],[],[]],[[[22,".bin",44689963,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.09239166229963303,0.8501490950584412,-0.8877202868461609],"maxPosition",8,[1,0.42583924531936646,1.2269883155822754,-0.45223334431648254]]],-1],0,0,[],[],[]],[[[22,".bin",3744110664,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42778685688972473,0.8501492142677307,0.4709989130496979],"maxPosition",8,[1,-0.09433899074792862,1.226988434791565,0.906485915184021]]],-1],0,0,[],[],[]],[[[22,".bin",1953319050,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.09239166229963303,0.8501489758491516,-1.5670799016952515],"maxPosition",8,[1,0.42583924531936646,1.2269881963729858,-1.1315929889678955]]],-1],0,0,[],[],[]],[[[105,[{},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}]]],0,0,[0],[7],[37]],[[[74,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[107,37]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[84],[85,"fence",[-2],[24,"c1mtYY/tlaN654NwNX6HH6",-1,0]],[48,"Cylinder",1,[[37,-3,[34,"d5vZtosShZMrETw++LdOyS"],[0],[0],1]],[24,"51ICkGKsRcmbMQJ9b8EUx6",1,0],[1,0,0.27753937244415283,11.126738548278809],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[108,109]],[[[75,"Material.006",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.14002801477909088},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[110,37]],[[[22,".bin",1853935874,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9840,"length":3720,"count":930,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9840,"count":205,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.002953859278932214,-0.002953860443085432,-0.005315468180924654],"maxPosition",8,[1,0.002953859278932214,0.002953858580440283,0.0059891571290791035]]],-1],0,0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[111]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[49,50]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[71,50]],[[[158,"Snow",".plist"],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"lineWidth":30},"baseColor",8,[4,4285207817]],[{},"mainColor",8,[4,4294926899],"shadeColor1",8,[4,4283241733],"shadeColor2",8,[4,4285007113],"specular",8,[4,1291805235],"emissive",8,[4,4294922267]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[145,[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"rasterizerState":{},"depthStencilState":{}},"blendState",11,[{"targets":[{}]},"blendColor",8,[4,4287006463]]],{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],11,0,0,0],[[[{"lineWidth":30},"baseColor",8,[4,4278190179]],[{},"mainColor",8,[4,4279769343],"shadeColor1",8,[4,4281927823],"shadeColor2",8,[4,4278845593],"specular",8,[4,1276535295]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"lineWidth":30},"baseColor",8,[4,4279109225]],[{},"mainColor",8,[4,4292898303],"shadeColor1",8,[4,4283778010],"shadeColor2",8,[4,4285872881],"specular",8,[4,1290905087],"emissive",8,[4,4281142582]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.65},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,7],[112,37]],[[[22,".bin",961119921,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.2857454717159271,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,4.5231242179870605,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",4071260545,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.739914417266846,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,-2.502535343170166,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",1392491890,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.2270846366882324,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,1.0102946758270264,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",1885219806,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4800,"length":600,"count":150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4800,"count":100,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-39.89311218261719,-0.28957995772361755,-60.34162902832031],"maxPosition",8,[1,32.427555084228516,0.23693186044692993,-15.508254051208496]]],-1],0,0,[],[],[]],[[[22,".bin",722280886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-17.278404235839844,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,-13.041025161743164,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",439508091,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-10.2527437210083,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,-6.0153656005859375,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",4079878697,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-13.765575408935547,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,-9.52819538116455,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",3139755944,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-20.79123306274414,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,-16.553855895996094,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[[22,".bin",1365919626,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,3.7985754013061523,-0.023485751822590828,-21.581951141357422],"maxPosition",8,[1,8.035954475402832,0.17934314906597137,-16.346670150756836]]],-1],0,0,[],[],[]],[[{"name":"icon_next","rect":{"x":4,"y":11,"width":122,"height":107},"offset":{"x":1,"y":-0.5},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[113]],[[{"name":"needtopickupguest","rect":{"x":0,"y":0,"width":614,"height":204},"offset":{"x":0,"y":0},"originalSize":{"width":614,"height":204},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[114]],[[[159,"BusSort_PA_09_EN"],[7,"Cars",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41]],[7,"Ver",[-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63]],[7,"Ver",[-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85]],[7,"Ver",[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107]],[7,"Ver",[-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129]],[7,"Ver",[-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151]],[21,"CarStops",[-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184],[[160,-164,-163,-162,-161,-160,[-152,-153,-154,-155,-156,-157,-158,-159]]]],[21,"base",[-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-202],[[23,[null],-185,[0],1360]]],[21,"base",[-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220],[[23,[null],-203,[0],1476]]],[21,"base",[-222,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238],[[23,[null],-221,[0],1592]]],[21,"base",[-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-253,-254,-255,-256],[[23,[null],-239,[0],1708]]],[21,"base",[-258,-259,-260,-261,-262,-263,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274],[[23,[null],-257,[0],1824]]],[21,"base",[-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292],[[23,[null],-275,[0],1940]]],[21,"base",[-294,-295,-296,-297,-298,-299,-300,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310],[[23,[null],-293,[0],2056]]],[21,"base",[-312,-313,-314,-315,-316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326,-327,-328],[[23,[null],-311,[0],2172]]],[21,"base",[-330,-331,-332,-333,-334,-335,-336,-337,-338,-339,-340,-341,-342,-343,-344,-345,-346],[[23,[null],-329,[0],2288]]],[21,"base",[-348,-349,-350,-351,-352,-353,-354,-355,-356,-357,-358,-359,-360,-361,-362,-363,-364],[[23,[null],-347,[0],2404]]],[21,"base",[-366,-367,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-378,-379,-380,-381,-382],[[23,[null],-365,[0],2520]]],[21,"base",[-384,-385,-386,-387,-388,-389,-390,-391,-392,-393,-394,-395,-396,-397,-398,-399,-400],[[23,[null],-383,[0],2636]]],[21,"base",[-402,-403,-404,-405,-406,-407,-408,-409,-410,-411,-412,-413,-414,-415,-416,-417,-418],[[23,[null],-401,[0],2752]]],[21,"base",[-420,-421,-422,-423,-424,-425,-426,-427,-428,-429,-430,-431,-432,-433,-434,-435,-436],[[23,[null],-419,[0],2868]]],[21,"base",[-438,-439,-440,-441,-442,-443,-444,-445,-446,-447,-448,-449,-450,-451,-452,-453,-454],[[23,[null],-437,[0],2984]]],[21,"base",[-456,-457,-458,-459,-460,-461,-462,-463,-464,-465,-466,-467,-468,-469,-470,-471,-472],[[23,[null],-455,[0],3100]]],[21,"base",[-474,-475,-476,-477,-478,-479,-480,-481,-482,-483,-484,-485,-486,-487,-488,-489,-490],[[23,[null],-473,[0],3216]]],[21,"base",[-492,-493,-494,-495,-496,-497,-498,-499,-500,-501,-502,-503,-504,-505,-506,-507,-508],[[23,[null],-491,[0],3332]]],[21,"base",[-510,-511,-512,-513,-514,-515,-516,-517,-518,-519,-520,-521,-522,-523,-524,-525,-526],[[23,[null],-509,[0],3448]]],[21,"base",[-528,-529,-530,-531,-532,-533,-534,-535,-536,-537,-538,-539,-540,-541,-542,-543,-544],[[23,[null],-527,[0],3564]]],[21,"base",[-546,-547,-548,-549,-550,-551,-552,-553,-554,-555,-556,-557,-558,-559,-560,-561,-562],[[23,[null],-545,[0],3680]]],[21,"base",[-564,-565,-566,-567,-568,-569,-570,-571,-572,-573,-574,-575,-576,-577,-578,-579,-580],[[23,[null],-563,[0],3796]]],[21,"base",[-582,-583,-584,-585,-586,-587,-588,-589,-590,-591,-592,-593,-594,-595,-596,-597,-598],[[23,[null],-581,[0],3912]]],[21,"base",[-600,-601,-602,-603,-604,-605,-606,-607,-608,-609,-610,-611,-612,-613,-614,-615,-616],[[23,[null],-599,[0],4028]]],[21,"base",[-618,-619,-620,-621,-622,-623,-624,-625,-626,-627,-628,-629,-630,-631,-632,-633,-634],[[23,[null],-617,[0],4144]]],[21,"base",[-636,-637,-638,-639,-640,-641,-642,-643,-644,-645,-646,-647,-648,-649,-650,-651,-652],[[23,[null],-635,[0],4260]]],[21,"base",[-654,-655,-656,-657,-658,-659,-660,-661,-662,-663,-664,-665,-666,-667,-668,-669,-670],[[23,[null],-653,[0],4376]]],[21,"base",[-672,-673,-674,-675,-676,-677,-678,-679,-680,-681,-682,-683,-684,-685,-686,-687,-688],[[23,[null],-671,[0],4492]]],[21,"base",[-690,-691,-692,-693,-694,-695,-696,-697,-698,-699,-700,-701,-702,-703,-704,-705,-706],[[23,[null],-689,[0],4608]]],[21,"base",[-708,-709,-710,-711,-712,-713,-714,-715,-716,-717,-718,-719,-720,-721,-722,-723,-724],[[23,[null],-707,[0],4724]]],[21,"base",[-726,-727,-728,-729,-730,-731,-732,-733,-734,-735,-736,-737,-738,-739,-740,-741,-742],[[23,[null],-725,[0],4840]]],[21,"base",[-744,-745,-746,-747,-748,-749,-750,-751,-752,-753,-754,-755,-756,-757,-758,-759,-760],[[23,[null],-743,[0],4956]]],[21,"base",[-762,-763,-764,-765,-766,-767,-768,-769,-770,-771,-772,-773,-774,-775,-776,-777,-778],[[23,[null],-761,[0],5072]]],[21,"base",[-780,-781,-782,-783,-784,-785,-786,-787,-788,-789,-790,-791,-792,-793,-794,-795,-796],[[23,[null],-779,[0],5188]]],[21,"base",[-798,-799,-800,-801,-802,-803,-804,-805,-806,-807,-808,-809,-810,-811,-812,-813,-814],[[23,[null],-797,[0],5304]]],[21,"base",[-816,-817,-818,-819,-820,-821,-822,-823,-824,-825,-826,-827,-828,-829,-830,-831,-832],[[23,[null],-815,[0],5420]]],[21,"base",[-834,-835,-836,-837,-838,-839,-840,-841,-842,-843,-844,-845,-846,-847,-848,-849,-850],[[23,[null],-833,[0],5536]]],[54,"Pos_1",false,[-851,-852,-853,-854,-855,-856,-857,-858,-859],[1,11.349,0.432,-16.573]],[54,"Pos_2",false,[-860,-861,-862,-863,-864,-865,-866,-867,-868],[1,7.886,0.432,-16.573]],[54,"Pos_3",false,[-869,-870,-871,-872,-873,-874,-875,-876,-877],[1,4.647,0.432,-16.573]],[54,"Pos_4",false,[-878,-879,-880,-881,-882,-883,-884,-885,-886],[1,1.011,0.432,-16.573]],[54,"Pos_5",false,[-887,-888,-889,-890,-891,-892,-893,-894,-895],[1,-2.429,0.432,-16.573]],[54,"Pos_6",false,[-896,-897,-898,-899,-900,-901,-902,-903,-904],[1,-5.883,0.432,-16.573]],[54,"Pos_7",false,[-905,-906,-907,-908,-909,-910,-911,-912,-913],[1,-9.544,0.432,-16.573]],[54,"Pos_8",false,[-914,-915,-916,-917,-918,-919,-920,-921,-922],[1,-13.016,0.432,-16.573]],[7,"Node",[-923,-924,-925,-926,-927,-928,-929,-930,-931,-932,-933,-934,-935,-936,-937,-938,-939]],[7,"Node",[-940,-941,-942,-943,-944,-945,-946,-947,-948,-949,-950,-951,-952,-953,-954,-955,-956]],[7,"Node",[-957,-958,-959,-960,-961,-962,-963,-964,-965,-966,-967,-968,-969,-970,-971,-972,-973]],[21,"0_Car_FourSeater",[-975,-976,-977,-978,-979,-980,-981,-982,-983,-984,-985,-986,-987,-988,-989,-990],[[23,[null],-974,[0],5638]]],[21,"0_Car_FourSeater",[-992,-993,-994,-995,-996,-997,-998,-999,-1000,-1001,-1002,-1003,-1004,-1005,-1006,-1007],[[23,[null],-991,[0],5912]]],[21,"0_Car_FourSeater",[-1009,-1010,-1011,-1012,-1013,-1014,-1015,-1016,-1017,-1018,-1019,-1020,-1021,-1022,-1023,-1024],[[23,[null],-1008,[0],5994]]],[21,"0_Car_FourSeater",[-1026,-1027,-1028,-1029,-1030,-1031,-1032,-1033,-1034,-1035,-1036,-1037,-1038,-1039,-1040,-1041],[[23,[null],-1025,[0],6076]]],[59,"RoadFence",[-1042,-1043,-1044,-1045,-1046,-1047,-1048,-1049,-1050,-1051,-1052,-1053],[1,-1.601,0,0]],[59,"RoadFence",[-1054,-1055,-1056,-1057,-1058,-1059,-1060,-1061,-1062,-1063,-1064,-1065],[1,-1.601,0,0]],[59,"RoadFence",[-1066,-1067,-1068,-1069,-1070,-1071,-1072,-1073,-1074,-1075,-1076,-1077],[1,-1.601,0,0]],[59,"RoadFence",[-1078,-1079,-1080,-1081,-1082,-1083,-1084,-1085,-1086,-1087,-1088,-1089],[1,-1.601,0,0]],[21,"base",[-1091,-1092,-1093,-1094,-1095,-1096,-1097,-1098,-1099,-1100,-1101],[[23,[null],-1090,[0],908]]],[118,"Fences",[-1102,-1103,-1104,-1105,-1106,-1107,-1108,-1109,-1110,-1111,-1112],[1,3.608,0,2.846],[1,1.2,1.2,1.2]],[21,"base",[-1114,-1115,-1116,-1117,-1118,-1119,-1120,-1121,-1122,53],[[2,-1113,[1007],[0],1008]]],[21,"base",[-1124,-1125,-1126,-1127,-1128,-1129,-1130,-1131,-1132,54],[[2,-1123,[1119],[0],1120]]],[21,"base",[-1134,-1135,-1136,-1137,-1138,-1139,-1140,-1141,-1142,55],[[2,-1133,[1231],[0],1232]]],[38,"Bus_10Seat_2_Destroyer",1,[66,-1148,-1149,-1150],[[28,-1143,[1,0,0.5,0],[1,1.3,1,4.2]],[93,256,5000,-1144,[1,1,0,1]],[94,-1145],[95,"Blue","Bus",-1147,-1146]],[1,-3.894,0,-45.937],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[16,"CustomerSeats",69,[-1151,-1152,-1153,-1154,-1155,-1156,-1157,-1158,-1159,-1160]],[7,"CustomerSeats",[-1161,-1162,-1163,-1164,-1165,-1166,-1167,-1168,-1169,-1170]],[7,"CustomerSeats",[-1171,-1172,-1173,-1174,-1175,-1176,-1177,-1178,-1179,-1180]],[7,"Road",[-1181,-1182,-1183,-1184,-1185,-1186,-1187,-1188,-1189]],[59,"RoadFence",[-1190,-1191,-1192,-1193,-1194,-1195,-1196,-1197,-1198],[1,-1.601,0,0]],[38,"Bus_10Seat_6_Destroyer",1,[68,-1204,-1205,72],[[28,-1199,[1,0,0.5,0],[1,1.3,1,4.2]],[93,256,5000,-1200,[1,1,0,1]],[94,-1201],[95,"Pink","Bus",-1203,-1202]],[1,-7.036,0,-41.012],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[119,"SoundController","2cn1tkOQlEILpsO5036KlG",[-1215,-1216,-1217,-1218,-1219,-1220,-1221,-1222],[[161,-1214,-1213,-1212,-1211,-1210,-1209,-1208,-1207,-1206]]],[7,"PosStops",[45,46,47,48,49,50,51,52]],[7,"Hor",[-1223,-1224,-1225,-1226,-1227,-1228,-1229,-1230]],[7,"Hor",[-1231,-1232,-1233,-1234,-1235,-1236,-1237,-1238]],[7,"Hor",[-1239,-1240,-1241,-1242,-1243,-1244,-1245,-1246]],[7,"Hor",[-1247,-1248,-1249,-1250,-1251,-1252,-1253,-1254]],[7,"Hor",[-1255,-1256,-1257,-1258,-1259,-1260,-1261,-1262]],[16,"Shatter",64,[-1263,-1264,-1265,-1266,-1267,-1268,-1269,-1270]],[8,"Origin",false,64,[-1271,-1272,-1273,-1274,-1275,-1276,-1277,-1278]],[38,"Bus_10Seat_3_Destroyer",1,[67,-1284,-1285,71],[[28,-1279,[1,0,0.5,0],[1,1.3,1,4.2]],[93,256,5000,-1280,[1,1,0,1]],[94,-1281],[95,"Green","Bus",-1283,-1282]],[1,-9.145,0,-36.264],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,-90,0]],[162,"BusSort_PA_09_EN",[-1568,-1569,-1570,-1571,-1572,76,-1573],[142,"c029f937-0c79-47f0-b743-6cf188e6bb7b",[[163,["car_Top"],69,[3,["24pUEzIWRMNK5Sj3RFoSzp"]],69,[3,["c8ivRqeDNAYI5upDSn+2NW"]]]],[-1286,-1287,-1288,-1289,-1290,-1291,-1292,-1293,-1294,-1295,-1296,-1297,-1298,-1299,-1300,-1301,-1302,-1303,-1304,-1305,-1306,-1307,-1308,-1309,-1310,-1311,-1312,-1313,-1314,-1315,-1316,-1317,-1318,-1319,-1320,-1321,-1322,-1323,-1324,-1325,-1326,-1327,-1328,-1329,-1330,-1331,-1332,-1333,-1334,-1335,-1336,-1337,-1338,-1339,-1340,-1341,-1342,-1343,-1344,-1345,-1346,-1347,-1348,-1349,-1350,-1351,-1352,-1353,-1354,-1355,-1356,-1357,-1358,-1359,-1360,-1361,-1362,-1363,-1364,-1365,-1366,-1367,-1368,-1369,-1370,-1371,-1372,-1373,-1374,-1375,-1376,-1377,-1378,-1379,-1380,-1381,-1382,-1383,-1384,-1385,-1386,-1387,-1388,-1389,-1390,-1391,-1392,-1393,-1394,-1395,-1396,-1397,-1398,-1399,-1400,-1401,-1402,-1403,-1404,-1405,-1406,-1407,-1408,-1409,-1410,-1411,-1412,-1413,-1414,-1415,-1416,-1417,-1418,-1419,-1420,-1421,-1422,-1423,-1424,-1425,-1426,-1427,-1428,-1429,-1430,-1431,-1432,-1433,-1434,-1435,-1436,-1437,-1438,-1439,-1440,-1441,-1442,-1443,-1444,-1445,-1446,-1447,-1448,-1449,-1450,-1451,-1452,-1453,-1454,-1455,-1456,-1457,-1458,-1459,-1460,-1461,-1462,-1463,-1464,-1465,-1466,-1467,-1468,-1469,-1470,-1471,-1472,-1473,-1474,-1475,-1476,-1477,-1478,-1479,-1480,-1481,-1482,-1483,-1484,-1485,-1486,-1487,-1488,-1489,-1490,-1491,-1492,-1493,-1494,-1495,-1496,-1497,-1498,-1499,-1500,-1501,-1502,-1503,-1504,-1505,-1506,-1507,-1508,-1509,-1510,-1511,-1512,-1513,-1514,-1515,-1516,-1517,-1518,-1519,-1520,-1521,-1522,-1523,-1524,-1525,-1526,-1527,-1528,-1529,-1530,-1531,-1532,-1533,-1534,-1535,-1536,-1537,-1538,-1539,-1540,-1541,-1542,-1543,-1544,-1545,-1546,-1547,-1548,-1549,-1550,-1551,-1552,-1553,-1554,-1555,-1556,-1557,-1558,-1559,-1560,-1561,-1562,-1563,-1564,-1565,-1566,-1567]],[164,[165,0.5208,[2,0.2392156862745098,0.3607843137254902,0.796078431372549,0.520833125],[2,0.2392156862745098,0.3607843137254902,0.796078431372549,1],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[166,1,true,2,[4,4283190348],[0,2048,2048]],[167,true,6098,6099],[168],[169]]],[120,"Canvas",33554432,"7edGxmwbtFRpC1ynJ5VQt/",86,[-1578,-1579],[[51,-1574,[5,320,480]],[171,-1576,-1575],[172,45,-2.842170943040401e-14,-2.842170943040401e-14,-1577]],[1,160,239.99999999999997,0]],[136,"UIGameController",33554432,87,[-1582,-1583,-1584,-1585,-1586],[[[46,-1580],-1581],4,1]],[38,"Car_4Seat_2_enabledClick_1",1,[64,-1590,-1591,-1592],[[28,-1587,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1588],[33,-1589]],[1,2.653,0,-29.352],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_2",1,[8,-1596,-1597,-1598],[[28,-1593,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1594],[33,-1595]],[1,2.653,0,-32.04],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_3",1,[9,-1602,-1603,-1604],[[28,-1599,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1600],[33,-1601]],[1,2.653,0,-34.845],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_4",1,[10,-1608,-1609,-1610],[[28,-1605,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1606],[33,-1607]],[1,0.112,0,-37.763],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_5",1,[11,-1614,-1615,-1616],[[28,-1611,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1612],[33,-1613]],[1,-4.127,0,-36.437],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_6",1,[12,-1620,-1621,-1622],[[28,-1617,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1618],[33,-1619]],[1,2.653,0,-39.879],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_7",1,[13,-1626,-1627,-1628],[[28,-1623,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1624],[33,-1625]],[1,2.653,0,-43.069],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_8",1,[14,-1632,-1633,-1634],[[28,-1629,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1630],[33,-1631]],[1,2.529,0,-46.448],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_9",1,[15,-1638,-1639,-1640],[[28,-1635,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1636],[33,-1637]],[1,-1.439,0,-41.685],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_10",1,[16,-1644,-1645,-1646],[[28,-1641,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1642],[33,-1643]],[1,-14.042,0,-30.36],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_11",1,[17,-1650,-1651,-1652],[[28,-1647,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1648],[33,-1649]],[1,-14.042,0,-32.657],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_12",1,[18,-1656,-1657,-1658],[[28,-1653,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1654],[33,-1655]],[1,-14.304,0,-36.083],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_13",1,[19,-1662,-1663,-1664],[[28,-1659,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1660],[33,-1661]],[1,-10.661,0,-32.004],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_14",1,[20,-1668,-1669,-1670],[[28,-1665,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1666],[33,-1667]],[1,-14.042,0,-39.583],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_15",1,[21,-1674,-1675,-1676],[[28,-1671,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1672],[33,-1673]],[1,-14.042,0,-41.85],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[38,"Car_4Seat_2_enabledClick_16",1,[22,-1680,-1681,-1682],[[28,-1677,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1678],[33,-1679]],[1,-14.166,0,-44.768],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_17",1,[23,-1686,-1687,-1688],[[28,-1683,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1684],[33,-1685]],[1,-16.099,0,-48.247],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_18",1,[24,-1692,-1693,-1694],[[28,-1689,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1690],[33,-1691]],[1,-13.142,0,-48.247],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_19",1,[25,-1698,-1699,-1700],[[28,-1695,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1696],[33,-1697]],[1,-10.559,0,-44.718],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_20",1,[26,-1704,-1705,-1706],[[28,-1701,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1702],[33,-1703]],[1,-1.498,0,-33.663],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_21",1,[27,-1710,-1711,-1712],[[28,-1707,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1708],[33,-1709]],[1,-16.944,0,-36.083],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_22",1,[28,-1716,-1717,-1718],[[28,-1713,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1714],[33,-1715]],[1,-4.673,0,-29.241],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_23",1,[29,-1722,-1723,-1724],[[28,-1719,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1720],[33,-1721]],[1,-1.716,0,-29.241],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_24",1,[30,-1728,-1729,-1730],[[28,-1725,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1726],[33,-1727]],[1,-6.322,0,-32.657],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_25",1,[31,-1734,-1735,-1736],[[28,-1731,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1732],[33,-1733]],[1,-8.008,0,-53.448],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_26",1,[32,-1740,-1741,-1742],[[28,-1737,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1738],[33,-1739]],[1,-5.425,0,-49.919],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_27",1,[33,-1746,-1747,-1748],[[28,-1743,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1744],[33,-1745]],[1,3.636,0,-54.1],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_28",1,[34,-1752,-1753,-1754],[[28,-1749,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1750],[33,-1751]],[1,-8.562,0,-48.455],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_29",1,[35,-1758,-1759,-1760],[[28,-1755,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1756],[33,-1757]],[1,0.461,0,-49.678],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_30",1,[36,-1764,-1765,-1766],[[28,-1761,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1762],[33,-1763]],[1,3.418,0,-49.678],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_31",1,[37,-1770,-1771,-1772],[[28,-1767,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1768],[33,-1769]],[1,-1.188,0,-53.094],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_32",1,[38,-1776,-1777,-1778],[[28,-1773,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1774],[33,-1775]],[1,-14.197,0,-53.489],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_33",1,[39,-1782,-1783,-1784],[[28,-1779,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1780],[33,-1781]],[1,-15.846,0,-56.905],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_34",1,[40,-1788,-1789,-1790],[[28,-1785,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1786],[33,-1787]],[1,-11.24,0,-53.489],[1,1.5,1.5,1.5]],[36,"Car_4Seat_2_enabledClick_35",1,[41,-1794,-1795,-1796],[[28,-1791,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1792],[33,-1793]],[1,-2.451,0,-56.694],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_36",1,[42,-1800,-1801,-1802],[[28,-1797,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1798],[33,-1799]],[1,-6.536,0,-57.424],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[36,"Car_4Seat_2_enabledClick_37",1,[43,-1806,-1807,-1808],[[28,-1803,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1804],[33,-1805]],[1,0.475,0,-56.694],[1,1.5,1.5,1.5]],[38,"Car_4Seat_2_enabledClick_38",1,[44,-1812,-1813,-1814],[[28,-1809,[1,0,0.5,0.1],[1,1,1,2.6]],[32,2,-1810],[33,-1811]],[1,-11.084,0,-57.424],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[59,"Road",[73,-1815,1,-1816,7,-1817],[1,6.117,0,0]],[7,"background",[-1818,-1819,-1820,-1821,-1822,-1823]],[121,"CTA",false,33554432,88,[-1826,-1827,-1828],[[46,-1824],[96,true,-1825,[6090],6091]]],[16,"RoadDecor",127,[-1829,-1830,-1831,-1832,-1833]],[16,"Points",127,[-1834,-1835,-1836,-1837,-1838]],[72,"Tutorial",33554432,88,[-1842,-1843],[[46,-1839],[173,-1841,-1840,87,75]]],[7,"Theme",[65,-1844,77,128]],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,["c1mtYY/tlaN654NwNX6HH6"]],[16,"Total_1",130,[-1845,-1846,74,-1847]],[7,"Top",[-1848,-1849,-1850,-1851]],[7,"Top",[-1852,-1853,-1854,-1855]],[7,"Top",[-1856,-1857,-1858,-1859]],[7,"Top",[-1860,-1861,-1862,-1863]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",89,[-1864,-1865,-1866,-1867]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1868,-1869,-1870,-1871]],[7,"Top",[-1872,-1873,-1874,-1875]],[7,"Top",[-1876,-1877,-1878,-1879]],[7,"Top",[-1880,-1881,-1882,-1883]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",90,[-1884,-1885,-1886,-1887]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1888,-1889,-1890,-1891]],[7,"Top",[-1892,-1893,-1894,-1895]],[7,"Top",[-1896,-1897,-1898,-1899]],[7,"Top",[-1900,-1901,-1902,-1903]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",91,[-1904,-1905,-1906,-1907]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1908,-1909,-1910,-1911]],[7,"Top",[-1912,-1913,-1914,-1915]],[7,"Top",[-1916,-1917,-1918,-1919]],[7,"Top",[-1920,-1921,-1922,-1923]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",92,[-1924,-1925,-1926,-1927]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1928,-1929,-1930,-1931]],[7,"Top",[-1932,-1933,-1934,-1935]],[7,"Top",[-1936,-1937,-1938,-1939]],[7,"Top",[-1940,-1941,-1942,-1943]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",93,[-1944,-1945,-1946,-1947]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1948,-1949,-1950,-1951]],[7,"Top",[-1952,-1953,-1954,-1955]],[7,"Top",[-1956,-1957,-1958,-1959]],[7,"Top",[-1960,-1961,-1962,-1963]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",94,[-1964,-1965,-1966,-1967]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1968,-1969,-1970,-1971]],[7,"Top",[-1972,-1973,-1974,-1975]],[7,"Top",[-1976,-1977,-1978,-1979]],[7,"Top",[-1980,-1981,-1982,-1983]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",95,[-1984,-1985,-1986,-1987]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-1988,-1989,-1990,-1991]],[7,"Top",[-1992,-1993,-1994,-1995]],[7,"Top",[-1996,-1997,-1998,-1999]],[7,"Top",[-2000,-2001,-2002,-2003]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",96,[-2004,-2005,-2006,-2007]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2008,-2009,-2010,-2011]],[7,"Top",[-2012,-2013,-2014,-2015]],[7,"Top",[-2016,-2017,-2018,-2019]],[7,"Top",[-2020,-2021,-2022,-2023]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",97,[-2024,-2025,-2026,-2027]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2028,-2029,-2030,-2031]],[7,"Top",[-2032,-2033,-2034,-2035]],[7,"Top",[-2036,-2037,-2038,-2039]],[7,"Top",[-2040,-2041,-2042,-2043]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",98,[-2044,-2045,-2046,-2047]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2048,-2049,-2050,-2051]],[7,"Top",[-2052,-2053,-2054,-2055]],[7,"Top",[-2056,-2057,-2058,-2059]],[7,"Top",[-2060,-2061,-2062,-2063]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",99,[-2064,-2065,-2066,-2067]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2068,-2069,-2070,-2071]],[7,"Top",[-2072,-2073,-2074,-2075]],[7,"Top",[-2076,-2077,-2078,-2079]],[7,"Top",[-2080,-2081,-2082,-2083]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",100,[-2084,-2085,-2086,-2087]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2088,-2089,-2090,-2091]],[7,"Top",[-2092,-2093,-2094,-2095]],[7,"Top",[-2096,-2097,-2098,-2099]],[7,"Top",[-2100,-2101,-2102,-2103]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",101,[-2104,-2105,-2106,-2107]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2108,-2109,-2110,-2111]],[7,"Top",[-2112,-2113,-2114,-2115]],[7,"Top",[-2116,-2117,-2118,-2119]],[7,"Top",[-2120,-2121,-2122,-2123]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",102,[-2124,-2125,-2126,-2127]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2128,-2129,-2130,-2131]],[7,"Top",[-2132,-2133,-2134,-2135]],[7,"Top",[-2136,-2137,-2138,-2139]],[7,"Top",[-2140,-2141,-2142,-2143]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",103,[-2144,-2145,-2146,-2147]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2148,-2149,-2150,-2151]],[7,"Top",[-2152,-2153,-2154,-2155]],[7,"Top",[-2156,-2157,-2158,-2159]],[7,"Top",[-2160,-2161,-2162,-2163]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",104,[-2164,-2165,-2166,-2167]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2168,-2169,-2170,-2171]],[7,"Top",[-2172,-2173,-2174,-2175]],[7,"Top",[-2176,-2177,-2178,-2179]],[7,"Top",[-2180,-2181,-2182,-2183]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",105,[-2184,-2185,-2186,-2187]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2188,-2189,-2190,-2191]],[7,"Top",[-2192,-2193,-2194,-2195]],[7,"Top",[-2196,-2197,-2198,-2199]],[7,"Top",[-2200,-2201,-2202,-2203]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",106,[-2204,-2205,-2206,-2207]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2208,-2209,-2210,-2211]],[7,"Top",[-2212,-2213,-2214,-2215]],[7,"Top",[-2216,-2217,-2218,-2219]],[7,"Top",[-2220,-2221,-2222,-2223]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",107,[-2224,-2225,-2226,-2227]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2228,-2229,-2230,-2231]],[7,"Top",[-2232,-2233,-2234,-2235]],[7,"Top",[-2236,-2237,-2238,-2239]],[7,"Top",[-2240,-2241,-2242,-2243]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",108,[-2244,-2245,-2246,-2247]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2248,-2249,-2250,-2251]],[7,"Top",[-2252,-2253,-2254,-2255]],[7,"Top",[-2256,-2257,-2258,-2259]],[7,"Top",[-2260,-2261,-2262,-2263]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",109,[-2264,-2265,-2266,-2267]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2268,-2269,-2270,-2271]],[7,"Top",[-2272,-2273,-2274,-2275]],[7,"Top",[-2276,-2277,-2278,-2279]],[7,"Top",[-2280,-2281,-2282,-2283]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",110,[-2284,-2285,-2286,-2287]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2288,-2289,-2290,-2291]],[7,"Top",[-2292,-2293,-2294,-2295]],[7,"Top",[-2296,-2297,-2298,-2299]],[7,"Top",[-2300,-2301,-2302,-2303]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",111,[-2304,-2305,-2306,-2307]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2308,-2309,-2310,-2311]],[7,"Top",[-2312,-2313,-2314,-2315]],[7,"Top",[-2316,-2317,-2318,-2319]],[7,"Top",[-2320,-2321,-2322,-2323]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",112,[-2324,-2325,-2326,-2327]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2328,-2329,-2330,-2331]],[7,"Top",[-2332,-2333,-2334,-2335]],[7,"Top",[-2336,-2337,-2338,-2339]],[7,"Top",[-2340,-2341,-2342,-2343]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",113,[-2344,-2345,-2346,-2347]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2348,-2349,-2350,-2351]],[7,"Top",[-2352,-2353,-2354,-2355]],[7,"Top",[-2356,-2357,-2358,-2359]],[7,"Top",[-2360,-2361,-2362,-2363]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",114,[-2364,-2365,-2366,-2367]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2368,-2369,-2370,-2371]],[7,"Top",[-2372,-2373,-2374,-2375]],[7,"Top",[-2376,-2377,-2378,-2379]],[7,"Top",[-2380,-2381,-2382,-2383]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",115,[-2384,-2385,-2386,-2387]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2388,-2389,-2390,-2391]],[7,"Top",[-2392,-2393,-2394,-2395]],[7,"Top",[-2396,-2397,-2398,-2399]],[7,"Top",[-2400,-2401,-2402,-2403]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",116,[-2404,-2405,-2406,-2407]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2408,-2409,-2410,-2411]],[7,"Top",[-2412,-2413,-2414,-2415]],[7,"Top",[-2416,-2417,-2418,-2419]],[7,"Top",[-2420,-2421,-2422,-2423]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",117,[-2424,-2425,-2426,-2427]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2428,-2429,-2430,-2431]],[7,"Top",[-2432,-2433,-2434,-2435]],[7,"Top",[-2436,-2437,-2438,-2439]],[7,"Top",[-2440,-2441,-2442,-2443]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",118,[-2444,-2445,-2446,-2447]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2448,-2449,-2450,-2451]],[7,"Top",[-2452,-2453,-2454,-2455]],[7,"Top",[-2456,-2457,-2458,-2459]],[7,"Top",[-2460,-2461,-2462,-2463]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",119,[-2464,-2465,-2466,-2467]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2468,-2469,-2470,-2471]],[7,"Top",[-2472,-2473,-2474,-2475]],[7,"Top",[-2476,-2477,-2478,-2479]],[7,"Top",[-2480,-2481,-2482,-2483]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",120,[-2484,-2485,-2486,-2487]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2488,-2489,-2490,-2491]],[7,"Top",[-2492,-2493,-2494,-2495]],[7,"Top",[-2496,-2497,-2498,-2499]],[7,"Top",[-2500,-2501,-2502,-2503]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",121,[-2504,-2505,-2506,-2507]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2508,-2509,-2510,-2511]],[7,"Top",[-2512,-2513,-2514,-2515]],[7,"Top",[-2516,-2517,-2518,-2519]],[7,"Top",[-2520,-2521,-2522,-2523]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",122,[-2524,-2525,-2526,-2527]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2528,-2529,-2530,-2531]],[7,"Top",[-2532,-2533,-2534,-2535]],[7,"Top",[-2536,-2537,-2538,-2539]],[7,"Top",[-2540,-2541,-2542,-2543]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",123,[-2544,-2545,-2546,-2547]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2548,-2549,-2550,-2551]],[7,"Top",[-2552,-2553,-2554,-2555]],[7,"Top",[-2556,-2557,-2558,-2559]],[7,"Top",[-2560,-2561,-2562,-2563]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",124,[-2564,-2565,-2566,-2567]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2568,-2569,-2570,-2571]],[7,"Top",[-2572,-2573,-2574,-2575]],[7,"Top",[-2576,-2577,-2578,-2579]],[7,"Top",[-2580,-2581,-2582,-2583]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",125,[-2584,-2585,-2586,-2587]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[7,"Top",[-2588,-2589,-2590,-2591]],[7,"Top",[-2592,-2593,-2594,-2595]],[7,"Top",[-2596,-2597,-2598,-2599]],[7,"Top",[-2600,-2601,-2602,-2603]],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[16,"CustomerSeats",126,[-2604,-2605,-2606,-2607]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[3,["a5V4sYW6tC26fEyxts/NBS"]],[101,"box chat",33554432,132,[-2611],[[51,-2608,[5,878,607]],[97,-2609,6080],[96,true,-2610,[6081],6082]],[1,37,80,0],[1,0.2,0.2,1]],[101,"2",33554432,129,[-2614],[[51,-2612,[5,442,148]],[98,-2613,[4,16777215],6089]],[1,0,-130,0],[1,0.5,0.5,1]],[122,"PS_base",33554432,[-2616,-2617,-2618],[[46,-2615]],[1,0,166.475,0],[1,0.5,0.5,1]],[174,1,1083179008],[72,"TouchArea",33554432,88,[-2620],[[46,-2619]]],[86,"HideMask",33554432,552,[[51,-2621,[5,5000,5000]],[114,0,-2622,[4,16777215],0],[176,-2625,-2624,-2623,551]]],[123,0,null,[11,"4c+7DECGFZFYngLa8ew/xa",-2626,[177,"2bfy9ExdtOLpeHyV6Y44Dp",null,[[14,"Board",["_name"],[3,["4c+7DECGFZFYngLa8ew/xa"]]],[20,["_lpos"],[3,["4c+7DECGFZFYngLa8ew/xa"]],[1,2.234,0,-4.932]],[20,["_lrot"],[3,["4c+7DECGFZFYngLa8ew/xa"]],[3,0,0,0,1]],[20,["_euler"],[3,["4c+7DECGFZFYngLa8ew/xa"]],[1,0,0,0]],[14,true,["lightmapSettings","_castShadow"],[3,["c40DvkosFTG4xuWPwT/8OO"]]],[14,1,["_shadowCastingMode"],[3,["c40DvkosFTG4xuWPwT/8OO"]]],[10,["_materials","0"],[3,["c40DvkosFTG4xuWPwT/8OO"]],6078],[20,["_lscale"],[3,["4c+7DECGFZFYngLa8ew/xa"]],[1,1.5,1.5,1.5]]]],6077]],[7,"Map_Base",[-2627,127,133]],[19,"Root_M",46,[-2628,-2629,-2630],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",556,[-2631,-2632,-2633],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",47,[-2634,-2635,-2636],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",558,[-2637,-2638,-2639],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",48,[-2640,-2641,-2642],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",560,[-2643,-2644,-2645],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",49,[-2646,-2647,-2648],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",562,[-2649,-2650,-2651],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",50,[-2652,-2653,-2654],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",564,[-2655,-2656,-2657],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",51,[-2658,-2659,-2660],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",566,[-2661,-2662,-2663],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",52,[-2664,-2665,-2666],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",568,[-2667,-2668,-2669],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[19,"Root_M",45,[-2670,-2671,-2672],[1,3.9149912452930515e-17,1.2360268831253052,-0.03519256040453911],[3,0.475868199430923,0.5230195567761986,0.475868199430923,0.5230195567761986],[1,0,89.99999999999993,84.59484835418444]],[19,"Chest_M",570,[-2673,-2674,-2675],[1,0.6709528565406799,-3.552713599391162e-17,-1.6621606780145933e-16],[3,1.1083758474249727e-16,-2.2735755957874324e-17,0.057661169128846765,0.998336210689913],[1,1.2916032607158799e-14,-3.3556623766768893e-15,6.611150192934378]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[3,["ffkQedWfhWxpyCwcqK3O5O"]],[27,"RoadFace",137,[[5,"Plane<ModelComponent>",-2676,[353],[0],354],[63,4,2,-2677],[178,-2678]],[1,0,-0.08,-58.515],[1,20,20,20]],[73,"Total_2",130,[-2679,-2680,60],[1,-27.15,0,0]],[73,"Total_3",130,[-2681,-2682,61],[1,27.15,0,0]],[73,"Total_4",130,[-2683,-2684,62],[1,54.3,0,0]],[73,"Total_5",130,[-2685,-2686,63],[1,-54.3,0,0]],[7,"Top",[-2687,-2688,-2689]],[7,"Top",[-2690,-2691,-2692]],[7,"Top",[-2693,-2694,-2695]],[7,"Top",[-2696,-2697,-2698]],[7,"Top",[-2699,-2700,-2701]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2702,-2703]],[7,"Top",[-2704,-2705]],[7,"Top",[-2706,-2707]],[7,"Top",[-2708,-2709,-2710]],[7,"Top",[-2711,-2712,-2713]],[7,"Top",[-2714,-2715,-2716]],[7,"Top",[-2717,-2718,-2719]],[7,"Top",[-2720,-2721,-2722]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2723,-2724,-2725]],[7,"Top",[-2726,-2727,-2728]],[7,"Top",[-2729,-2730,-2731]],[7,"Top",[-2732,-2733,-2734]],[7,"Top",[-2735,-2736,-2737]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2738,-2739,-2740]],[7,"Top",[-2741,-2742,-2743]],[7,"Top",[-2744,-2745,-2746]],[7,"Top",[-2747,-2748,-2749]],[7,"Top",[-2750,-2751,-2752]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2753,-2754,-2755]],[7,"Top",[-2756,-2757,-2758]],[7,"Top",[-2759,-2760,-2761]],[7,"Top",[-2762,-2763,-2764]],[7,"Top",[-2765,-2766,-2767]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2768,-2769,-2770]],[7,"Top",[-2771,-2772,-2773]],[7,"Top",[-2774,-2775,-2776]],[7,"Top",[-2777,-2778,-2779]],[7,"Top",[-2780,-2781,-2782]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2783,-2784,-2785]],[7,"Top",[-2786,-2787,-2788]],[7,"Top",[-2789,-2790,-2791]],[7,"Top",[-2792,-2793,-2794]],[7,"Top",[-2795,-2796,-2797]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2798,-2799,-2800]],[7,"Top",[-2801,-2802,-2803]],[7,"Top",[-2804,-2805,-2806]],[7,"Top",[-2807,-2808,-2809]],[7,"Top",[-2810,-2811,-2812]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2813,-2814,-2815]],[7,"Top",[-2816,-2817,-2818]],[7,"Top",[-2819,-2820,-2821]],[7,"Top",[-2822,-2823,-2824]],[7,"Top",[-2825,-2826,-2827]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2828,-2829,-2830]],[7,"Top",[-2831,-2832,-2833]],[7,"Top",[-2834,-2835,-2836]],[7,"Top",[-2837,-2838,-2839]],[7,"Top",[-2840,-2841,-2842]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2843,-2844,-2845]],[7,"Top",[-2846,-2847,-2848]],[7,"Top",[-2849,-2850,-2851]],[7,"Top",[-2852,-2853,-2854]],[7,"Top",[-2855,-2856,-2857]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2858,-2859,-2860]],[7,"Top",[-2861,-2862,-2863]],[7,"Top",[-2864,-2865,-2866]],[7,"Top",[-2867,-2868,-2869]],[7,"Top",[-2870,-2871,-2872]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2873,-2874,-2875]],[7,"Top",[-2876,-2877,-2878]],[7,"Top",[-2879,-2880,-2881]],[7,"Top",[-2882,-2883,-2884]],[7,"Top",[-2885,-2886,-2887]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2888,-2889,-2890]],[7,"Top",[-2891,-2892,-2893]],[7,"Top",[-2894,-2895,-2896]],[7,"Top",[-2897,-2898,-2899]],[7,"Top",[-2900,-2901,-2902]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2903,-2904,-2905]],[7,"Top",[-2906,-2907,-2908]],[7,"Top",[-2909,-2910,-2911]],[7,"Top",[-2912,-2913,-2914]],[7,"Top",[-2915,-2916,-2917]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2918,-2919,-2920]],[7,"Top",[-2921,-2922,-2923]],[7,"Top",[-2924,-2925,-2926]],[7,"Top",[-2927,-2928,-2929]],[7,"Top",[-2930,-2931,-2932]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2933,-2934,-2935]],[7,"Top",[-2936,-2937,-2938]],[7,"Top",[-2939,-2940,-2941]],[7,"Top",[-2942,-2943,-2944]],[7,"Top",[-2945,-2946,-2947]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2948,-2949,-2950]],[7,"Top",[-2951,-2952,-2953]],[7,"Top",[-2954,-2955,-2956]],[7,"Top",[-2957,-2958,-2959]],[7,"Top",[-2960,-2961,-2962]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2963,-2964,-2965]],[7,"Top",[-2966,-2967,-2968]],[7,"Top",[-2969,-2970,-2971]],[7,"Top",[-2972,-2973,-2974]],[7,"Top",[-2975,-2976,-2977]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2978,-2979,-2980]],[7,"Top",[-2981,-2982,-2983]],[7,"Top",[-2984,-2985,-2986]],[7,"Top",[-2987,-2988,-2989]],[7,"Top",[-2990,-2991,-2992]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-2993,-2994,-2995]],[7,"Top",[-2996,-2997,-2998]],[7,"Top",[-2999,-3000,-3001]],[7,"Top",[-3002,-3003,-3004]],[7,"Top",[-3005,-3006,-3007]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3008,-3009,-3010]],[7,"Top",[-3011,-3012,-3013]],[7,"Top",[-3014,-3015,-3016]],[7,"Top",[-3017,-3018,-3019]],[7,"Top",[-3020,-3021,-3022]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3023,-3024,-3025]],[7,"Top",[-3026,-3027,-3028]],[7,"Top",[-3029,-3030,-3031]],[7,"Top",[-3032,-3033,-3034]],[7,"Top",[-3035,-3036,-3037]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3038,-3039,-3040]],[7,"Top",[-3041,-3042,-3043]],[7,"Top",[-3044,-3045,-3046]],[7,"Top",[-3047,-3048,-3049]],[7,"Top",[-3050,-3051,-3052]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3053,-3054,-3055]],[7,"Top",[-3056,-3057,-3058]],[7,"Top",[-3059,-3060,-3061]],[7,"Top",[-3062,-3063,-3064]],[7,"Top",[-3065,-3066,-3067]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3068,-3069,-3070]],[7,"Top",[-3071,-3072,-3073]],[7,"Top",[-3074,-3075,-3076]],[7,"Top",[-3077,-3078,-3079]],[7,"Top",[-3080,-3081,-3082]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3083,-3084,-3085]],[7,"Top",[-3086,-3087,-3088]],[7,"Top",[-3089,-3090,-3091]],[7,"Top",[-3092,-3093,-3094]],[7,"Top",[-3095,-3096,-3097]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3098,-3099,-3100]],[7,"Top",[-3101,-3102,-3103]],[7,"Top",[-3104,-3105,-3106]],[7,"Top",[-3107,-3108,-3109]],[7,"Top",[-3110,-3111,-3112]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3113,-3114,-3115]],[7,"Top",[-3116,-3117,-3118]],[7,"Top",[-3119,-3120,-3121]],[7,"Top",[-3122,-3123,-3124]],[7,"Top",[-3125,-3126,-3127]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3128,-3129,-3130]],[7,"Top",[-3131,-3132,-3133]],[7,"Top",[-3134,-3135,-3136]],[7,"Top",[-3137,-3138,-3139]],[7,"Top",[-3140,-3141,-3142]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3143,-3144,-3145]],[7,"Top",[-3146,-3147,-3148]],[7,"Top",[-3149,-3150,-3151]],[7,"Top",[-3152,-3153,-3154]],[7,"Top",[-3155,-3156,-3157]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3158,-3159,-3160]],[7,"Top",[-3161,-3162,-3163]],[7,"Top",[-3164,-3165,-3166]],[7,"Top",[-3167,-3168,-3169]],[7,"Top",[-3170,-3171,-3172]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3173,-3174,-3175]],[7,"Top",[-3176,-3177,-3178]],[7,"Top",[-3179,-3180,-3181]],[7,"Top",[-3182,-3183,-3184]],[7,"Top",[-3185,-3186,-3187]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3188,-3189,-3190]],[7,"Top",[-3191,-3192,-3193]],[7,"Top",[-3194,-3195,-3196]],[7,"Top",[-3197,-3198,-3199]],[7,"Top",[-3200,-3201,-3202]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3203,-3204,-3205]],[7,"Top",[-3206,-3207,-3208]],[7,"Top",[-3209,-3210,-3211]],[7,"Top",[-3212,-3213,-3214]],[7,"Top",[-3215,-3216,-3217]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3218,-3219,-3220]],[7,"Top",[-3221,-3222,-3223]],[7,"Top",[-3224,-3225,-3226]],[7,"Top",[-3227,-3228,-3229]],[7,"Top",[-3230,-3231,-3232]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3233,-3234,-3235]],[7,"Top",[-3236,-3237,-3238]],[7,"Top",[-3239,-3240,-3241]],[7,"Top",[-3242,-3243,-3244]],[7,"Top",[-3245,-3246,-3247]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[7,"Top",[-3248,-3249,-3250]],[7,"Top",[-3251,-3252,-3253]],[7,"Top",[-3254,-3255,-3256]],[7,"Top",[-3257,-3258,-3259]],[7,"Top",[-3260,-3261,-3262]],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[27,"PointA_1",131,[[66,"Cube<ModelComponent>",false,-3263,[5547],[0],5548],[71,-3264],[63,8,2,-3265]],[1,8.687,0,-39.821],[1,1,1,50]],[27,"PointA_2",131,[[66,"Cube<ModelComponent>",false,-3266,[5549],[0],5550],[71,-3267],[63,8,2,-3268]],[1,-21.143,0,-39.821],[1,1,1,50]],[27,"PointA_3",131,[[66,"Cube<ModelComponent>",false,-3269,[5551],[0],5552],[71,-3270],[63,8,2,-3271]],[1,-6.18,0,-63.041],[1,30,1,1]],[27,"PointA_4",131,[[66,"Cube<ModelComponent>",false,-3272,[5553],[0],5554],[71,-3273],[63,8,2,-3274]],[1,-6.18,0,-23.027],[1,30,1,1]],[27,"PointB_1",131,[[66,"Cube<ModelComponent>",false,-3275,[5555],[0],5556],[71,-3276],[63,32,2,-3277]],[1,-6.18,0,-21.538],[1,30,1,1]],[7,"Top",[-3278,-3279,-3280]],[7,"Top",[-3281,-3282,-3283]],[7,"Top",[-3284,-3285,-3286]],[7,"Top",[-3287,-3288,-3289]],[7,"Top",[-3290,-3291,-3292]],[7,"Top",[-3293,-3294,-3295]],[7,"Top",[-3296,-3297,-3298]],[21,"0_Car_FourSeater",[-3300,-3301],[[23,[null],-3299,[0],5650]]],[7,"Top",[-3302,-3303,-3304]],[21,"0_Car_FourSeater",[-3306,-3307],[[23,[null],-3305,[0],5662]]],[7,"Top",[-3308,-3309,-3310]],[21,"0_Car_FourSeater",[-3312,-3313],[[23,[null],-3311,[0],5674]]],[7,"Top",[-3314,-3315,-3316]],[21,"0_Car_FourSeater",[-3318,-3319],[[23,[null],-3317,[0],5686]]],[7,"Top",[-3320,-3321,-3322]],[21,"0_Car_FourSeater",[-3324,-3325],[[23,[null],-3323,[0],5698]]],[7,"Top",[-3326,-3327,-3328]],[21,"0_Car_FourSeater",[-3330,-3331],[[23,[null],-3329,[0],5710]]],[7,"Top",[-3332,-3333,-3334]],[21,"0_Car_FourSeater",[-3336,-3337],[[23,[null],-3335,[0],5722]]],[7,"Top",[-3338,-3339,-3340]],[21,"0_Car_FourSeater",[-3342,-3343],[[23,[null],-3341,[0],5734]]],[7,"Top",[-3344,-3345,-3346]],[21,"0_Car_FourSeater",[-3348,-3349],[[23,[null],-3347,[0],5746]]],[7,"Top",[-3350,-3351,-3352]],[21,"0_Car_FourSeater",[-3354,-3355],[[23,[null],-3353,[0],5758]]],[7,"Top",[-3356,-3357,-3358]],[21,"0_Car_FourSeater",[-3360,-3361],[[23,[null],-3359,[0],5770]]],[7,"Top",[-3362,-3363,-3364]],[21,"0_Car_FourSeater",[-3366,-3367],[[23,[null],-3365,[0],5782]]],[7,"Top",[-3368,-3369,-3370]],[21,"0_Car_FourSeater",[-3372,-3373],[[23,[null],-3371,[0],5794]]],[7,"Top",[-3374,-3375,-3376]],[21,"0_Car_FourSeater",[-3378,-3379],[[23,[null],-3377,[0],5806]]],[7,"Top",[-3380,-3381,-3382]],[21,"0_Car_FourSeater",[-3384,-3385],[[23,[null],-3383,[0],5818]]],[7,"Top",[-3386,-3387,-3388]],[21,"0_Car_FourSeater",[-3390,-3391],[[23,[null],-3389,[0],5830]]],[7,"Top",[-3392,-3393,-3394]],[7,"Top",[-3395,-3396,-3397]],[7,"Top",[-3398,-3399,-3400]],[7,"Top",[-3401,-3402,-3403]],[7,"Top",[-3404,-3405,-3406]],[7,"Top",[-3407,-3408,-3409]],[7,"Top",[-3410,-3411,-3412]],[7,"Top",[-3413,-3414,-3415]],[7,"Top",[-3416,-3417,-3418]],[7,"Top",[-3419,-3420,-3421]],[7,"Top",[-3422,-3423,-3424]],[7,"Top",[-3425,-3426,-3427]],[7,"Top",[-3428,-3429,-3430]],[7,"Top",[-3431,-3432,-3433]],[7,"Top",[-3434,-3435,-3436]],[7,"Top",[-3437,-3438,-3439]],[7,"Top",[-3440,-3441,-3442]],[7,"Top",[-3443,-3444,-3445]],[7,"Top",[-3446,-3447,-3448]],[7,"Top",[-3449,-3450,-3451]],[7,"Top",[-3452,-3453,-3454]],[7,"Top",[-3455,-3456,-3457]],[137,"Queue_label",33554432,[[[51,-3458,[5,70.11999999999999,54]],-3459,[179,1.8,-3460]],4,1,4],[1,-16.362,0,0],[1,0.5,0.5,1]],[124,"icon_next",33554432,132,[[170,-3461,[5,122,107],[0,0,0.5]],[98,-3462,[4,4278452223],6083],[96,true,-3463,[6084],6085]],[1,-1.103,-75.39,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.5,0.5,1],[1,0,0,90]],[138,"Main Camera","c9DMICJLFO5IeO07EPon7U",86,[[551,[180,-3464]],1,4],[1,0,58,-68],[3,-3.0616169978683824e-17,-0.8660254037844387,-0.49999999999999994,5.3028761936245346e-17],[1,-60,-180,0]],[181,88,551,87,552,554,132,129,549],[182],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3465,[18,"943yuGlKBDubYhkCQO5DKF",[[13,"fence_1",["_name"],134],[4,["_lpos"],134,[1,-14,0.844,-15]],[4,["_lrot"],134,[3,0,0,0,1]],[4,["_euler"],134,[1,0,0,0]],[4,["_lscale"],134,[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],5],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],4]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3466,[18,"8a/3vxKQZH96gzWS9rQYhX",[[14,"fence_2",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-13,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],7],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],6]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3467,[18,"51vSqMXa5Oy7gPxnltM5/5",[[14,"fence_3",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-12,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],9],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],8]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3468,[18,"59gUBcF0JM0KyNbym/w4nh",[[14,"fence_4",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-11,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],11],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],10]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3469,[18,"9d7VZaDqdBFbFj0X7xAt8z",[[14,"fence_5",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-10,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],13],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],12]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3470,[18,"5bfUpNeg9GSqX/FsjDRZLm",[[14,"fence_6",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-9,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],15],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],14]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3471,[18,"f1Ewd5cP1LVKuICOx2hYN1",[[14,"fence_7",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-8,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],17],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],16]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3472,[18,"37rPzB14NGOr3g03lk89VT",[[14,"fence_8",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-7,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],19],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],18]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3473,[18,"baDrIcQRBI0ZpFhX3A1iPB",[[14,"fence_9",["_name"],[3,["c1mtYY/tlaN654NwNX6HH6"]]],[20,["_lpos"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,-6,0.844,-15]],[20,["_lrot"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[3,0,0,0,1]],[20,["_euler"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,0,0,0]],[20,["_lscale"],[3,["c1mtYY/tlaN654NwNX6HH6"]],[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],21],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],20]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3474,[18,"05J6uWNy5Kvoxilw521a86",[[13,"fence_10",["_name"],135],[4,["_lpos"],135,[1,-14,0.844,-13.942]],[4,["_lrot"],135,[3,0,0,0,1]],[4,["_euler"],135,[1,0,0,0]],[4,["_lscale"],135,[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],23],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],22]],[12,0,null,65,[11,"c1mtYY/tlaN654NwNX6HH6",-3475,[18,"68owp6PT9Af7qrXr3dSsl/",[[13,"fence_11",["_name"],136],[4,["_lpos"],136,[1,-14,0.844,-12.987]],[4,["_lrot"],136,[3,0,0,0,1]],[4,["_euler"],136,[1,0,0,0]],[4,["_lscale"],136,[1,1,1,1]],[10,["_materials","0"],[3,["d5vZtosShZMrETw++LdOyS"]],25],[20,["_lpos"],[3,["51ICkGKsRcmbMQJ9b8EUx6"]],[1,0,0,0]]]],24]],[61,"CustomerController",133,[-3478],[[183,-3477,-3476,[45,46,47,48,49,50,51,52],26]]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3479,[18,"601DaKJGtAo7SIlchSkkhj",[[13,"XMAS MAP",["_name"],572],[4,["_lpos"],572,[1,-1.924,0.17,-25.042]],[4,["_lrot"],572,[3,0,0,0,1]],[4,["_euler"],572,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],212],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],213],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],214],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],215],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],216],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],217],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],218],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],219],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],220],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],221],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],222],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],223],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],224],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],225],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],226],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],227],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],228],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],229]]],211]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3480,[18,"834MGbeWtAYZVBcGC3kXUs",[[13,"XMAS MAP-001",["_name"],573],[4,["_lpos"],573,[1,41.5,0.17,-25.042]],[4,["_lrot"],573,[3,0,0,0,1]],[4,["_euler"],573,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],231],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],232],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],233],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],234],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],235],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],236],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],237],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],238],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],239],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],240],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],241],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],242],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],243],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],244],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],245],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],246],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],247],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],248]]],230]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3481,[18,"f4cpbpaJJKFJNklID54JRC",[[13,"XMAS MAP-002",["_name"],574],[4,["_lpos"],574,[1,-45.694,0.17,-25.042]],[4,["_lrot"],574,[3,0,0,0,1]],[4,["_euler"],574,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],250],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],251],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],252],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],253],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],254],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],255],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],256],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],257],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],258],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],259],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],260],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],261],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],262],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],263],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],264],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],265],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],266],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],267]]],249]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3482,[18,"faXSy4wyRFcYk94dhv2KXn",[[13,"XMAS MAP-003",["_name"],575],[4,["_lpos"],575,[1,-1.924,0.17,-7.242]],[4,["_lrot"],575,[3,0,0,0,1]],[4,["_euler"],575,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],269],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],270],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],271],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],272],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],273],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],274],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],275],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],276],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],277],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],278],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],279],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],280],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],281],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],282],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],283],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],284],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],285],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],286]]],268]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3483,[18,"dag5hLmxdN1IMqFkkqSnOG",[[13,"XMAS MAP-004",["_name"],576],[4,["_lpos"],576,[1,41.5,0.17,-7.242]],[4,["_lrot"],576,[3,0,0,0,1]],[4,["_euler"],576,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],288],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],289],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],290],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],291],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],292],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],293],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],294],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],295],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],296],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],297],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],298],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],299],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],300],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],301],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],302],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],303],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],304],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],305]]],287]],[12,0,null,128,[11,"ffkQedWfhWxpyCwcqK3O5O",-3484,[18,"a06gvGzj9OjLIB+hEB6ZN8",[[13,"XMAS MAP-005",["_name"],577],[4,["_lpos"],577,[1,-45.694,0.17,-7.242]],[4,["_lrot"],577,[3,0,0,0,1]],[4,["_euler"],577,[1,0,0,0]],[10,["_materials","0"],[3,["5d8A0sO8pQvZAOoLQg8rCW"]],307],[10,["_materials","0"],[3,["17H5LrTHZRcJ3y2i607UrV"]],308],[10,["_materials","0"],[3,["96tuOi4ENZPLuY7qdtgzSc"]],309],[10,["_materials","0"],[3,["d3lJGy6o5faZ2E4axjJydu"]],310],[14,false,["_active"],[3,["41sCYD611XZZJADPNluZMY"]]],[10,["_materials","0"],[3,["51sL2D8LpViYFtIu7qLk00"]],311],[10,["_materials","0"],[3,["4aSypdtrhfwa7bxdJdItVV"]],312],[10,["_materials","0"],[3,["f8Cp28pOFd44uFFFdu9a6d"]],313],[10,["_materials","0"],[3,["84VbGa3KhawbTNkoLDtt96"]],314],[10,["_materials","0"],[3,["bfbZ9gxa1UyY5mIqWMAXuC"]],315],[10,["_materials","0"],[3,["7ctf5QoGpQHrCpuPCz2L8g"]],316],[10,["_materials","0"],[3,["c8Kg1Fv8xTWp9H7njCczML"]],317],[10,["_materials","0"],[3,["2fU6mCC0hUFovuY3N9lkOH"]],318],[10,["_materials","0"],[3,["5aOkNM4PxSJ4j7+HyDoIsf"]],319],[10,["_materials","0"],[3,["acNtW63PZRtavl9GswVBbF"]],320],[10,["_materials","0"],[3,["193N36F1dXObV84zURN92z"]],321],[10,["_materials","0"],[3,["d6VMhWZF5cUrlS4DS9j/PN"]],322],[10,["_materials","0"],[3,["7fFfFO2P1YQLvXWSGZuIHT"]],323],[10,["_materials","0"],[3,["39D36/ksBVdpV3+fh5zY+v"]],324]]],306]],[61,"extracted_04",73,[-3486],[[2,-3485,[329],[0],330]]],[61,"extracted_08",73,[-3488],[[2,-3487,[337],[0],338]]],[61,"extracted_06",73,[-3490],[[2,-3489,[341],[0],342]]],[61,"extracted_07",73,[-3492],[[2,-3491,[347],[0],348]]],[61,"extracted_05",73,[-3494],[[2,-3493,[351],[0],352]]],[16,"RoadLine",137,[78,2]],[36,"RoadFace",579,[-3496],[[5,"Plane<ModelComponent>",-3495,[437],[0],438]],[1,0,-0.08,-58.515],[1,10,10,10]],[16,"RoadLine",579,[79,3]],[36,"RoadFace",580,[-3498],[[5,"Plane<ModelComponent>",-3497,[525],[0],526]],[1,0,-0.08,-58.515],[1,10,10,10]],[16,"RoadLine",580,[80,4]],[36,"RoadFace",581,[-3500],[[5,"Plane<ModelComponent>",-3499,[613],[0],614]],[1,0,-0.08,-58.515],[1,10,10,10]],[16,"RoadLine",581,[81,5]],[36,"RoadFace",582,[-3502],[[5,"Plane<ModelComponent>",-3501,[701],[0],702]],[1,0,-0.08,-58.515],[1,10,10,10]],[16,"RoadLine",582,[82,6]],[8,"Red",false,64,[-3503,138]],[8,"Blue",false,64,[-3504,139]],[8,"Green",false,64,[-3505,583]],[8,"Orange",false,64,[-3506,584]],[8,"Pink",false,64,[-3507,585]],[8,"Purple",false,64,[-3508,586]],[8,"Yellow",false,64,[-3509,587]],[8,"Blue_light",false,64,[-3510,140]],[16,"White",64,[-3511,141]],[12,0,{},89,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3512,[18,"4ehnY9l3NBNKhlLuSaJE5l",[[13,"VFX_Smoke",["_name"],588],[4,["_lpos"],588,[1,0,0,-1.56]],[4,["_lrot"],588,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],588,[1,-180,0,0]]]],909]],[12,0,{},89,[11,"d2mwmZkD9FNrAfZAW7A39x",-3513,[18,"f8QZhQfhRMxoV2XojZ/pdl",[[13,"VFX_Impact2",["_name"],142],[4,["_lpos"],142,[1,0,0,1.2]],[4,["_lrot"],142,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],142,[1,90,0,0]],[4,["_lscale"],142,[1,1,1,1]]]],910]],[12,0,{},143,[11,"a5V4sYW6tC26fEyxts/NBS",-3514,[15,"98Mtv2iLFMn6AaIGzC9Ecu",[[13,"Stick_Customer_1",["_name"],144],[4,["_lpos"],144,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],144,[3,0,0,0,1]],[4,["_euler"],144,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],144,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],912]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],911]],[12,0,{},143,[11,"a5V4sYW6tC26fEyxts/NBS",-3515,[15,"71Kf4/xvhLwbWeyOCxGlwN",[[13,"Stick_Customer_2",["_name"],145],[4,["_lpos"],145,[1,0.207,0.278,0.199]],[4,["_lrot"],145,[3,0,0,0,1]],[4,["_euler"],145,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],145,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],914]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],913]],[12,0,{},143,[11,"a5V4sYW6tC26fEyxts/NBS",-3516,[15,"5eI17eLyVNtLqmmb1zNHfx",[[13,"Stick_Customer_3",["_name"],146],[4,["_lpos"],146,[1,0.207,0.278,-0.443]],[4,["_lrot"],146,[3,0,0,0,1]],[4,["_euler"],146,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],146,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],916]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],915]],[12,0,{},143,[11,"a5V4sYW6tC26fEyxts/NBS",-3517,[15,"c3gz4X0HVDkZmDi4PE3glR",[[13,"Stick_Customer_4",["_name"],147],[4,["_lpos"],147,[1,-0.216,0.278,-0.443]],[4,["_lrot"],147,[3,0,0,0,1]],[4,["_euler"],147,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],147,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],918]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],917]],[8,"Red",false,66,[-3518,-3519]],[16,"Top",931,[-3520,-3521]],[16,"Blue",66,[-3522,589]],[8,"Green",false,66,[-3523,-3524]],[16,"Top",934,[-3525,-3526]],[8,"Orange",false,66,[-3527,-3528]],[16,"Top",936,[-3529,-3530]],[8,"Pink",false,66,[-3531,-3532]],[16,"Top",938,[-3533,-3534]],[8,"Purple",false,66,[-3535,-3536]],[16,"Top",940,[-3537,-3538]],[8,"Yellow",false,66,[-3539,-3540]],[16,"Top",942,[-3541,-3542]],[8,"Blue_light",false,66,[-3543,-3544]],[16,"Top",944,[-3545,-3546]],[8,"Black",false,66,[-3547,-3548]],[16,"Top",946,[-3549,-3550]],[12,0,{},69,[11,"d2mwmZkD9FNrAfZAW7A39x",-3551,[18,"bdr+6eCXZGMZpAzmXqiv2Q",[[14,"VFX_Impact2",["_name"],[3,["d2mwmZkD9FNrAfZAW7A39x"]]],[20,["_lpos"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,0,0,2.2]],[20,["_lrot"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[20,["_euler"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,90,0,0]],[20,["_lscale"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,1,1,1]]]],1009]],[12,0,{},69,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3552,[18,"44MEUzdudIHbCj5jLVlrYb",[[14,"VFX_Smoke",["_name"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]]],[20,["_lpos"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,0,0,-1.564]],[20,["_lrot"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[3,-1,0,0,6.123233995736766e-17]],[20,["_euler"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,-180,0,0]]]],1010]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3553,[15,"09HHJSwmtIaaAJpCsznNY8",[[13,"Stick_Customer_1",["_name"],148],[4,["_lpos"],148,[1,-0.202,0.804,1.467]],[4,["_lrot"],148,[3,0,0,0,1]],[4,["_euler"],148,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],148,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1012]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1011]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3554,[15,"b9MzW8g31OVpLFEDvNmedt",[[13,"Stick_Customer_2",["_name"],149],[4,["_lpos"],149,[1,0.207,0.804,1.467]],[4,["_lrot"],149,[3,0,0,0,1]],[4,["_euler"],149,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],149,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1014]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1013]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3555,[15,"47GkQuSDtDx4f/lS0uI/ze",[[13,"Stick_Customer_3",["_name"],150],[4,["_lpos"],150,[1,0.207,0.804,0.792]],[4,["_lrot"],150,[3,0,0,0,1]],[4,["_euler"],150,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],150,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1016]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1015]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3556,[15,"4bIgGEO0NIxqA3BbN8s9KX",[[13,"Stick_Customer_4",["_name"],151],[4,["_lpos"],151,[1,-0.216,0.804,0.792]],[4,["_lrot"],151,[3,0,0,0,1]],[4,["_euler"],151,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],151,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1018]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1017]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3557,[15,"85J5Fyk8tPXK4fdX+992eS",[[13,"Stick_Customer_5",["_name"],152],[4,["_lpos"],152,[1,0.207,0.804,0.122]],[4,["_lrot"],152,[3,0,0,0,1]],[4,["_euler"],152,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],152,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1020]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1019]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3558,[15,"84Xn/rET1Ki7ljxN0U1YRV",[[13,"Stick_Customer_6",["_name"],153],[4,["_lpos"],153,[1,-0.216,0.804,0.122]],[4,["_lrot"],153,[3,0,0,0,1]],[4,["_euler"],153,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],153,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1022]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1021]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3559,[15,"d6aqA6dVRF6ZHu+5OnXB3X",[[13,"Stick_Customer_7",["_name"],154],[4,["_lpos"],154,[1,0.207,0.804,-0.555]],[4,["_lrot"],154,[3,0,0,0,1]],[4,["_euler"],154,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],154,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1024]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1023]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3560,[15,"5fXMoB6chBGK6MwWmGAnKg",[[13,"Stick_Customer_8",["_name"],155],[4,["_lpos"],155,[1,-0.216,0.804,-1.225]],[4,["_lrot"],155,[3,0,0,0,1]],[4,["_euler"],155,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],155,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1026]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1025]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3561,[15,"82ofTvbbhAH6/7NAfJW86U",[[13,"Stick_Customer_9",["_name"],156],[4,["_lpos"],156,[1,-0.216,0.804,-0.555]],[4,["_lrot"],156,[3,0,0,0,1]],[4,["_euler"],156,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],156,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1028]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1027]],[12,0,{},70,[11,"a5V4sYW6tC26fEyxts/NBS",-3562,[15,"26VwKqbFdMpI6HyZRG7QWh",[[13,"Stick_Customer_10",["_name"],157],[4,["_lpos"],157,[1,0.207,0.804,-1.225]],[4,["_lrot"],157,[3,0,0,0,1]],[4,["_euler"],157,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],157,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1030]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1029]],[8,"Red",false,67,[-3563,-3564]],[16,"Top",960,[-3565,-3566]],[8,"Blue",false,67,[-3567,-3568]],[16,"Top",962,[-3569,-3570]],[16,"Green",67,[-3571,590]],[8,"Orange",false,67,[-3572,-3573]],[16,"Top",965,[-3574,-3575]],[8,"Pink",false,67,[-3576,-3577]],[16,"Top",967,[-3578,-3579]],[8,"Purple",false,67,[-3580,-3581]],[16,"Top",969,[-3582,-3583]],[8,"Yellow",false,67,[-3584,-3585]],[16,"Top",971,[-3586,-3587]],[8,"Blue_light",false,67,[-3588,-3589]],[16,"Top",973,[-3590,-3591]],[8,"Black",false,67,[-3592,-3593]],[16,"Top",975,[-3594,-3595]],[12,0,{},85,[11,"d2mwmZkD9FNrAfZAW7A39x",-3596,[18,"87uLA4W1JBApyUCrnyj5mt",[[14,"VFX_Impact2",["_name"],[3,["d2mwmZkD9FNrAfZAW7A39x"]]],[20,["_lpos"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,0,0,2.2]],[20,["_lrot"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[20,["_euler"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,90,0,0]],[20,["_lscale"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,1,1,1]]]],1121]],[12,0,{},85,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3597,[18,"d0OHQjuaNFXpc+kDvuxPz4",[[14,"VFX_Smoke",["_name"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]]],[20,["_lpos"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,0,0,-1.564]],[20,["_lrot"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[3,-1,0,0,6.123233995736766e-17]],[20,["_euler"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,-180,0,0]]]],1122]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3598,[15,"03UmmQT+BHjZN1+puHFIK/",[[13,"Stick_Customer_1",["_name"],158],[4,["_lpos"],158,[1,-0.202,0.804,1.467]],[4,["_lrot"],158,[3,0,0,0,1]],[4,["_euler"],158,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],158,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1124]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1123]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3599,[15,"980jEt0CdAHqHqFD5rgHhp",[[13,"Stick_Customer_2",["_name"],159],[4,["_lpos"],159,[1,0.207,0.804,1.467]],[4,["_lrot"],159,[3,0,0,0,1]],[4,["_euler"],159,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],159,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1126]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1125]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3600,[15,"05L5IKnTJCs4vE58rRVAl3",[[13,"Stick_Customer_3",["_name"],160],[4,["_lpos"],160,[1,0.207,0.804,0.792]],[4,["_lrot"],160,[3,0,0,0,1]],[4,["_euler"],160,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],160,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1128]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1127]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3601,[15,"96tfIJfm9FYKvcmwT+W4QH",[[13,"Stick_Customer_4",["_name"],161],[4,["_lpos"],161,[1,-0.216,0.804,0.792]],[4,["_lrot"],161,[3,0,0,0,1]],[4,["_euler"],161,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],161,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1130]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1129]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3602,[15,"eansDoEEFKPoEkEE+wS0G3",[[13,"Stick_Customer_5",["_name"],162],[4,["_lpos"],162,[1,0.207,0.804,0.122]],[4,["_lrot"],162,[3,0,0,0,1]],[4,["_euler"],162,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],162,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1132]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1131]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3603,[15,"c3SDk0cb5PDbKD56KjIZFr",[[13,"Stick_Customer_6",["_name"],163],[4,["_lpos"],163,[1,-0.216,0.804,0.122]],[4,["_lrot"],163,[3,0,0,0,1]],[4,["_euler"],163,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],163,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1134]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1133]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3604,[15,"08CdgP9uVHVYCqZF3EXsZ4",[[13,"Stick_Customer_7",["_name"],164],[4,["_lpos"],164,[1,0.207,0.804,-0.555]],[4,["_lrot"],164,[3,0,0,0,1]],[4,["_euler"],164,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],164,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1136]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1135]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3605,[15,"ee/yVr9JdMbZgv6YR8PDEL",[[13,"Stick_Customer_8",["_name"],165],[4,["_lpos"],165,[1,-0.216,0.804,-1.225]],[4,["_lrot"],165,[3,0,0,0,1]],[4,["_euler"],165,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],165,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1138]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1137]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3606,[15,"47L/PwlG9ORLKaVidEcXR4",[[13,"Stick_Customer_9",["_name"],166],[4,["_lpos"],166,[1,-0.216,0.804,-0.555]],[4,["_lrot"],166,[3,0,0,0,1]],[4,["_euler"],166,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],166,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1140]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1139]],[12,0,{},71,[11,"a5V4sYW6tC26fEyxts/NBS",-3607,[15,"2d3wmrTcRPB7hsK4wddRFy",[[13,"Stick_Customer_10",["_name"],167],[4,["_lpos"],167,[1,0.207,0.804,-1.225]],[4,["_lrot"],167,[3,0,0,0,1]],[4,["_euler"],167,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],167,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1142]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1141]],[8,"Red",false,68,[-3608,-3609]],[16,"Top",989,[-3610,-3611]],[8,"Blue",false,68,[-3612,-3613]],[16,"Top",991,[-3614,-3615]],[8,"Green",false,68,[-3616,-3617]],[16,"Top",993,[-3618,-3619]],[8,"Orange",false,68,[-3620,-3621]],[16,"Top",995,[-3622,-3623]],[16,"Pink",68,[-3624,591]],[8,"Purple",false,68,[-3625,-3626]],[16,"Top",998,[-3627,-3628]],[8,"Yellow",false,68,[-3629,-3630]],[16,"Top",1000,[-3631,-3632]],[8,"Blue_light",false,68,[-3633,-3634]],[16,"Top",1002,[-3635,-3636]],[8,"Black",false,68,[-3637,-3638]],[16,"Top",1004,[-3639,-3640]],[12,0,{},75,[11,"d2mwmZkD9FNrAfZAW7A39x",-3641,[18,"75qOGGeq9GOJBQ74VtTwS+",[[14,"VFX_Impact2",["_name"],[3,["d2mwmZkD9FNrAfZAW7A39x"]]],[20,["_lpos"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,0,0,2.2]],[20,["_lrot"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[20,["_euler"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,90,0,0]],[20,["_lscale"],[3,["d2mwmZkD9FNrAfZAW7A39x"]],[1,1,1,1]]]],1233]],[12,0,{},75,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3642,[18,"e37x03+6NE6INAmFPdR8+y",[[14,"VFX_Smoke",["_name"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]]],[20,["_lpos"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,0,0,-1.564]],[20,["_lrot"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[3,-1,0,0,6.123233995736766e-17]],[20,["_euler"],[3,["54Y0jZZ95G4bNLwJNyEXwH"]],[1,-180,0,0]]]],1234]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3643,[15,"10IECa9vVMNoTbc/vOW09Q",[[13,"Stick_Customer_1",["_name"],168],[4,["_lpos"],168,[1,-0.202,0.804,1.467]],[4,["_lrot"],168,[3,0,0,0,1]],[4,["_euler"],168,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],168,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1236]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1235]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3644,[15,"d6x5T/u6JG1KzXdMSV48JT",[[13,"Stick_Customer_2",["_name"],169],[4,["_lpos"],169,[1,0.207,0.804,1.467]],[4,["_lrot"],169,[3,0,0,0,1]],[4,["_euler"],169,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],169,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1238]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1237]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3645,[15,"70BYZrZF9NWL7P6tMkr0aq",[[13,"Stick_Customer_3",["_name"],170],[4,["_lpos"],170,[1,0.207,0.804,0.792]],[4,["_lrot"],170,[3,0,0,0,1]],[4,["_euler"],170,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],170,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1240]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1239]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3646,[15,"7eUlUE3SxPCIs8LvM0ZbsM",[[13,"Stick_Customer_4",["_name"],171],[4,["_lpos"],171,[1,-0.216,0.804,0.792]],[4,["_lrot"],171,[3,0,0,0,1]],[4,["_euler"],171,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],171,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1242]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1241]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3647,[15,"3eJQ0uSpZNo4X19M4tsf51",[[13,"Stick_Customer_5",["_name"],172],[4,["_lpos"],172,[1,0.207,0.804,0.122]],[4,["_lrot"],172,[3,0,0,0,1]],[4,["_euler"],172,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],172,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1244]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1243]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3648,[15,"eauAHZ+7VP5pYJenRj438h",[[13,"Stick_Customer_6",["_name"],173],[4,["_lpos"],173,[1,-0.216,0.804,0.122]],[4,["_lrot"],173,[3,0,0,0,1]],[4,["_euler"],173,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],173,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1246]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1245]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3649,[15,"9d6uSr44dJF7+cCamO6DuY",[[13,"Stick_Customer_7",["_name"],174],[4,["_lpos"],174,[1,0.207,0.804,-0.555]],[4,["_lrot"],174,[3,0,0,0,1]],[4,["_euler"],174,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],174,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1248]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1247]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3650,[15,"b7S7wyX3BP9KCof78z41zb",[[13,"Stick_Customer_8",["_name"],175],[4,["_lpos"],175,[1,-0.216,0.804,-1.225]],[4,["_lrot"],175,[3,0,0,0,1]],[4,["_euler"],175,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],175,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1250]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1249]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3651,[15,"b5+4vqs2ZAiI+hMa5Smaj6",[[13,"Stick_Customer_9",["_name"],176],[4,["_lpos"],176,[1,-0.216,0.804,-0.555]],[4,["_lrot"],176,[3,0,0,0,1]],[4,["_euler"],176,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],176,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1252]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1251]],[12,0,{},72,[11,"a5V4sYW6tC26fEyxts/NBS",-3652,[15,"bdO4Xk/95ASatPmw+xsFd7",[[13,"Stick_Customer_10",["_name"],177],[4,["_lpos"],177,[1,0.207,0.804,-1.225]],[4,["_lrot"],177,[3,0,0,0,1]],[4,["_euler"],177,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],177,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1254]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1253]],[8,"Red",false,8,[-3653,178]],[8,"Blue",false,8,[-3654,179]],[8,"Green",false,8,[-3655,592]],[8,"Orange",false,8,[-3656,593]],[8,"Pink",false,8,[-3657,594]],[8,"Purple",false,8,[-3658,595]],[8,"Yellow",false,8,[-3659,596]],[8,"Blue_light",false,8,[-3660,180]],[16,"White",8,[-3661,181]],[12,0,{},90,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3662,[18,"c0P6eBS6VLL5iog9WKmKSI",[[13,"VFX_Smoke",["_name"],597],[4,["_lpos"],597,[1,0,0,-1.56]],[4,["_lrot"],597,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],597,[1,-180,0,0]]]],1361]],[12,0,{},90,[11,"d2mwmZkD9FNrAfZAW7A39x",-3663,[18,"b6LNKf1fRPVIy/rdZJDMqm",[[13,"VFX_Impact2",["_name"],182],[4,["_lpos"],182,[1,0,0,1.2]],[4,["_lrot"],182,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],182,[1,90,0,0]],[4,["_lscale"],182,[1,1,1,1]]]],1362]],[12,0,{},183,[11,"a5V4sYW6tC26fEyxts/NBS",-3664,[15,"80+KyeTLRGuoJjWyd/c5tM",[[13,"Stick_Customer_1",["_name"],184],[4,["_lpos"],184,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],184,[3,0,0,0,1]],[4,["_euler"],184,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],184,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1364]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1363]],[12,0,{},183,[11,"a5V4sYW6tC26fEyxts/NBS",-3665,[15,"f4fmcevuZJ84gCTDsTF+5O",[[13,"Stick_Customer_2",["_name"],185],[4,["_lpos"],185,[1,0.207,0.278,0.199]],[4,["_lrot"],185,[3,0,0,0,1]],[4,["_euler"],185,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],185,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1366]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1365]],[12,0,{},183,[11,"a5V4sYW6tC26fEyxts/NBS",-3666,[15,"8fGxBJDU5P8LSJaBWsN7I9",[[13,"Stick_Customer_3",["_name"],186],[4,["_lpos"],186,[1,0.207,0.278,-0.443]],[4,["_lrot"],186,[3,0,0,0,1]],[4,["_euler"],186,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],186,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1368]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1367]],[12,0,{},183,[11,"a5V4sYW6tC26fEyxts/NBS",-3667,[15,"a0hofuP85Nqr7wjhTvx4nX",[[13,"Stick_Customer_4",["_name"],187],[4,["_lpos"],187,[1,-0.216,0.278,-0.443]],[4,["_lrot"],187,[3,0,0,0,1]],[4,["_euler"],187,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],187,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1370]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1369]],[8,"Red",false,9,[-3668,188]],[8,"Blue",false,9,[-3669,189]],[8,"Green",false,9,[-3670,598]],[8,"Orange",false,9,[-3671,599]],[8,"Pink",false,9,[-3672,600]],[8,"Purple",false,9,[-3673,601]],[8,"Yellow",false,9,[-3674,602]],[8,"Blue_light",false,9,[-3675,190]],[16,"White",9,[-3676,191]],[12,0,{},91,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3677,[18,"e8XLNqIJFLtLDHY+f2NafC",[[13,"VFX_Smoke",["_name"],603],[4,["_lpos"],603,[1,0,0,-1.56]],[4,["_lrot"],603,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],603,[1,-180,0,0]]]],1477]],[12,0,{},91,[11,"d2mwmZkD9FNrAfZAW7A39x",-3678,[18,"90GxaoHfFJppwBKuPJW4Wr",[[13,"VFX_Impact2",["_name"],192],[4,["_lpos"],192,[1,0,0,1.2]],[4,["_lrot"],192,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],192,[1,90,0,0]],[4,["_lscale"],192,[1,1,1,1]]]],1478]],[12,0,{},193,[11,"a5V4sYW6tC26fEyxts/NBS",-3679,[15,"bau6wI2odErqV8u/d3uEIh",[[13,"Stick_Customer_1",["_name"],194],[4,["_lpos"],194,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],194,[3,0,0,0,1]],[4,["_euler"],194,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],194,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1480]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1479]],[12,0,{},193,[11,"a5V4sYW6tC26fEyxts/NBS",-3680,[15,"f7asz3Ya5PgrdnbYy2fNkr",[[13,"Stick_Customer_2",["_name"],195],[4,["_lpos"],195,[1,0.207,0.278,0.199]],[4,["_lrot"],195,[3,0,0,0,1]],[4,["_euler"],195,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],195,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1482]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1481]],[12,0,{},193,[11,"a5V4sYW6tC26fEyxts/NBS",-3681,[15,"97VQiazkVGDKiINIth4xMV",[[13,"Stick_Customer_3",["_name"],196],[4,["_lpos"],196,[1,0.207,0.278,-0.443]],[4,["_lrot"],196,[3,0,0,0,1]],[4,["_euler"],196,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],196,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1484]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1483]],[12,0,{},193,[11,"a5V4sYW6tC26fEyxts/NBS",-3682,[15,"dahVr8mUdJwYp93hy382mo",[[13,"Stick_Customer_4",["_name"],197],[4,["_lpos"],197,[1,-0.216,0.278,-0.443]],[4,["_lrot"],197,[3,0,0,0,1]],[4,["_euler"],197,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],197,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1486]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1485]],[8,"Red",false,10,[-3683,198]],[8,"Blue",false,10,[-3684,199]],[8,"Green",false,10,[-3685,604]],[8,"Orange",false,10,[-3686,605]],[8,"Pink",false,10,[-3687,606]],[8,"Purple",false,10,[-3688,607]],[8,"Yellow",false,10,[-3689,608]],[8,"Blue_light",false,10,[-3690,200]],[16,"White",10,[-3691,201]],[12,0,{},92,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3692,[18,"b0xxC9df1M04fjBE8ptYLI",[[13,"VFX_Smoke",["_name"],609],[4,["_lpos"],609,[1,0,0,-1.56]],[4,["_lrot"],609,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],609,[1,-180,0,0]]]],1593]],[12,0,{},92,[11,"d2mwmZkD9FNrAfZAW7A39x",-3693,[18,"af/Q4un8JKn5/4LilZLIjt",[[13,"VFX_Impact2",["_name"],202],[4,["_lpos"],202,[1,0,0,1.2]],[4,["_lrot"],202,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],202,[1,90,0,0]],[4,["_lscale"],202,[1,1,1,1]]]],1594]],[12,0,{},203,[11,"a5V4sYW6tC26fEyxts/NBS",-3694,[15,"270slntBNCIKU/oquunMB/",[[13,"Stick_Customer_1",["_name"],204],[4,["_lpos"],204,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],204,[3,0,0,0,1]],[4,["_euler"],204,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],204,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1596]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1595]],[12,0,{},203,[11,"a5V4sYW6tC26fEyxts/NBS",-3695,[15,"ddpfWrG8JFY7D3VzNYiO1h",[[13,"Stick_Customer_2",["_name"],205],[4,["_lpos"],205,[1,0.207,0.278,0.199]],[4,["_lrot"],205,[3,0,0,0,1]],[4,["_euler"],205,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],205,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1598]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1597]],[12,0,{},203,[11,"a5V4sYW6tC26fEyxts/NBS",-3696,[15,"e4ip47JS9MlrVBz8aAzZFl",[[13,"Stick_Customer_3",["_name"],206],[4,["_lpos"],206,[1,0.207,0.278,-0.443]],[4,["_lrot"],206,[3,0,0,0,1]],[4,["_euler"],206,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],206,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1600]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1599]],[12,0,{},203,[11,"a5V4sYW6tC26fEyxts/NBS",-3697,[15,"d2efTigbpMEa9EH0BRr0y3",[[13,"Stick_Customer_4",["_name"],207],[4,["_lpos"],207,[1,-0.216,0.278,-0.443]],[4,["_lrot"],207,[3,0,0,0,1]],[4,["_euler"],207,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],207,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1602]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1601]],[8,"Red",false,11,[-3698,208]],[8,"Blue",false,11,[-3699,209]],[8,"Green",false,11,[-3700,610]],[8,"Orange",false,11,[-3701,611]],[8,"Pink",false,11,[-3702,612]],[8,"Purple",false,11,[-3703,613]],[8,"Yellow",false,11,[-3704,614]],[8,"Blue_light",false,11,[-3705,210]],[16,"White",11,[-3706,211]],[12,0,{},93,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3707,[18,"f4jKzeMLxLvKKkk6bYo1A8",[[13,"VFX_Smoke",["_name"],615],[4,["_lpos"],615,[1,0,0,-1.56]],[4,["_lrot"],615,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],615,[1,-180,0,0]]]],1709]],[12,0,{},93,[11,"d2mwmZkD9FNrAfZAW7A39x",-3708,[18,"50WG464GhKkppnIgV5sweM",[[13,"VFX_Impact2",["_name"],212],[4,["_lpos"],212,[1,0,0,1.2]],[4,["_lrot"],212,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],212,[1,90,0,0]],[4,["_lscale"],212,[1,1,1,1]]]],1710]],[12,0,{},213,[11,"a5V4sYW6tC26fEyxts/NBS",-3709,[15,"efNp8tenJPK56oTAuTkQfU",[[13,"Stick_Customer_1",["_name"],214],[4,["_lpos"],214,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],214,[3,0,0,0,1]],[4,["_euler"],214,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],214,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1712]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1711]],[12,0,{},213,[11,"a5V4sYW6tC26fEyxts/NBS",-3710,[15,"46JSPkYoVLS7SkOrnkXtKP",[[13,"Stick_Customer_2",["_name"],215],[4,["_lpos"],215,[1,0.207,0.278,0.199]],[4,["_lrot"],215,[3,0,0,0,1]],[4,["_euler"],215,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],215,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1714]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1713]],[12,0,{},213,[11,"a5V4sYW6tC26fEyxts/NBS",-3711,[15,"29o5VXyhhBNqYUIrWPiJDH",[[13,"Stick_Customer_3",["_name"],216],[4,["_lpos"],216,[1,0.207,0.278,-0.443]],[4,["_lrot"],216,[3,0,0,0,1]],[4,["_euler"],216,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],216,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1716]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1715]],[12,0,{},213,[11,"a5V4sYW6tC26fEyxts/NBS",-3712,[15,"460pO4C1ZIFYlQ4j1kGiot",[[13,"Stick_Customer_4",["_name"],217],[4,["_lpos"],217,[1,-0.216,0.278,-0.443]],[4,["_lrot"],217,[3,0,0,0,1]],[4,["_euler"],217,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],217,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1718]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1717]],[8,"Red",false,12,[-3713,218]],[8,"Blue",false,12,[-3714,219]],[8,"Green",false,12,[-3715,616]],[8,"Orange",false,12,[-3716,617]],[8,"Pink",false,12,[-3717,618]],[8,"Purple",false,12,[-3718,619]],[8,"Yellow",false,12,[-3719,620]],[8,"Blue_light",false,12,[-3720,220]],[16,"White",12,[-3721,221]],[12,0,{},94,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3722,[18,"d6sC3IyeNIzbq8SNG7W1Mh",[[13,"VFX_Smoke",["_name"],621],[4,["_lpos"],621,[1,0,0,-1.56]],[4,["_lrot"],621,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],621,[1,-180,0,0]]]],1825]],[12,0,{},94,[11,"d2mwmZkD9FNrAfZAW7A39x",-3723,[18,"3d/j80sKVFOIkQzkWlGnZD",[[13,"VFX_Impact2",["_name"],222],[4,["_lpos"],222,[1,0,0,1.2]],[4,["_lrot"],222,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],222,[1,90,0,0]],[4,["_lscale"],222,[1,1,1,1]]]],1826]],[12,0,{},223,[11,"a5V4sYW6tC26fEyxts/NBS",-3724,[15,"e6rgzati1GDYda/xeunQvV",[[13,"Stick_Customer_1",["_name"],224],[4,["_lpos"],224,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],224,[3,0,0,0,1]],[4,["_euler"],224,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],224,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1828]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1827]],[12,0,{},223,[11,"a5V4sYW6tC26fEyxts/NBS",-3725,[15,"0ai2kDK0FFWbxwMM8TJjyC",[[13,"Stick_Customer_2",["_name"],225],[4,["_lpos"],225,[1,0.207,0.278,0.199]],[4,["_lrot"],225,[3,0,0,0,1]],[4,["_euler"],225,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],225,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1830]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1829]],[12,0,{},223,[11,"a5V4sYW6tC26fEyxts/NBS",-3726,[15,"76DWQtM6pMC6HWRu0HsGij",[[13,"Stick_Customer_3",["_name"],226],[4,["_lpos"],226,[1,0.207,0.278,-0.443]],[4,["_lrot"],226,[3,0,0,0,1]],[4,["_euler"],226,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],226,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1832]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1831]],[12,0,{},223,[11,"a5V4sYW6tC26fEyxts/NBS",-3727,[15,"ffExazTIJDD54EGAsI2HB9",[[13,"Stick_Customer_4",["_name"],227],[4,["_lpos"],227,[1,-0.216,0.278,-0.443]],[4,["_lrot"],227,[3,0,0,0,1]],[4,["_euler"],227,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],227,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1834]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1833]],[8,"Red",false,13,[-3728,228]],[8,"Blue",false,13,[-3729,229]],[8,"Green",false,13,[-3730,622]],[8,"Orange",false,13,[-3731,623]],[8,"Pink",false,13,[-3732,624]],[8,"Purple",false,13,[-3733,625]],[8,"Yellow",false,13,[-3734,626]],[8,"Blue_light",false,13,[-3735,230]],[16,"White",13,[-3736,231]],[12,0,{},95,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3737,[18,"29mHF4/qxOl4HwOFXjCs9B",[[13,"VFX_Smoke",["_name"],627],[4,["_lpos"],627,[1,0,0,-1.56]],[4,["_lrot"],627,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],627,[1,-180,0,0]]]],1941]],[12,0,{},95,[11,"d2mwmZkD9FNrAfZAW7A39x",-3738,[18,"04BP5ppnlCrJVV2X+PegZv",[[13,"VFX_Impact2",["_name"],232],[4,["_lpos"],232,[1,0,0,1.2]],[4,["_lrot"],232,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],232,[1,90,0,0]],[4,["_lscale"],232,[1,1,1,1]]]],1942]],[12,0,{},233,[11,"a5V4sYW6tC26fEyxts/NBS",-3739,[15,"940BpplYhNLJBeyC33ccav",[[13,"Stick_Customer_1",["_name"],234],[4,["_lpos"],234,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],234,[3,0,0,0,1]],[4,["_euler"],234,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],234,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1944]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1943]],[12,0,{},233,[11,"a5V4sYW6tC26fEyxts/NBS",-3740,[15,"c64XyE1i1N5Lsj+Hdmny94",[[13,"Stick_Customer_2",["_name"],235],[4,["_lpos"],235,[1,0.207,0.278,0.199]],[4,["_lrot"],235,[3,0,0,0,1]],[4,["_euler"],235,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],235,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1946]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1945]],[12,0,{},233,[11,"a5V4sYW6tC26fEyxts/NBS",-3741,[15,"1330wfQVpF9ozokNn62nlX",[[13,"Stick_Customer_3",["_name"],236],[4,["_lpos"],236,[1,0.207,0.278,-0.443]],[4,["_lrot"],236,[3,0,0,0,1]],[4,["_euler"],236,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],236,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1948]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1947]],[12,0,{},233,[11,"a5V4sYW6tC26fEyxts/NBS",-3742,[15,"9dacEppPJN0py8Ca+qFCou",[[13,"Stick_Customer_4",["_name"],237],[4,["_lpos"],237,[1,-0.216,0.278,-0.443]],[4,["_lrot"],237,[3,0,0,0,1]],[4,["_euler"],237,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],237,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],1950]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],1949]],[8,"Red",false,14,[-3743,238]],[8,"Blue",false,14,[-3744,239]],[8,"Green",false,14,[-3745,628]],[8,"Orange",false,14,[-3746,629]],[8,"Pink",false,14,[-3747,630]],[8,"Purple",false,14,[-3748,631]],[8,"Yellow",false,14,[-3749,632]],[8,"Blue_light",false,14,[-3750,240]],[16,"White",14,[-3751,241]],[12,0,{},96,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3752,[18,"26awd/8JBL040LYGYKIBkU",[[13,"VFX_Smoke",["_name"],633],[4,["_lpos"],633,[1,0,0,-1.56]],[4,["_lrot"],633,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],633,[1,-180,0,0]]]],2057]],[12,0,{},96,[11,"d2mwmZkD9FNrAfZAW7A39x",-3753,[18,"72uBl/wqVI/pbJW+GEJzXG",[[13,"VFX_Impact2",["_name"],242],[4,["_lpos"],242,[1,0,0,1.2]],[4,["_lrot"],242,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],242,[1,90,0,0]],[4,["_lscale"],242,[1,1,1,1]]]],2058]],[12,0,{},243,[11,"a5V4sYW6tC26fEyxts/NBS",-3754,[15,"bcZb0/kkVEN5d6cY4B+l0O",[[13,"Stick_Customer_1",["_name"],244],[4,["_lpos"],244,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],244,[3,0,0,0,1]],[4,["_euler"],244,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],244,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2060]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2059]],[12,0,{},243,[11,"a5V4sYW6tC26fEyxts/NBS",-3755,[15,"72qixWG51EFZF3/MfZlz8k",[[13,"Stick_Customer_2",["_name"],245],[4,["_lpos"],245,[1,0.207,0.278,0.199]],[4,["_lrot"],245,[3,0,0,0,1]],[4,["_euler"],245,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],245,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2062]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2061]],[12,0,{},243,[11,"a5V4sYW6tC26fEyxts/NBS",-3756,[15,"8ci3e/tAlKRbYhrMS0btkc",[[13,"Stick_Customer_3",["_name"],246],[4,["_lpos"],246,[1,0.207,0.278,-0.443]],[4,["_lrot"],246,[3,0,0,0,1]],[4,["_euler"],246,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],246,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2064]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2063]],[12,0,{},243,[11,"a5V4sYW6tC26fEyxts/NBS",-3757,[15,"5frQPu5rxFrazzMMD4t/VE",[[13,"Stick_Customer_4",["_name"],247],[4,["_lpos"],247,[1,-0.216,0.278,-0.443]],[4,["_lrot"],247,[3,0,0,0,1]],[4,["_euler"],247,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],247,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2066]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2065]],[8,"Red",false,15,[-3758,248]],[8,"Blue",false,15,[-3759,249]],[8,"Green",false,15,[-3760,634]],[8,"Orange",false,15,[-3761,635]],[8,"Pink",false,15,[-3762,636]],[8,"Purple",false,15,[-3763,637]],[8,"Yellow",false,15,[-3764,638]],[8,"Blue_light",false,15,[-3765,250]],[16,"White",15,[-3766,251]],[12,0,{},97,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3767,[18,"dc8u1eB0FH17NOTlN8xnwB",[[13,"VFX_Smoke",["_name"],639],[4,["_lpos"],639,[1,0,0,-1.56]],[4,["_lrot"],639,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],639,[1,-180,0,0]]]],2173]],[12,0,{},97,[11,"d2mwmZkD9FNrAfZAW7A39x",-3768,[18,"d2QcReTRtLA5G7afO9HJb3",[[13,"VFX_Impact2",["_name"],252],[4,["_lpos"],252,[1,0,0,1.2]],[4,["_lrot"],252,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],252,[1,90,0,0]],[4,["_lscale"],252,[1,1,1,1]]]],2174]],[12,0,{},253,[11,"a5V4sYW6tC26fEyxts/NBS",-3769,[15,"5blugdoO9Kep9NB+BFiy+7",[[13,"Stick_Customer_1",["_name"],254],[4,["_lpos"],254,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],254,[3,0,0,0,1]],[4,["_euler"],254,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],254,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2176]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2175]],[12,0,{},253,[11,"a5V4sYW6tC26fEyxts/NBS",-3770,[15,"01KJkizaVEVqPX/olLldRv",[[13,"Stick_Customer_2",["_name"],255],[4,["_lpos"],255,[1,0.207,0.278,0.199]],[4,["_lrot"],255,[3,0,0,0,1]],[4,["_euler"],255,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],255,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2178]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2177]],[12,0,{},253,[11,"a5V4sYW6tC26fEyxts/NBS",-3771,[15,"a5XU4cVlJOO4wSpIqmkxWN",[[13,"Stick_Customer_3",["_name"],256],[4,["_lpos"],256,[1,0.207,0.278,-0.443]],[4,["_lrot"],256,[3,0,0,0,1]],[4,["_euler"],256,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],256,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2180]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2179]],[12,0,{},253,[11,"a5V4sYW6tC26fEyxts/NBS",-3772,[15,"2de6c5NP9Jy7sdhNtkBVdH",[[13,"Stick_Customer_4",["_name"],257],[4,["_lpos"],257,[1,-0.216,0.278,-0.443]],[4,["_lrot"],257,[3,0,0,0,1]],[4,["_euler"],257,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],257,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2182]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2181]],[8,"Red",false,16,[-3773,258]],[8,"Blue",false,16,[-3774,259]],[8,"Green",false,16,[-3775,640]],[8,"Orange",false,16,[-3776,641]],[8,"Pink",false,16,[-3777,642]],[8,"Purple",false,16,[-3778,643]],[8,"Yellow",false,16,[-3779,644]],[8,"Blue_light",false,16,[-3780,260]],[16,"White",16,[-3781,261]],[12,0,{},98,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3782,[18,"7amRvHjXtOk7gQVLcNtovS",[[13,"VFX_Smoke",["_name"],645],[4,["_lpos"],645,[1,0,0,-1.56]],[4,["_lrot"],645,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],645,[1,-180,0,0]]]],2289]],[12,0,{},98,[11,"d2mwmZkD9FNrAfZAW7A39x",-3783,[18,"e2UKQniAZHULQjMTNdQKF0",[[13,"VFX_Impact2",["_name"],262],[4,["_lpos"],262,[1,0,0,1.2]],[4,["_lrot"],262,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],262,[1,90,0,0]],[4,["_lscale"],262,[1,1,1,1]]]],2290]],[12,0,{},263,[11,"a5V4sYW6tC26fEyxts/NBS",-3784,[15,"b36eq10olABJy2pgrWEuq1",[[13,"Stick_Customer_1",["_name"],264],[4,["_lpos"],264,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],264,[3,0,0,0,1]],[4,["_euler"],264,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],264,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2292]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2291]],[12,0,{},263,[11,"a5V4sYW6tC26fEyxts/NBS",-3785,[15,"cbfyz98x5AOqKLpEWkmSjK",[[13,"Stick_Customer_2",["_name"],265],[4,["_lpos"],265,[1,0.207,0.278,0.199]],[4,["_lrot"],265,[3,0,0,0,1]],[4,["_euler"],265,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],265,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2294]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2293]],[12,0,{},263,[11,"a5V4sYW6tC26fEyxts/NBS",-3786,[15,"11YEsP6B1PNZcjMClAKdzE",[[13,"Stick_Customer_3",["_name"],266],[4,["_lpos"],266,[1,0.207,0.278,-0.443]],[4,["_lrot"],266,[3,0,0,0,1]],[4,["_euler"],266,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],266,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2296]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2295]],[12,0,{},263,[11,"a5V4sYW6tC26fEyxts/NBS",-3787,[15,"89UQ6HNyJKVq6AVxurn1ZU",[[13,"Stick_Customer_4",["_name"],267],[4,["_lpos"],267,[1,-0.216,0.278,-0.443]],[4,["_lrot"],267,[3,0,0,0,1]],[4,["_euler"],267,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],267,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2298]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2297]],[8,"Red",false,17,[-3788,268]],[8,"Blue",false,17,[-3789,269]],[8,"Green",false,17,[-3790,646]],[8,"Orange",false,17,[-3791,647]],[8,"Pink",false,17,[-3792,648]],[8,"Purple",false,17,[-3793,649]],[8,"Yellow",false,17,[-3794,650]],[8,"Blue_light",false,17,[-3795,270]],[16,"White",17,[-3796,271]],[12,0,{},99,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3797,[18,"9f/AGGa41Krop1S+K/PZYS",[[13,"VFX_Smoke",["_name"],651],[4,["_lpos"],651,[1,0,0,-1.56]],[4,["_lrot"],651,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],651,[1,-180,0,0]]]],2405]],[12,0,{},99,[11,"d2mwmZkD9FNrAfZAW7A39x",-3798,[18,"05Z4c+d0NAf5stzXzBnsxs",[[13,"VFX_Impact2",["_name"],272],[4,["_lpos"],272,[1,0,0,1.2]],[4,["_lrot"],272,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],272,[1,90,0,0]],[4,["_lscale"],272,[1,1,1,1]]]],2406]],[12,0,{},273,[11,"a5V4sYW6tC26fEyxts/NBS",-3799,[15,"4ehf/gOLZBEY0/JRIBthqO",[[13,"Stick_Customer_1",["_name"],274],[4,["_lpos"],274,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],274,[3,0,0,0,1]],[4,["_euler"],274,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],274,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2408]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2407]],[12,0,{},273,[11,"a5V4sYW6tC26fEyxts/NBS",-3800,[15,"24FwqBgBFCDpkO7FSFipf6",[[13,"Stick_Customer_2",["_name"],275],[4,["_lpos"],275,[1,0.207,0.278,0.199]],[4,["_lrot"],275,[3,0,0,0,1]],[4,["_euler"],275,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],275,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2410]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2409]],[12,0,{},273,[11,"a5V4sYW6tC26fEyxts/NBS",-3801,[15,"33EcEPAoZMCaWHH53KsNhu",[[13,"Stick_Customer_3",["_name"],276],[4,["_lpos"],276,[1,0.207,0.278,-0.443]],[4,["_lrot"],276,[3,0,0,0,1]],[4,["_euler"],276,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],276,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2412]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2411]],[12,0,{},273,[11,"a5V4sYW6tC26fEyxts/NBS",-3802,[15,"0ceOaIHpFOoYTv2jtbZ45z",[[13,"Stick_Customer_4",["_name"],277],[4,["_lpos"],277,[1,-0.216,0.278,-0.443]],[4,["_lrot"],277,[3,0,0,0,1]],[4,["_euler"],277,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],277,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2414]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2413]],[8,"Red",false,18,[-3803,278]],[8,"Blue",false,18,[-3804,279]],[8,"Green",false,18,[-3805,652]],[8,"Orange",false,18,[-3806,653]],[8,"Pink",false,18,[-3807,654]],[8,"Purple",false,18,[-3808,655]],[8,"Yellow",false,18,[-3809,656]],[8,"Blue_light",false,18,[-3810,280]],[16,"White",18,[-3811,281]],[12,0,{},100,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3812,[18,"b3xJCIsl9FxpqPABKBDl2Y",[[13,"VFX_Smoke",["_name"],657],[4,["_lpos"],657,[1,0,0,-1.56]],[4,["_lrot"],657,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],657,[1,-180,0,0]]]],2521]],[12,0,{},100,[11,"d2mwmZkD9FNrAfZAW7A39x",-3813,[18,"34NoHMMV9OgKPkB7YZ1Cuk",[[13,"VFX_Impact2",["_name"],282],[4,["_lpos"],282,[1,0,0,1.2]],[4,["_lrot"],282,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],282,[1,90,0,0]],[4,["_lscale"],282,[1,1,1,1]]]],2522]],[12,0,{},283,[11,"a5V4sYW6tC26fEyxts/NBS",-3814,[15,"301wJLnLJPSoXfZhzpor1F",[[13,"Stick_Customer_1",["_name"],284],[4,["_lpos"],284,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],284,[3,0,0,0,1]],[4,["_euler"],284,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],284,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2524]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2523]],[12,0,{},283,[11,"a5V4sYW6tC26fEyxts/NBS",-3815,[15,"a0iA377RBA94c5y3hjHf3a",[[13,"Stick_Customer_2",["_name"],285],[4,["_lpos"],285,[1,0.207,0.278,0.199]],[4,["_lrot"],285,[3,0,0,0,1]],[4,["_euler"],285,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],285,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2526]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2525]],[12,0,{},283,[11,"a5V4sYW6tC26fEyxts/NBS",-3816,[15,"b4lLGlRUdJQJNq4zLVmRob",[[13,"Stick_Customer_3",["_name"],286],[4,["_lpos"],286,[1,0.207,0.278,-0.443]],[4,["_lrot"],286,[3,0,0,0,1]],[4,["_euler"],286,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],286,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2528]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2527]],[12,0,{},283,[11,"a5V4sYW6tC26fEyxts/NBS",-3817,[15,"1fKl1I8nxEHYobgVhLkFuV",[[13,"Stick_Customer_4",["_name"],287],[4,["_lpos"],287,[1,-0.216,0.278,-0.443]],[4,["_lrot"],287,[3,0,0,0,1]],[4,["_euler"],287,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],287,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2530]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2529]],[8,"Red",false,19,[-3818,288]],[8,"Blue",false,19,[-3819,289]],[8,"Green",false,19,[-3820,658]],[8,"Orange",false,19,[-3821,659]],[8,"Pink",false,19,[-3822,660]],[8,"Purple",false,19,[-3823,661]],[8,"Yellow",false,19,[-3824,662]],[8,"Blue_light",false,19,[-3825,290]],[16,"White",19,[-3826,291]],[12,0,{},101,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3827,[18,"9dPbQYvMtJTannelifo9k5",[[13,"VFX_Smoke",["_name"],663],[4,["_lpos"],663,[1,0,0,-1.56]],[4,["_lrot"],663,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],663,[1,-180,0,0]]]],2637]],[12,0,{},101,[11,"d2mwmZkD9FNrAfZAW7A39x",-3828,[18,"74HYHIn89HK7rSxV6zaOgF",[[13,"VFX_Impact2",["_name"],292],[4,["_lpos"],292,[1,0,0,1.2]],[4,["_lrot"],292,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],292,[1,90,0,0]],[4,["_lscale"],292,[1,1,1,1]]]],2638]],[12,0,{},293,[11,"a5V4sYW6tC26fEyxts/NBS",-3829,[15,"21JDJ6jcFEYaNtXzGyiFez",[[13,"Stick_Customer_1",["_name"],294],[4,["_lpos"],294,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],294,[3,0,0,0,1]],[4,["_euler"],294,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],294,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2640]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2639]],[12,0,{},293,[11,"a5V4sYW6tC26fEyxts/NBS",-3830,[15,"29fgkmhtdJq4q1Y8QEH0UA",[[13,"Stick_Customer_2",["_name"],295],[4,["_lpos"],295,[1,0.207,0.278,0.199]],[4,["_lrot"],295,[3,0,0,0,1]],[4,["_euler"],295,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],295,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2642]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2641]],[12,0,{},293,[11,"a5V4sYW6tC26fEyxts/NBS",-3831,[15,"17TDT1MWBOkrW61RytZkxz",[[13,"Stick_Customer_3",["_name"],296],[4,["_lpos"],296,[1,0.207,0.278,-0.443]],[4,["_lrot"],296,[3,0,0,0,1]],[4,["_euler"],296,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],296,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2644]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2643]],[12,0,{},293,[11,"a5V4sYW6tC26fEyxts/NBS",-3832,[15,"5erTecrTpByJyAmlliABLS",[[13,"Stick_Customer_4",["_name"],297],[4,["_lpos"],297,[1,-0.216,0.278,-0.443]],[4,["_lrot"],297,[3,0,0,0,1]],[4,["_euler"],297,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],297,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2646]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2645]],[8,"Red",false,20,[-3833,298]],[8,"Blue",false,20,[-3834,299]],[8,"Green",false,20,[-3835,664]],[8,"Orange",false,20,[-3836,665]],[8,"Pink",false,20,[-3837,666]],[8,"Purple",false,20,[-3838,667]],[8,"Yellow",false,20,[-3839,668]],[8,"Blue_light",false,20,[-3840,300]],[16,"White",20,[-3841,301]],[12,0,{},102,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3842,[18,"38W1UPLj1C6byBuIFc43Yt",[[13,"VFX_Smoke",["_name"],669],[4,["_lpos"],669,[1,0,0,-1.56]],[4,["_lrot"],669,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],669,[1,-180,0,0]]]],2753]],[12,0,{},102,[11,"d2mwmZkD9FNrAfZAW7A39x",-3843,[18,"2cSyknu9hKBIE7sRhgbt7T",[[13,"VFX_Impact2",["_name"],302],[4,["_lpos"],302,[1,0,0,1.2]],[4,["_lrot"],302,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],302,[1,90,0,0]],[4,["_lscale"],302,[1,1,1,1]]]],2754]],[12,0,{},303,[11,"a5V4sYW6tC26fEyxts/NBS",-3844,[15,"620qMEPcxEYoADjkXca5i/",[[13,"Stick_Customer_1",["_name"],304],[4,["_lpos"],304,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],304,[3,0,0,0,1]],[4,["_euler"],304,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],304,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2756]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2755]],[12,0,{},303,[11,"a5V4sYW6tC26fEyxts/NBS",-3845,[15,"7ed9bfTiJAnbtOu7DxPg5S",[[13,"Stick_Customer_2",["_name"],305],[4,["_lpos"],305,[1,0.207,0.278,0.199]],[4,["_lrot"],305,[3,0,0,0,1]],[4,["_euler"],305,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],305,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2758]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2757]],[12,0,{},303,[11,"a5V4sYW6tC26fEyxts/NBS",-3846,[15,"8deQ2wMN5Lj7pJ6JF9MOmL",[[13,"Stick_Customer_3",["_name"],306],[4,["_lpos"],306,[1,0.207,0.278,-0.443]],[4,["_lrot"],306,[3,0,0,0,1]],[4,["_euler"],306,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],306,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2760]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2759]],[12,0,{},303,[11,"a5V4sYW6tC26fEyxts/NBS",-3847,[15,"d11tlGlXdMx6XybNI6eHU9",[[13,"Stick_Customer_4",["_name"],307],[4,["_lpos"],307,[1,-0.216,0.278,-0.443]],[4,["_lrot"],307,[3,0,0,0,1]],[4,["_euler"],307,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],307,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2762]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2761]],[8,"Red",false,21,[-3848,308]],[8,"Blue",false,21,[-3849,309]],[8,"Green",false,21,[-3850,670]],[8,"Orange",false,21,[-3851,671]],[8,"Pink",false,21,[-3852,672]],[8,"Purple",false,21,[-3853,673]],[8,"Yellow",false,21,[-3854,674]],[8,"Blue_light",false,21,[-3855,310]],[16,"White",21,[-3856,311]],[12,0,{},103,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3857,[18,"56Rs7c2M9PvoX+3IE5tYrB",[[13,"VFX_Smoke",["_name"],675],[4,["_lpos"],675,[1,0,0,-1.56]],[4,["_lrot"],675,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],675,[1,-180,0,0]]]],2869]],[12,0,{},103,[11,"d2mwmZkD9FNrAfZAW7A39x",-3858,[18,"108cmeUcdBlIodfcPfTQvg",[[13,"VFX_Impact2",["_name"],312],[4,["_lpos"],312,[1,0,0,1.2]],[4,["_lrot"],312,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],312,[1,90,0,0]],[4,["_lscale"],312,[1,1,1,1]]]],2870]],[12,0,{},313,[11,"a5V4sYW6tC26fEyxts/NBS",-3859,[15,"1fId0LyM1NIok2rL4oW/oA",[[13,"Stick_Customer_1",["_name"],314],[4,["_lpos"],314,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],314,[3,0,0,0,1]],[4,["_euler"],314,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],314,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2872]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2871]],[12,0,{},313,[11,"a5V4sYW6tC26fEyxts/NBS",-3860,[15,"7ekcEK63JL9bC3fp0FwROT",[[13,"Stick_Customer_2",["_name"],315],[4,["_lpos"],315,[1,0.207,0.278,0.199]],[4,["_lrot"],315,[3,0,0,0,1]],[4,["_euler"],315,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],315,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2874]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2873]],[12,0,{},313,[11,"a5V4sYW6tC26fEyxts/NBS",-3861,[15,"a7Yft2oBBCb4wqpnGrf5ya",[[13,"Stick_Customer_3",["_name"],316],[4,["_lpos"],316,[1,0.207,0.278,-0.443]],[4,["_lrot"],316,[3,0,0,0,1]],[4,["_euler"],316,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],316,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2876]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2875]],[12,0,{},313,[11,"a5V4sYW6tC26fEyxts/NBS",-3862,[15,"a1mBT9pUFJ4pZHNfZUZEhz",[[13,"Stick_Customer_4",["_name"],317],[4,["_lpos"],317,[1,-0.216,0.278,-0.443]],[4,["_lrot"],317,[3,0,0,0,1]],[4,["_euler"],317,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],317,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2878]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2877]],[8,"Red",false,22,[-3863,318]],[8,"Blue",false,22,[-3864,319]],[8,"Green",false,22,[-3865,676]],[8,"Orange",false,22,[-3866,677]],[8,"Pink",false,22,[-3867,678]],[8,"Purple",false,22,[-3868,679]],[8,"Yellow",false,22,[-3869,680]],[8,"Blue_light",false,22,[-3870,320]],[16,"White",22,[-3871,321]],[12,0,{},104,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3872,[18,"3bwYoRtZlEPIkRT1dV/Rns",[[13,"VFX_Smoke",["_name"],681],[4,["_lpos"],681,[1,0,0,-1.56]],[4,["_lrot"],681,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],681,[1,-180,0,0]]]],2985]],[12,0,{},104,[11,"d2mwmZkD9FNrAfZAW7A39x",-3873,[18,"08ODcWy+9BjqO/x2Tf5pid",[[13,"VFX_Impact2",["_name"],322],[4,["_lpos"],322,[1,0,0,1.2]],[4,["_lrot"],322,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],322,[1,90,0,0]],[4,["_lscale"],322,[1,1,1,1]]]],2986]],[12,0,{},323,[11,"a5V4sYW6tC26fEyxts/NBS",-3874,[15,"771CLK+5FAualFfoxMwA8g",[[13,"Stick_Customer_1",["_name"],324],[4,["_lpos"],324,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],324,[3,0,0,0,1]],[4,["_euler"],324,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],324,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2988]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2987]],[12,0,{},323,[11,"a5V4sYW6tC26fEyxts/NBS",-3875,[15,"08dK8xd6pL8qEB4x45Fawz",[[13,"Stick_Customer_2",["_name"],325],[4,["_lpos"],325,[1,0.207,0.278,0.199]],[4,["_lrot"],325,[3,0,0,0,1]],[4,["_euler"],325,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],325,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2990]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2989]],[12,0,{},323,[11,"a5V4sYW6tC26fEyxts/NBS",-3876,[15,"cbZamrHpZFQ5uSgd3jH7Jm",[[13,"Stick_Customer_3",["_name"],326],[4,["_lpos"],326,[1,0.207,0.278,-0.443]],[4,["_lrot"],326,[3,0,0,0,1]],[4,["_euler"],326,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],326,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2992]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2991]],[12,0,{},323,[11,"a5V4sYW6tC26fEyxts/NBS",-3877,[15,"2dUH5V6qFAHYI6WgUPDHCu",[[13,"Stick_Customer_4",["_name"],327],[4,["_lpos"],327,[1,-0.216,0.278,-0.443]],[4,["_lrot"],327,[3,0,0,0,1]],[4,["_euler"],327,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],327,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],2994]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],2993]],[8,"Red",false,23,[-3878,328]],[8,"Blue",false,23,[-3879,329]],[8,"Green",false,23,[-3880,682]],[8,"Orange",false,23,[-3881,683]],[8,"Pink",false,23,[-3882,684]],[8,"Purple",false,23,[-3883,685]],[8,"Yellow",false,23,[-3884,686]],[8,"Blue_light",false,23,[-3885,330]],[16,"White",23,[-3886,331]],[12,0,{},105,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3887,[18,"ecwj68IJBKCL7+/z8is2Z+",[[13,"VFX_Smoke",["_name"],687],[4,["_lpos"],687,[1,0,0,-1.56]],[4,["_lrot"],687,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],687,[1,-180,0,0]]]],3101]],[12,0,{},105,[11,"d2mwmZkD9FNrAfZAW7A39x",-3888,[18,"9bv/953YdDDolAfz+d4QIy",[[13,"VFX_Impact2",["_name"],332],[4,["_lpos"],332,[1,0,0,1.2]],[4,["_lrot"],332,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],332,[1,90,0,0]],[4,["_lscale"],332,[1,1,1,1]]]],3102]],[12,0,{},333,[11,"a5V4sYW6tC26fEyxts/NBS",-3889,[15,"f5ot4W/v5LhZOs+aTR8ikT",[[13,"Stick_Customer_1",["_name"],334],[4,["_lpos"],334,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],334,[3,0,0,0,1]],[4,["_euler"],334,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],334,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3104]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3103]],[12,0,{},333,[11,"a5V4sYW6tC26fEyxts/NBS",-3890,[15,"91/mViZPVP5rOLu6aV5fLs",[[13,"Stick_Customer_2",["_name"],335],[4,["_lpos"],335,[1,0.207,0.278,0.199]],[4,["_lrot"],335,[3,0,0,0,1]],[4,["_euler"],335,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],335,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3106]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3105]],[12,0,{},333,[11,"a5V4sYW6tC26fEyxts/NBS",-3891,[15,"3aC1lvh8dAJIzPukpGHQma",[[13,"Stick_Customer_3",["_name"],336],[4,["_lpos"],336,[1,0.207,0.278,-0.443]],[4,["_lrot"],336,[3,0,0,0,1]],[4,["_euler"],336,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],336,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3108]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3107]],[12,0,{},333,[11,"a5V4sYW6tC26fEyxts/NBS",-3892,[15,"57a/Zvp45IwqqAucTRxnXb",[[13,"Stick_Customer_4",["_name"],337],[4,["_lpos"],337,[1,-0.216,0.278,-0.443]],[4,["_lrot"],337,[3,0,0,0,1]],[4,["_euler"],337,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],337,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3110]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3109]],[8,"Red",false,24,[-3893,338]],[8,"Blue",false,24,[-3894,339]],[8,"Green",false,24,[-3895,688]],[8,"Orange",false,24,[-3896,689]],[8,"Pink",false,24,[-3897,690]],[8,"Purple",false,24,[-3898,691]],[8,"Yellow",false,24,[-3899,692]],[8,"Blue_light",false,24,[-3900,340]],[16,"White",24,[-3901,341]],[12,0,{},106,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3902,[18,"5bzwb1sgJJhbROR3ip6lOZ",[[13,"VFX_Smoke",["_name"],693],[4,["_lpos"],693,[1,0,0,-1.56]],[4,["_lrot"],693,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],693,[1,-180,0,0]]]],3217]],[12,0,{},106,[11,"d2mwmZkD9FNrAfZAW7A39x",-3903,[18,"50vndf4cFBUqN2efeG2rT2",[[13,"VFX_Impact2",["_name"],342],[4,["_lpos"],342,[1,0,0,1.2]],[4,["_lrot"],342,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],342,[1,90,0,0]],[4,["_lscale"],342,[1,1,1,1]]]],3218]],[12,0,{},343,[11,"a5V4sYW6tC26fEyxts/NBS",-3904,[15,"38kUHY4L5ETK/MnfBB+5p4",[[13,"Stick_Customer_1",["_name"],344],[4,["_lpos"],344,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],344,[3,0,0,0,1]],[4,["_euler"],344,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],344,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3220]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3219]],[12,0,{},343,[11,"a5V4sYW6tC26fEyxts/NBS",-3905,[15,"27v8n4bKVCIazz/iLSOPuj",[[13,"Stick_Customer_2",["_name"],345],[4,["_lpos"],345,[1,0.207,0.278,0.199]],[4,["_lrot"],345,[3,0,0,0,1]],[4,["_euler"],345,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],345,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3222]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3221]],[12,0,{},343,[11,"a5V4sYW6tC26fEyxts/NBS",-3906,[15,"15kicena9JG7OOOoWz+W3v",[[13,"Stick_Customer_3",["_name"],346],[4,["_lpos"],346,[1,0.207,0.278,-0.443]],[4,["_lrot"],346,[3,0,0,0,1]],[4,["_euler"],346,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],346,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3224]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3223]],[12,0,{},343,[11,"a5V4sYW6tC26fEyxts/NBS",-3907,[15,"53iH7Mg+BPXLVMSnrK+ZYG",[[13,"Stick_Customer_4",["_name"],347],[4,["_lpos"],347,[1,-0.216,0.278,-0.443]],[4,["_lrot"],347,[3,0,0,0,1]],[4,["_euler"],347,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],347,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3226]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3225]],[8,"Red",false,25,[-3908,348]],[8,"Blue",false,25,[-3909,349]],[8,"Green",false,25,[-3910,694]],[8,"Orange",false,25,[-3911,695]],[8,"Pink",false,25,[-3912,696]],[8,"Purple",false,25,[-3913,697]],[8,"Yellow",false,25,[-3914,698]],[8,"Blue_light",false,25,[-3915,350]],[16,"White",25,[-3916,351]],[12,0,{},107,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3917,[18,"5elnAX9z1AAr/XTV+BCHd5",[[13,"VFX_Smoke",["_name"],699],[4,["_lpos"],699,[1,0,0,-1.56]],[4,["_lrot"],699,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],699,[1,-180,0,0]]]],3333]],[12,0,{},107,[11,"d2mwmZkD9FNrAfZAW7A39x",-3918,[18,"7d5XpwY/lGpL8tNdHJXVov",[[13,"VFX_Impact2",["_name"],352],[4,["_lpos"],352,[1,0,0,1.2]],[4,["_lrot"],352,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],352,[1,90,0,0]],[4,["_lscale"],352,[1,1,1,1]]]],3334]],[12,0,{},353,[11,"a5V4sYW6tC26fEyxts/NBS",-3919,[15,"0fkWxLMHJPTK6XcXeN5LjN",[[13,"Stick_Customer_1",["_name"],354],[4,["_lpos"],354,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],354,[3,0,0,0,1]],[4,["_euler"],354,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],354,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3336]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3335]],[12,0,{},353,[11,"a5V4sYW6tC26fEyxts/NBS",-3920,[15,"c5sNzE4rdGUIl7XtB/WW71",[[13,"Stick_Customer_2",["_name"],355],[4,["_lpos"],355,[1,0.207,0.278,0.199]],[4,["_lrot"],355,[3,0,0,0,1]],[4,["_euler"],355,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],355,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3338]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3337]],[12,0,{},353,[11,"a5V4sYW6tC26fEyxts/NBS",-3921,[15,"3fVpPJERNF7qAGmVSODHJk",[[13,"Stick_Customer_3",["_name"],356],[4,["_lpos"],356,[1,0.207,0.278,-0.443]],[4,["_lrot"],356,[3,0,0,0,1]],[4,["_euler"],356,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],356,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3340]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3339]],[12,0,{},353,[11,"a5V4sYW6tC26fEyxts/NBS",-3922,[15,"d7+KsCwqdCFpDlf7xt4SIM",[[13,"Stick_Customer_4",["_name"],357],[4,["_lpos"],357,[1,-0.216,0.278,-0.443]],[4,["_lrot"],357,[3,0,0,0,1]],[4,["_euler"],357,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],357,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3342]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3341]],[8,"Red",false,26,[-3923,358]],[8,"Blue",false,26,[-3924,359]],[8,"Green",false,26,[-3925,700]],[8,"Orange",false,26,[-3926,701]],[8,"Pink",false,26,[-3927,702]],[8,"Purple",false,26,[-3928,703]],[8,"Yellow",false,26,[-3929,704]],[8,"Blue_light",false,26,[-3930,360]],[16,"White",26,[-3931,361]],[12,0,{},108,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3932,[18,"515x7mlYRKJpKH++Mz4rLd",[[13,"VFX_Smoke",["_name"],705],[4,["_lpos"],705,[1,0,0,-1.56]],[4,["_lrot"],705,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],705,[1,-180,0,0]]]],3449]],[12,0,{},108,[11,"d2mwmZkD9FNrAfZAW7A39x",-3933,[18,"4aR8vjGc5IfreZHmlZkkU1",[[13,"VFX_Impact2",["_name"],362],[4,["_lpos"],362,[1,0,0,1.2]],[4,["_lrot"],362,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],362,[1,90,0,0]],[4,["_lscale"],362,[1,1,1,1]]]],3450]],[12,0,{},363,[11,"a5V4sYW6tC26fEyxts/NBS",-3934,[15,"d7d2GMatRMdqZY58MOXvUH",[[13,"Stick_Customer_1",["_name"],364],[4,["_lpos"],364,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],364,[3,0,0,0,1]],[4,["_euler"],364,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],364,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3452]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3451]],[12,0,{},363,[11,"a5V4sYW6tC26fEyxts/NBS",-3935,[15,"d6kYG6asZHo5JPAcgsbA8D",[[13,"Stick_Customer_2",["_name"],365],[4,["_lpos"],365,[1,0.207,0.278,0.199]],[4,["_lrot"],365,[3,0,0,0,1]],[4,["_euler"],365,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],365,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3454]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3453]],[12,0,{},363,[11,"a5V4sYW6tC26fEyxts/NBS",-3936,[15,"25AmkMFh9EyZzlLmIyeYqt",[[13,"Stick_Customer_3",["_name"],366],[4,["_lpos"],366,[1,0.207,0.278,-0.443]],[4,["_lrot"],366,[3,0,0,0,1]],[4,["_euler"],366,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],366,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3456]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3455]],[12,0,{},363,[11,"a5V4sYW6tC26fEyxts/NBS",-3937,[15,"94NHfSBlBEgZyFl6U9fo8M",[[13,"Stick_Customer_4",["_name"],367],[4,["_lpos"],367,[1,-0.216,0.278,-0.443]],[4,["_lrot"],367,[3,0,0,0,1]],[4,["_euler"],367,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],367,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3458]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3457]],[8,"Red",false,27,[-3938,368]],[8,"Blue",false,27,[-3939,369]],[8,"Green",false,27,[-3940,706]],[8,"Orange",false,27,[-3941,707]],[8,"Pink",false,27,[-3942,708]],[8,"Purple",false,27,[-3943,709]],[8,"Yellow",false,27,[-3944,710]],[8,"Blue_light",false,27,[-3945,370]],[16,"White",27,[-3946,371]],[12,0,{},109,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3947,[18,"f01zwDudBIB6mWFplz0dpb",[[13,"VFX_Smoke",["_name"],711],[4,["_lpos"],711,[1,0,0,-1.56]],[4,["_lrot"],711,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],711,[1,-180,0,0]]]],3565]],[12,0,{},109,[11,"d2mwmZkD9FNrAfZAW7A39x",-3948,[18,"90DHuxNeRNJYPzrtwMxwJH",[[13,"VFX_Impact2",["_name"],372],[4,["_lpos"],372,[1,0,0,1.2]],[4,["_lrot"],372,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],372,[1,90,0,0]],[4,["_lscale"],372,[1,1,1,1]]]],3566]],[12,0,{},373,[11,"a5V4sYW6tC26fEyxts/NBS",-3949,[15,"f3offL53ZA8pgjz5lZVlJd",[[13,"Stick_Customer_1",["_name"],374],[4,["_lpos"],374,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],374,[3,0,0,0,1]],[4,["_euler"],374,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],374,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3568]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3567]],[12,0,{},373,[11,"a5V4sYW6tC26fEyxts/NBS",-3950,[15,"3b9fQijptE+ZpCKasAa4GT",[[13,"Stick_Customer_2",["_name"],375],[4,["_lpos"],375,[1,0.207,0.278,0.199]],[4,["_lrot"],375,[3,0,0,0,1]],[4,["_euler"],375,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],375,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3570]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3569]],[12,0,{},373,[11,"a5V4sYW6tC26fEyxts/NBS",-3951,[15,"02bCBN1IdPIZXP6M807QxI",[[13,"Stick_Customer_3",["_name"],376],[4,["_lpos"],376,[1,0.207,0.278,-0.443]],[4,["_lrot"],376,[3,0,0,0,1]],[4,["_euler"],376,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],376,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3572]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3571]],[12,0,{},373,[11,"a5V4sYW6tC26fEyxts/NBS",-3952,[15,"cdk3Po0tpO+4XHdtN97bDT",[[13,"Stick_Customer_4",["_name"],377],[4,["_lpos"],377,[1,-0.216,0.278,-0.443]],[4,["_lrot"],377,[3,0,0,0,1]],[4,["_euler"],377,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],377,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3574]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3573]],[8,"Red",false,28,[-3953,378]],[8,"Blue",false,28,[-3954,379]],[8,"Green",false,28,[-3955,712]],[8,"Orange",false,28,[-3956,713]],[8,"Pink",false,28,[-3957,714]],[8,"Purple",false,28,[-3958,715]],[8,"Yellow",false,28,[-3959,716]],[8,"Blue_light",false,28,[-3960,380]],[16,"White",28,[-3961,381]],[12,0,{},110,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3962,[18,"ca3TPm6v9IA79Hd+N6k1dI",[[13,"VFX_Smoke",["_name"],717],[4,["_lpos"],717,[1,0,0,-1.56]],[4,["_lrot"],717,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],717,[1,-180,0,0]]]],3681]],[12,0,{},110,[11,"d2mwmZkD9FNrAfZAW7A39x",-3963,[18,"20qlU1NOBAhLLnoAJLAe5z",[[13,"VFX_Impact2",["_name"],382],[4,["_lpos"],382,[1,0,0,1.2]],[4,["_lrot"],382,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],382,[1,90,0,0]],[4,["_lscale"],382,[1,1,1,1]]]],3682]],[12,0,{},383,[11,"a5V4sYW6tC26fEyxts/NBS",-3964,[15,"47IWq5YBFNPKzbRPvBbPnY",[[13,"Stick_Customer_1",["_name"],384],[4,["_lpos"],384,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],384,[3,0,0,0,1]],[4,["_euler"],384,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],384,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3684]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3683]],[12,0,{},383,[11,"a5V4sYW6tC26fEyxts/NBS",-3965,[15,"e2813WPRxKiqbveU/KwdGz",[[13,"Stick_Customer_2",["_name"],385],[4,["_lpos"],385,[1,0.207,0.278,0.199]],[4,["_lrot"],385,[3,0,0,0,1]],[4,["_euler"],385,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],385,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3686]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3685]],[12,0,{},383,[11,"a5V4sYW6tC26fEyxts/NBS",-3966,[15,"d4uQsGdClKZaBpBEnLSLRB",[[13,"Stick_Customer_3",["_name"],386],[4,["_lpos"],386,[1,0.207,0.278,-0.443]],[4,["_lrot"],386,[3,0,0,0,1]],[4,["_euler"],386,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],386,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3688]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3687]],[12,0,{},383,[11,"a5V4sYW6tC26fEyxts/NBS",-3967,[15,"78LnKiNe9LuJRbSf29jJsj",[[13,"Stick_Customer_4",["_name"],387],[4,["_lpos"],387,[1,-0.216,0.278,-0.443]],[4,["_lrot"],387,[3,0,0,0,1]],[4,["_euler"],387,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],387,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3690]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3689]],[8,"Red",false,29,[-3968,388]],[8,"Blue",false,29,[-3969,389]],[8,"Green",false,29,[-3970,718]],[8,"Orange",false,29,[-3971,719]],[8,"Pink",false,29,[-3972,720]],[8,"Purple",false,29,[-3973,721]],[8,"Yellow",false,29,[-3974,722]],[8,"Blue_light",false,29,[-3975,390]],[16,"White",29,[-3976,391]],[12,0,{},111,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3977,[18,"66tnsAv09G3JxRcRENatRA",[[13,"VFX_Smoke",["_name"],723],[4,["_lpos"],723,[1,0,0,-1.56]],[4,["_lrot"],723,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],723,[1,-180,0,0]]]],3797]],[12,0,{},111,[11,"d2mwmZkD9FNrAfZAW7A39x",-3978,[18,"b0+oZD1txHsbELRUSqAHAr",[[13,"VFX_Impact2",["_name"],392],[4,["_lpos"],392,[1,0,0,1.2]],[4,["_lrot"],392,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],392,[1,90,0,0]],[4,["_lscale"],392,[1,1,1,1]]]],3798]],[12,0,{},393,[11,"a5V4sYW6tC26fEyxts/NBS",-3979,[15,"ed6SD1o15DDouCgOTv1zrz",[[13,"Stick_Customer_1",["_name"],394],[4,["_lpos"],394,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],394,[3,0,0,0,1]],[4,["_euler"],394,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],394,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3800]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3799]],[12,0,{},393,[11,"a5V4sYW6tC26fEyxts/NBS",-3980,[15,"0eaWdH6g9L34fpoDZkC/8e",[[13,"Stick_Customer_2",["_name"],395],[4,["_lpos"],395,[1,0.207,0.278,0.199]],[4,["_lrot"],395,[3,0,0,0,1]],[4,["_euler"],395,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],395,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3802]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3801]],[12,0,{},393,[11,"a5V4sYW6tC26fEyxts/NBS",-3981,[15,"afhm+i8DxFlbYKLaDktc7w",[[13,"Stick_Customer_3",["_name"],396],[4,["_lpos"],396,[1,0.207,0.278,-0.443]],[4,["_lrot"],396,[3,0,0,0,1]],[4,["_euler"],396,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],396,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3804]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3803]],[12,0,{},393,[11,"a5V4sYW6tC26fEyxts/NBS",-3982,[15,"f6SHnCYuhBqIgbML0HQ2IZ",[[13,"Stick_Customer_4",["_name"],397],[4,["_lpos"],397,[1,-0.216,0.278,-0.443]],[4,["_lrot"],397,[3,0,0,0,1]],[4,["_euler"],397,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],397,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3806]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3805]],[8,"Red",false,30,[-3983,398]],[8,"Blue",false,30,[-3984,399]],[8,"Green",false,30,[-3985,724]],[8,"Orange",false,30,[-3986,725]],[8,"Pink",false,30,[-3987,726]],[8,"Purple",false,30,[-3988,727]],[8,"Yellow",false,30,[-3989,728]],[8,"Blue_light",false,30,[-3990,400]],[16,"White",30,[-3991,401]],[12,0,{},112,[11,"54Y0jZZ95G4bNLwJNyEXwH",-3992,[18,"7f6CZoyq5EYaPqbs29d4JU",[[13,"VFX_Smoke",["_name"],729],[4,["_lpos"],729,[1,0,0,-1.56]],[4,["_lrot"],729,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],729,[1,-180,0,0]]]],3913]],[12,0,{},112,[11,"d2mwmZkD9FNrAfZAW7A39x",-3993,[18,"97TuO47Q1F0IkVKoeQkFdG",[[13,"VFX_Impact2",["_name"],402],[4,["_lpos"],402,[1,0,0,1.2]],[4,["_lrot"],402,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],402,[1,90,0,0]],[4,["_lscale"],402,[1,1,1,1]]]],3914]],[12,0,{},403,[11,"a5V4sYW6tC26fEyxts/NBS",-3994,[15,"59MNKMIrVAtbEg4okvA1d7",[[13,"Stick_Customer_1",["_name"],404],[4,["_lpos"],404,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],404,[3,0,0,0,1]],[4,["_euler"],404,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],404,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3916]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3915]],[12,0,{},403,[11,"a5V4sYW6tC26fEyxts/NBS",-3995,[15,"c6lQ3NQVFJDLGHau26mMeF",[[13,"Stick_Customer_2",["_name"],405],[4,["_lpos"],405,[1,0.207,0.278,0.199]],[4,["_lrot"],405,[3,0,0,0,1]],[4,["_euler"],405,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],405,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3918]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3917]],[12,0,{},403,[11,"a5V4sYW6tC26fEyxts/NBS",-3996,[15,"e0tSujXX5MMLR6F4pHrnQc",[[13,"Stick_Customer_3",["_name"],406],[4,["_lpos"],406,[1,0.207,0.278,-0.443]],[4,["_lrot"],406,[3,0,0,0,1]],[4,["_euler"],406,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],406,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3920]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3919]],[12,0,{},403,[11,"a5V4sYW6tC26fEyxts/NBS",-3997,[15,"51TRDXOHNKmbg/E9D6y7b2",[[13,"Stick_Customer_4",["_name"],407],[4,["_lpos"],407,[1,-0.216,0.278,-0.443]],[4,["_lrot"],407,[3,0,0,0,1]],[4,["_euler"],407,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],407,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],3922]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],3921]],[8,"Red",false,31,[-3998,408]],[8,"Blue",false,31,[-3999,409]],[8,"Green",false,31,[-4000,730]],[8,"Orange",false,31,[-4001,731]],[8,"Pink",false,31,[-4002,732]],[8,"Purple",false,31,[-4003,733]],[8,"Yellow",false,31,[-4004,734]],[8,"Blue_light",false,31,[-4005,410]],[16,"White",31,[-4006,411]],[12,0,{},113,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4007,[18,"f1lO54w1dMj7ffn6160bs+",[[13,"VFX_Smoke",["_name"],735],[4,["_lpos"],735,[1,0,0,-1.56]],[4,["_lrot"],735,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],735,[1,-180,0,0]]]],4029]],[12,0,{},113,[11,"d2mwmZkD9FNrAfZAW7A39x",-4008,[18,"75X1QK0nJJspVSwjri36Za",[[13,"VFX_Impact2",["_name"],412],[4,["_lpos"],412,[1,0,0,1.2]],[4,["_lrot"],412,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],412,[1,90,0,0]],[4,["_lscale"],412,[1,1,1,1]]]],4030]],[12,0,{},413,[11,"a5V4sYW6tC26fEyxts/NBS",-4009,[15,"f2Cc0qYmZLBYV3FA964UuS",[[13,"Stick_Customer_1",["_name"],414],[4,["_lpos"],414,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],414,[3,0,0,0,1]],[4,["_euler"],414,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],414,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4032]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4031]],[12,0,{},413,[11,"a5V4sYW6tC26fEyxts/NBS",-4010,[15,"bdLK5wuNRHh4pCwu78LjLf",[[13,"Stick_Customer_2",["_name"],415],[4,["_lpos"],415,[1,0.207,0.278,0.199]],[4,["_lrot"],415,[3,0,0,0,1]],[4,["_euler"],415,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],415,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4034]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4033]],[12,0,{},413,[11,"a5V4sYW6tC26fEyxts/NBS",-4011,[15,"2foxJblVFPWKQx8YTBkV53",[[13,"Stick_Customer_3",["_name"],416],[4,["_lpos"],416,[1,0.207,0.278,-0.443]],[4,["_lrot"],416,[3,0,0,0,1]],[4,["_euler"],416,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],416,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4036]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4035]],[12,0,{},413,[11,"a5V4sYW6tC26fEyxts/NBS",-4012,[15,"2ebn8G0xRKKby7NxsRJfVQ",[[13,"Stick_Customer_4",["_name"],417],[4,["_lpos"],417,[1,-0.216,0.278,-0.443]],[4,["_lrot"],417,[3,0,0,0,1]],[4,["_euler"],417,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],417,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4038]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4037]],[8,"Red",false,32,[-4013,418]],[8,"Blue",false,32,[-4014,419]],[8,"Green",false,32,[-4015,736]],[8,"Orange",false,32,[-4016,737]],[8,"Pink",false,32,[-4017,738]],[8,"Purple",false,32,[-4018,739]],[8,"Yellow",false,32,[-4019,740]],[8,"Blue_light",false,32,[-4020,420]],[16,"White",32,[-4021,421]],[12,0,{},114,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4022,[18,"4febqWRjZCtJDPao+5wOfD",[[13,"VFX_Smoke",["_name"],741],[4,["_lpos"],741,[1,0,0,-1.56]],[4,["_lrot"],741,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],741,[1,-180,0,0]]]],4145]],[12,0,{},114,[11,"d2mwmZkD9FNrAfZAW7A39x",-4023,[18,"c22R76AqxH3IPCnhambWE+",[[13,"VFX_Impact2",["_name"],422],[4,["_lpos"],422,[1,0,0,1.2]],[4,["_lrot"],422,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],422,[1,90,0,0]],[4,["_lscale"],422,[1,1,1,1]]]],4146]],[12,0,{},423,[11,"a5V4sYW6tC26fEyxts/NBS",-4024,[15,"e7KkIDwgdOSIpU0JqPdocu",[[13,"Stick_Customer_1",["_name"],424],[4,["_lpos"],424,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],424,[3,0,0,0,1]],[4,["_euler"],424,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],424,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4148]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4147]],[12,0,{},423,[11,"a5V4sYW6tC26fEyxts/NBS",-4025,[15,"6cy62GOlFKU52ZOk1O+KLB",[[13,"Stick_Customer_2",["_name"],425],[4,["_lpos"],425,[1,0.207,0.278,0.199]],[4,["_lrot"],425,[3,0,0,0,1]],[4,["_euler"],425,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],425,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4150]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4149]],[12,0,{},423,[11,"a5V4sYW6tC26fEyxts/NBS",-4026,[15,"ed1pY22I1E7YRe06bgF80m",[[13,"Stick_Customer_3",["_name"],426],[4,["_lpos"],426,[1,0.207,0.278,-0.443]],[4,["_lrot"],426,[3,0,0,0,1]],[4,["_euler"],426,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],426,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4152]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4151]],[12,0,{},423,[11,"a5V4sYW6tC26fEyxts/NBS",-4027,[15,"4aSBQcAK9A45KOBsOHWu0S",[[13,"Stick_Customer_4",["_name"],427],[4,["_lpos"],427,[1,-0.216,0.278,-0.443]],[4,["_lrot"],427,[3,0,0,0,1]],[4,["_euler"],427,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],427,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4154]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4153]],[8,"Red",false,33,[-4028,428]],[8,"Blue",false,33,[-4029,429]],[8,"Green",false,33,[-4030,742]],[8,"Orange",false,33,[-4031,743]],[8,"Pink",false,33,[-4032,744]],[8,"Purple",false,33,[-4033,745]],[8,"Yellow",false,33,[-4034,746]],[8,"Blue_light",false,33,[-4035,430]],[16,"White",33,[-4036,431]],[12,0,{},115,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4037,[18,"41tk3chdFB37H+NYQvmV5r",[[13,"VFX_Smoke",["_name"],747],[4,["_lpos"],747,[1,0,0,-1.56]],[4,["_lrot"],747,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],747,[1,-180,0,0]]]],4261]],[12,0,{},115,[11,"d2mwmZkD9FNrAfZAW7A39x",-4038,[18,"c3ZhPeee9OCIJHQ/bNaXxZ",[[13,"VFX_Impact2",["_name"],432],[4,["_lpos"],432,[1,0,0,1.2]],[4,["_lrot"],432,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],432,[1,90,0,0]],[4,["_lscale"],432,[1,1,1,1]]]],4262]],[12,0,{},433,[11,"a5V4sYW6tC26fEyxts/NBS",-4039,[15,"8cwgoWu85CELh8znHXW2iQ",[[13,"Stick_Customer_1",["_name"],434],[4,["_lpos"],434,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],434,[3,0,0,0,1]],[4,["_euler"],434,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],434,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4264]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4263]],[12,0,{},433,[11,"a5V4sYW6tC26fEyxts/NBS",-4040,[15,"05Os7nyp1GGIfTwsd/t85e",[[13,"Stick_Customer_2",["_name"],435],[4,["_lpos"],435,[1,0.207,0.278,0.199]],[4,["_lrot"],435,[3,0,0,0,1]],[4,["_euler"],435,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],435,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4266]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4265]],[12,0,{},433,[11,"a5V4sYW6tC26fEyxts/NBS",-4041,[15,"f4qePmyItHArhgVXUDNVO5",[[13,"Stick_Customer_3",["_name"],436],[4,["_lpos"],436,[1,0.207,0.278,-0.443]],[4,["_lrot"],436,[3,0,0,0,1]],[4,["_euler"],436,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],436,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4268]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4267]],[12,0,{},433,[11,"a5V4sYW6tC26fEyxts/NBS",-4042,[15,"e5xSVCHalPeKZu0wLWilTd",[[13,"Stick_Customer_4",["_name"],437],[4,["_lpos"],437,[1,-0.216,0.278,-0.443]],[4,["_lrot"],437,[3,0,0,0,1]],[4,["_euler"],437,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],437,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4270]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4269]],[8,"Red",false,34,[-4043,438]],[8,"Blue",false,34,[-4044,439]],[8,"Green",false,34,[-4045,748]],[8,"Orange",false,34,[-4046,749]],[8,"Pink",false,34,[-4047,750]],[8,"Purple",false,34,[-4048,751]],[8,"Yellow",false,34,[-4049,752]],[8,"Blue_light",false,34,[-4050,440]],[16,"White",34,[-4051,441]],[12,0,{},116,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4052,[18,"7d774D4PJJGadRZtZKEPnT",[[13,"VFX_Smoke",["_name"],753],[4,["_lpos"],753,[1,0,0,-1.56]],[4,["_lrot"],753,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],753,[1,-180,0,0]]]],4377]],[12,0,{},116,[11,"d2mwmZkD9FNrAfZAW7A39x",-4053,[18,"fak8//pfVE66iG1oHNyviO",[[13,"VFX_Impact2",["_name"],442],[4,["_lpos"],442,[1,0,0,1.2]],[4,["_lrot"],442,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],442,[1,90,0,0]],[4,["_lscale"],442,[1,1,1,1]]]],4378]],[12,0,{},443,[11,"a5V4sYW6tC26fEyxts/NBS",-4054,[15,"f9hdJ6vsZKuLmKObYZJrXT",[[13,"Stick_Customer_1",["_name"],444],[4,["_lpos"],444,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],444,[3,0,0,0,1]],[4,["_euler"],444,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],444,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4380]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4379]],[12,0,{},443,[11,"a5V4sYW6tC26fEyxts/NBS",-4055,[15,"944DDXYdpN+ZNS/9qZOnmB",[[13,"Stick_Customer_2",["_name"],445],[4,["_lpos"],445,[1,0.207,0.278,0.199]],[4,["_lrot"],445,[3,0,0,0,1]],[4,["_euler"],445,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],445,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4382]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4381]],[12,0,{},443,[11,"a5V4sYW6tC26fEyxts/NBS",-4056,[15,"14OIMZlcFObqcUIrqB76SO",[[13,"Stick_Customer_3",["_name"],446],[4,["_lpos"],446,[1,0.207,0.278,-0.443]],[4,["_lrot"],446,[3,0,0,0,1]],[4,["_euler"],446,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],446,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4384]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4383]],[12,0,{},443,[11,"a5V4sYW6tC26fEyxts/NBS",-4057,[15,"07HxLgHExAULVWWT5q6Cut",[[13,"Stick_Customer_4",["_name"],447],[4,["_lpos"],447,[1,-0.216,0.278,-0.443]],[4,["_lrot"],447,[3,0,0,0,1]],[4,["_euler"],447,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],447,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4386]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4385]],[8,"Red",false,35,[-4058,448]],[8,"Blue",false,35,[-4059,449]],[8,"Green",false,35,[-4060,754]],[8,"Orange",false,35,[-4061,755]],[8,"Pink",false,35,[-4062,756]],[8,"Purple",false,35,[-4063,757]],[8,"Yellow",false,35,[-4064,758]],[8,"Blue_light",false,35,[-4065,450]],[16,"White",35,[-4066,451]],[12,0,{},117,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4067,[18,"23E6fWEuBM44YcBZUhwXTM",[[13,"VFX_Smoke",["_name"],759],[4,["_lpos"],759,[1,0,0,-1.56]],[4,["_lrot"],759,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],759,[1,-180,0,0]]]],4493]],[12,0,{},117,[11,"d2mwmZkD9FNrAfZAW7A39x",-4068,[18,"f9y1S+HsFEgZXfEQWkQ0ME",[[13,"VFX_Impact2",["_name"],452],[4,["_lpos"],452,[1,0,0,1.2]],[4,["_lrot"],452,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],452,[1,90,0,0]],[4,["_lscale"],452,[1,1,1,1]]]],4494]],[12,0,{},453,[11,"a5V4sYW6tC26fEyxts/NBS",-4069,[15,"de60U51rhIPb9NM3qB3a4U",[[13,"Stick_Customer_1",["_name"],454],[4,["_lpos"],454,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],454,[3,0,0,0,1]],[4,["_euler"],454,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],454,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4496]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4495]],[12,0,{},453,[11,"a5V4sYW6tC26fEyxts/NBS",-4070,[15,"9buNyZQhlHS4dnBSn+88Bt",[[13,"Stick_Customer_2",["_name"],455],[4,["_lpos"],455,[1,0.207,0.278,0.199]],[4,["_lrot"],455,[3,0,0,0,1]],[4,["_euler"],455,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],455,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4498]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4497]],[12,0,{},453,[11,"a5V4sYW6tC26fEyxts/NBS",-4071,[15,"bfKR+tfVBMJJO4+Fl8f0QF",[[13,"Stick_Customer_3",["_name"],456],[4,["_lpos"],456,[1,0.207,0.278,-0.443]],[4,["_lrot"],456,[3,0,0,0,1]],[4,["_euler"],456,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],456,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4500]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4499]],[12,0,{},453,[11,"a5V4sYW6tC26fEyxts/NBS",-4072,[15,"dew9gUmhREyKn3nRK5yr59",[[13,"Stick_Customer_4",["_name"],457],[4,["_lpos"],457,[1,-0.216,0.278,-0.443]],[4,["_lrot"],457,[3,0,0,0,1]],[4,["_euler"],457,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],457,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4502]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4501]],[8,"Red",false,36,[-4073,458]],[8,"Blue",false,36,[-4074,459]],[8,"Green",false,36,[-4075,760]],[8,"Orange",false,36,[-4076,761]],[8,"Pink",false,36,[-4077,762]],[8,"Purple",false,36,[-4078,763]],[8,"Yellow",false,36,[-4079,764]],[8,"Blue_light",false,36,[-4080,460]],[16,"White",36,[-4081,461]],[12,0,{},118,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4082,[18,"f3XojKLO1HcZpqhv72Q0aS",[[13,"VFX_Smoke",["_name"],765],[4,["_lpos"],765,[1,0,0,-1.56]],[4,["_lrot"],765,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],765,[1,-180,0,0]]]],4609]],[12,0,{},118,[11,"d2mwmZkD9FNrAfZAW7A39x",-4083,[18,"3ehVBD5WlKfriSJj+M1t9W",[[13,"VFX_Impact2",["_name"],462],[4,["_lpos"],462,[1,0,0,1.2]],[4,["_lrot"],462,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],462,[1,90,0,0]],[4,["_lscale"],462,[1,1,1,1]]]],4610]],[12,0,{},463,[11,"a5V4sYW6tC26fEyxts/NBS",-4084,[15,"8aC3Y3r3BI4oVrDkQH9HXt",[[13,"Stick_Customer_1",["_name"],464],[4,["_lpos"],464,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],464,[3,0,0,0,1]],[4,["_euler"],464,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],464,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4612]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4611]],[12,0,{},463,[11,"a5V4sYW6tC26fEyxts/NBS",-4085,[15,"4aU1B0ielGDZ9uX7qChI2+",[[13,"Stick_Customer_2",["_name"],465],[4,["_lpos"],465,[1,0.207,0.278,0.199]],[4,["_lrot"],465,[3,0,0,0,1]],[4,["_euler"],465,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],465,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4614]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4613]],[12,0,{},463,[11,"a5V4sYW6tC26fEyxts/NBS",-4086,[15,"cc9s2iSw9EgqQ9AI2KJOTL",[[13,"Stick_Customer_3",["_name"],466],[4,["_lpos"],466,[1,0.207,0.278,-0.443]],[4,["_lrot"],466,[3,0,0,0,1]],[4,["_euler"],466,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],466,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4616]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4615]],[12,0,{},463,[11,"a5V4sYW6tC26fEyxts/NBS",-4087,[15,"15SfeXA4tASrDUnXcF5cpX",[[13,"Stick_Customer_4",["_name"],467],[4,["_lpos"],467,[1,-0.216,0.278,-0.443]],[4,["_lrot"],467,[3,0,0,0,1]],[4,["_euler"],467,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],467,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4618]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4617]],[8,"Red",false,37,[-4088,468]],[8,"Blue",false,37,[-4089,469]],[8,"Green",false,37,[-4090,766]],[8,"Orange",false,37,[-4091,767]],[8,"Pink",false,37,[-4092,768]],[8,"Purple",false,37,[-4093,769]],[8,"Yellow",false,37,[-4094,770]],[8,"Blue_light",false,37,[-4095,470]],[16,"White",37,[-4096,471]],[12,0,{},119,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4097,[18,"58QMGXcMxHFKwfoYxxkg8x",[[13,"VFX_Smoke",["_name"],771],[4,["_lpos"],771,[1,0,0,-1.56]],[4,["_lrot"],771,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],771,[1,-180,0,0]]]],4725]],[12,0,{},119,[11,"d2mwmZkD9FNrAfZAW7A39x",-4098,[18,"c1cPv+5t1Lk4g/i6yuJYqc",[[13,"VFX_Impact2",["_name"],472],[4,["_lpos"],472,[1,0,0,1.2]],[4,["_lrot"],472,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],472,[1,90,0,0]],[4,["_lscale"],472,[1,1,1,1]]]],4726]],[12,0,{},473,[11,"a5V4sYW6tC26fEyxts/NBS",-4099,[15,"feJxCFfLdE26wJ31xXrD4Y",[[13,"Stick_Customer_1",["_name"],474],[4,["_lpos"],474,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],474,[3,0,0,0,1]],[4,["_euler"],474,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],474,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4728]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4727]],[12,0,{},473,[11,"a5V4sYW6tC26fEyxts/NBS",-4100,[15,"63qL3eENRAIYtAquX5wzbS",[[13,"Stick_Customer_2",["_name"],475],[4,["_lpos"],475,[1,0.207,0.278,0.199]],[4,["_lrot"],475,[3,0,0,0,1]],[4,["_euler"],475,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],475,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4730]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4729]],[12,0,{},473,[11,"a5V4sYW6tC26fEyxts/NBS",-4101,[15,"bfVICLMUZBb6l/T/FBije+",[[13,"Stick_Customer_3",["_name"],476],[4,["_lpos"],476,[1,0.207,0.278,-0.443]],[4,["_lrot"],476,[3,0,0,0,1]],[4,["_euler"],476,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],476,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4732]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4731]],[12,0,{},473,[11,"a5V4sYW6tC26fEyxts/NBS",-4102,[15,"b7kvmhj/dBx4rcctkWcgB0",[[13,"Stick_Customer_4",["_name"],477],[4,["_lpos"],477,[1,-0.216,0.278,-0.443]],[4,["_lrot"],477,[3,0,0,0,1]],[4,["_euler"],477,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],477,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4734]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4733]],[8,"Red",false,38,[-4103,478]],[8,"Blue",false,38,[-4104,479]],[8,"Green",false,38,[-4105,772]],[8,"Orange",false,38,[-4106,773]],[8,"Pink",false,38,[-4107,774]],[8,"Purple",false,38,[-4108,775]],[8,"Yellow",false,38,[-4109,776]],[8,"Blue_light",false,38,[-4110,480]],[16,"White",38,[-4111,481]],[12,0,{},120,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4112,[18,"d9ufHspQhPaI915J3aPatS",[[13,"VFX_Smoke",["_name"],777],[4,["_lpos"],777,[1,0,0,-1.56]],[4,["_lrot"],777,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],777,[1,-180,0,0]]]],4841]],[12,0,{},120,[11,"d2mwmZkD9FNrAfZAW7A39x",-4113,[18,"f3pz08VdtPKanseiD83LzY",[[13,"VFX_Impact2",["_name"],482],[4,["_lpos"],482,[1,0,0,1.2]],[4,["_lrot"],482,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],482,[1,90,0,0]],[4,["_lscale"],482,[1,1,1,1]]]],4842]],[12,0,{},483,[11,"a5V4sYW6tC26fEyxts/NBS",-4114,[15,"bfQJoRWJ9JaICv2dfWb6Gk",[[13,"Stick_Customer_1",["_name"],484],[4,["_lpos"],484,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],484,[3,0,0,0,1]],[4,["_euler"],484,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],484,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4844]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4843]],[12,0,{},483,[11,"a5V4sYW6tC26fEyxts/NBS",-4115,[15,"e5fNUPm3tFg7hSdehrE+Xz",[[13,"Stick_Customer_2",["_name"],485],[4,["_lpos"],485,[1,0.207,0.278,0.199]],[4,["_lrot"],485,[3,0,0,0,1]],[4,["_euler"],485,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],485,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4846]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4845]],[12,0,{},483,[11,"a5V4sYW6tC26fEyxts/NBS",-4116,[15,"7dAW4RnzlPFqz1rz3welmP",[[13,"Stick_Customer_3",["_name"],486],[4,["_lpos"],486,[1,0.207,0.278,-0.443]],[4,["_lrot"],486,[3,0,0,0,1]],[4,["_euler"],486,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],486,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4848]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4847]],[12,0,{},483,[11,"a5V4sYW6tC26fEyxts/NBS",-4117,[15,"58A0ZqNO9MUYbSGomLcqmE",[[13,"Stick_Customer_4",["_name"],487],[4,["_lpos"],487,[1,-0.216,0.278,-0.443]],[4,["_lrot"],487,[3,0,0,0,1]],[4,["_euler"],487,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],487,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4850]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4849]],[8,"Red",false,39,[-4118,488]],[8,"Blue",false,39,[-4119,489]],[8,"Green",false,39,[-4120,778]],[8,"Orange",false,39,[-4121,779]],[8,"Pink",false,39,[-4122,780]],[8,"Purple",false,39,[-4123,781]],[8,"Yellow",false,39,[-4124,782]],[8,"Blue_light",false,39,[-4125,490]],[16,"White",39,[-4126,491]],[12,0,{},121,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4127,[18,"57UK5Sw9dD5LXbU4kveFB7",[[13,"VFX_Smoke",["_name"],783],[4,["_lpos"],783,[1,0,0,-1.56]],[4,["_lrot"],783,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],783,[1,-180,0,0]]]],4957]],[12,0,{},121,[11,"d2mwmZkD9FNrAfZAW7A39x",-4128,[18,"3eL1wDV6hGeoJxxzh5a0iK",[[13,"VFX_Impact2",["_name"],492],[4,["_lpos"],492,[1,0,0,1.2]],[4,["_lrot"],492,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],492,[1,90,0,0]],[4,["_lscale"],492,[1,1,1,1]]]],4958]],[12,0,{},493,[11,"a5V4sYW6tC26fEyxts/NBS",-4129,[15,"efVDfB4CpCibPnmqX0+6ZK",[[13,"Stick_Customer_1",["_name"],494],[4,["_lpos"],494,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],494,[3,0,0,0,1]],[4,["_euler"],494,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],494,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4960]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4959]],[12,0,{},493,[11,"a5V4sYW6tC26fEyxts/NBS",-4130,[15,"75XqZxalhPaaXWo8g6dJH/",[[13,"Stick_Customer_2",["_name"],495],[4,["_lpos"],495,[1,0.207,0.278,0.199]],[4,["_lrot"],495,[3,0,0,0,1]],[4,["_euler"],495,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],495,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4962]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4961]],[12,0,{},493,[11,"a5V4sYW6tC26fEyxts/NBS",-4131,[15,"59YmQkMOtHHqvSfT/ozLuX",[[13,"Stick_Customer_3",["_name"],496],[4,["_lpos"],496,[1,0.207,0.278,-0.443]],[4,["_lrot"],496,[3,0,0,0,1]],[4,["_euler"],496,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],496,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4964]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4963]],[12,0,{},493,[11,"a5V4sYW6tC26fEyxts/NBS",-4132,[15,"3cGL/qvuNCJ5+uQdecFsgp",[[13,"Stick_Customer_4",["_name"],497],[4,["_lpos"],497,[1,-0.216,0.278,-0.443]],[4,["_lrot"],497,[3,0,0,0,1]],[4,["_euler"],497,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],497,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],4966]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],4965]],[8,"Red",false,40,[-4133,498]],[8,"Blue",false,40,[-4134,499]],[8,"Green",false,40,[-4135,784]],[8,"Orange",false,40,[-4136,785]],[8,"Pink",false,40,[-4137,786]],[8,"Purple",false,40,[-4138,787]],[8,"Yellow",false,40,[-4139,788]],[8,"Blue_light",false,40,[-4140,500]],[16,"White",40,[-4141,501]],[12,0,{},122,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4142,[18,"5fDfJa3nZPVqQL5EuQRuaf",[[13,"VFX_Smoke",["_name"],789],[4,["_lpos"],789,[1,0,0,-1.56]],[4,["_lrot"],789,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],789,[1,-180,0,0]]]],5073]],[12,0,{},122,[11,"d2mwmZkD9FNrAfZAW7A39x",-4143,[18,"21kWrX4qxDhKRfwAqxxpvg",[[13,"VFX_Impact2",["_name"],502],[4,["_lpos"],502,[1,0,0,1.2]],[4,["_lrot"],502,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],502,[1,90,0,0]],[4,["_lscale"],502,[1,1,1,1]]]],5074]],[12,0,{},503,[11,"a5V4sYW6tC26fEyxts/NBS",-4144,[15,"bcFCYKkSdDwZjLEYxwO3+t",[[13,"Stick_Customer_1",["_name"],504],[4,["_lpos"],504,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],504,[3,0,0,0,1]],[4,["_euler"],504,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],504,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5076]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5075]],[12,0,{},503,[11,"a5V4sYW6tC26fEyxts/NBS",-4145,[15,"91UrGl1+VI2qB6zUnep/ED",[[13,"Stick_Customer_2",["_name"],505],[4,["_lpos"],505,[1,0.207,0.278,0.199]],[4,["_lrot"],505,[3,0,0,0,1]],[4,["_euler"],505,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],505,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5078]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5077]],[12,0,{},503,[11,"a5V4sYW6tC26fEyxts/NBS",-4146,[15,"1dWGfF4GhGKpAZ84OxaIQd",[[13,"Stick_Customer_3",["_name"],506],[4,["_lpos"],506,[1,0.207,0.278,-0.443]],[4,["_lrot"],506,[3,0,0,0,1]],[4,["_euler"],506,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],506,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5080]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5079]],[12,0,{},503,[11,"a5V4sYW6tC26fEyxts/NBS",-4147,[15,"c6FR0aNttCYKEp5x5BG7jJ",[[13,"Stick_Customer_4",["_name"],507],[4,["_lpos"],507,[1,-0.216,0.278,-0.443]],[4,["_lrot"],507,[3,0,0,0,1]],[4,["_euler"],507,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],507,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5082]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5081]],[8,"Red",false,41,[-4148,508]],[8,"Blue",false,41,[-4149,509]],[8,"Green",false,41,[-4150,790]],[8,"Orange",false,41,[-4151,791]],[8,"Pink",false,41,[-4152,792]],[8,"Purple",false,41,[-4153,793]],[8,"Yellow",false,41,[-4154,794]],[8,"Blue_light",false,41,[-4155,510]],[16,"White",41,[-4156,511]],[12,0,{},123,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4157,[18,"45WhRZ8iVA0b7EGEJUQWwm",[[13,"VFX_Smoke",["_name"],795],[4,["_lpos"],795,[1,0,0,-1.56]],[4,["_lrot"],795,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],795,[1,-180,0,0]]]],5189]],[12,0,{},123,[11,"d2mwmZkD9FNrAfZAW7A39x",-4158,[18,"a13Fn64d9IgaOPBhvIR2zJ",[[13,"VFX_Impact2",["_name"],512],[4,["_lpos"],512,[1,0,0,1.2]],[4,["_lrot"],512,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],512,[1,90,0,0]],[4,["_lscale"],512,[1,1,1,1]]]],5190]],[12,0,{},513,[11,"a5V4sYW6tC26fEyxts/NBS",-4159,[15,"02W/We2rNCP7a/dnUx6aCb",[[13,"Stick_Customer_1",["_name"],514],[4,["_lpos"],514,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],514,[3,0,0,0,1]],[4,["_euler"],514,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],514,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5192]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5191]],[12,0,{},513,[11,"a5V4sYW6tC26fEyxts/NBS",-4160,[15,"7dTqlWqCtCeLZ3iDRoC8lh",[[13,"Stick_Customer_2",["_name"],515],[4,["_lpos"],515,[1,0.207,0.278,0.199]],[4,["_lrot"],515,[3,0,0,0,1]],[4,["_euler"],515,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],515,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5194]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5193]],[12,0,{},513,[11,"a5V4sYW6tC26fEyxts/NBS",-4161,[15,"c4uEvSPONIr7hQCG2WNlCc",[[13,"Stick_Customer_3",["_name"],516],[4,["_lpos"],516,[1,0.207,0.278,-0.443]],[4,["_lrot"],516,[3,0,0,0,1]],[4,["_euler"],516,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],516,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5196]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5195]],[12,0,{},513,[11,"a5V4sYW6tC26fEyxts/NBS",-4162,[15,"dfWxiNsEVKeY+m+btFcL/L",[[13,"Stick_Customer_4",["_name"],517],[4,["_lpos"],517,[1,-0.216,0.278,-0.443]],[4,["_lrot"],517,[3,0,0,0,1]],[4,["_euler"],517,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],517,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5198]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5197]],[8,"Red",false,42,[-4163,518]],[8,"Blue",false,42,[-4164,519]],[8,"Green",false,42,[-4165,796]],[8,"Orange",false,42,[-4166,797]],[8,"Pink",false,42,[-4167,798]],[8,"Purple",false,42,[-4168,799]],[8,"Yellow",false,42,[-4169,800]],[8,"Blue_light",false,42,[-4170,520]],[16,"White",42,[-4171,521]],[12,0,{},124,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4172,[18,"15SXvWmghPXZ/HepE1eP1J",[[13,"VFX_Smoke",["_name"],801],[4,["_lpos"],801,[1,0,0,-1.56]],[4,["_lrot"],801,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],801,[1,-180,0,0]]]],5305]],[12,0,{},124,[11,"d2mwmZkD9FNrAfZAW7A39x",-4173,[18,"1dvbYAhBBMnKAnWKEWPk7N",[[13,"VFX_Impact2",["_name"],522],[4,["_lpos"],522,[1,0,0,1.2]],[4,["_lrot"],522,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],522,[1,90,0,0]],[4,["_lscale"],522,[1,1,1,1]]]],5306]],[12,0,{},523,[11,"a5V4sYW6tC26fEyxts/NBS",-4174,[15,"101Hu2dQBPaJ/pG/irZnpT",[[13,"Stick_Customer_1",["_name"],524],[4,["_lpos"],524,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],524,[3,0,0,0,1]],[4,["_euler"],524,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],524,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5308]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5307]],[12,0,{},523,[11,"a5V4sYW6tC26fEyxts/NBS",-4175,[15,"d40ogl34BK3bCtQNF+VVBQ",[[13,"Stick_Customer_2",["_name"],525],[4,["_lpos"],525,[1,0.207,0.278,0.199]],[4,["_lrot"],525,[3,0,0,0,1]],[4,["_euler"],525,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],525,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5310]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5309]],[12,0,{},523,[11,"a5V4sYW6tC26fEyxts/NBS",-4176,[15,"f6fczLbvFL7peUQdqJGiwl",[[13,"Stick_Customer_3",["_name"],526],[4,["_lpos"],526,[1,0.207,0.278,-0.443]],[4,["_lrot"],526,[3,0,0,0,1]],[4,["_euler"],526,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],526,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5312]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5311]],[12,0,{},523,[11,"a5V4sYW6tC26fEyxts/NBS",-4177,[15,"23PePnHCNG7YJpGdg1DVkt",[[13,"Stick_Customer_4",["_name"],527],[4,["_lpos"],527,[1,-0.216,0.278,-0.443]],[4,["_lrot"],527,[3,0,0,0,1]],[4,["_euler"],527,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],527,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5314]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5313]],[8,"Red",false,43,[-4178,528]],[8,"Blue",false,43,[-4179,529]],[8,"Green",false,43,[-4180,802]],[8,"Orange",false,43,[-4181,803]],[8,"Pink",false,43,[-4182,804]],[8,"Purple",false,43,[-4183,805]],[8,"Yellow",false,43,[-4184,806]],[8,"Blue_light",false,43,[-4185,530]],[16,"White",43,[-4186,531]],[12,0,{},125,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4187,[18,"58Tz+GD6JCcKvhFiJD2c+b",[[13,"VFX_Smoke",["_name"],807],[4,["_lpos"],807,[1,0,0,-1.56]],[4,["_lrot"],807,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],807,[1,-180,0,0]]]],5421]],[12,0,{},125,[11,"d2mwmZkD9FNrAfZAW7A39x",-4188,[18,"a0tK85fJtLWJetjuanuXso",[[13,"VFX_Impact2",["_name"],532],[4,["_lpos"],532,[1,0,0,1.2]],[4,["_lrot"],532,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],532,[1,90,0,0]],[4,["_lscale"],532,[1,1,1,1]]]],5422]],[12,0,{},533,[11,"a5V4sYW6tC26fEyxts/NBS",-4189,[15,"behfdQ3qNMkIt2lgze11Zx",[[13,"Stick_Customer_1",["_name"],534],[4,["_lpos"],534,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],534,[3,0,0,0,1]],[4,["_euler"],534,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],534,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5424]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5423]],[12,0,{},533,[11,"a5V4sYW6tC26fEyxts/NBS",-4190,[15,"54k/3yhStPlYxmyUSDmt7Y",[[13,"Stick_Customer_2",["_name"],535],[4,["_lpos"],535,[1,0.207,0.278,0.199]],[4,["_lrot"],535,[3,0,0,0,1]],[4,["_euler"],535,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],535,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5426]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5425]],[12,0,{},533,[11,"a5V4sYW6tC26fEyxts/NBS",-4191,[15,"dcwtVWlBBIp6TyF5gOJrwj",[[13,"Stick_Customer_3",["_name"],536],[4,["_lpos"],536,[1,0.207,0.278,-0.443]],[4,["_lrot"],536,[3,0,0,0,1]],[4,["_euler"],536,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],536,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5428]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5427]],[12,0,{},533,[11,"a5V4sYW6tC26fEyxts/NBS",-4192,[15,"e42FCbdXxA7Zickh4WWorE",[[13,"Stick_Customer_4",["_name"],537],[4,["_lpos"],537,[1,-0.216,0.278,-0.443]],[4,["_lrot"],537,[3,0,0,0,1]],[4,["_euler"],537,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],537,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5430]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5429]],[8,"Red",false,44,[-4193,538]],[8,"Blue",false,44,[-4194,539]],[8,"Green",false,44,[-4195,808]],[8,"Orange",false,44,[-4196,809]],[8,"Pink",false,44,[-4197,810]],[8,"Purple",false,44,[-4198,811]],[8,"Yellow",false,44,[-4199,812]],[8,"Blue_light",false,44,[-4200,540]],[16,"White",44,[-4201,541]],[12,0,{},126,[11,"54Y0jZZ95G4bNLwJNyEXwH",-4202,[18,"33deYapwBArLwbej7wTcS1",[[13,"VFX_Smoke",["_name"],813],[4,["_lpos"],813,[1,0,0,-1.56]],[4,["_lrot"],813,[3,-1,0,0,6.123233995736766e-17]],[4,["_euler"],813,[1,-180,0,0]]]],5537]],[12,0,{},126,[11,"d2mwmZkD9FNrAfZAW7A39x",-4203,[18,"a4g69wXdtGC7A6xNaZzFnD",[[13,"VFX_Impact2",["_name"],542],[4,["_lpos"],542,[1,0,0,1.2]],[4,["_lrot"],542,[3,0.7071067811865475,0,0,0.7071067811865476]],[4,["_euler"],542,[1,90,0,0]],[4,["_lscale"],542,[1,1,1,1]]]],5538]],[12,0,{},543,[11,"a5V4sYW6tC26fEyxts/NBS",-4204,[15,"58P5nkFKdLBIVhm/YlPcI2",[[13,"Stick_Customer_1",["_name"],544],[4,["_lpos"],544,[1,-0.20200000000000173,0.278,0.19899999999999984]],[4,["_lrot"],544,[3,0,0,0,1]],[4,["_euler"],544,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],544,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5540]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5539]],[12,0,{},543,[11,"a5V4sYW6tC26fEyxts/NBS",-4205,[15,"c7SlcIhDdIHYD9AIAthVUu",[[13,"Stick_Customer_2",["_name"],545],[4,["_lpos"],545,[1,0.207,0.278,0.199]],[4,["_lrot"],545,[3,0,0,0,1]],[4,["_euler"],545,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],545,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5542]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5541]],[12,0,{},543,[11,"a5V4sYW6tC26fEyxts/NBS",-4206,[15,"a8qhCH28hDg4IruSdTSZ5g",[[13,"Stick_Customer_3",["_name"],546],[4,["_lpos"],546,[1,0.207,0.278,-0.443]],[4,["_lrot"],546,[3,0,0,0,1]],[4,["_euler"],546,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],546,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5544]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5543]],[12,0,{},543,[11,"a5V4sYW6tC26fEyxts/NBS",-4207,[15,"dbeEMXfZtMPIzoANj34APS",[[13,"Stick_Customer_4",["_name"],547],[4,["_lpos"],547,[1,-0.216,0.278,-0.443]],[4,["_lrot"],547,[3,0,0,0,1]],[4,["_euler"],547,[1,0,0,0]],[14,false,["_active"],[3,["e7beZ4lplEmbBf9iZUd5l4"]]],[4,["_lscale"],547,[1,0.55,0.55,0.55]],[10,["_defaultClip"],[3,["b7X9P/ZXhEiaKzyWYRNx9H"]],5546]],[[3,["d9vvMA4M5OEYECDdsMLZqr"]]]],5545]],[39,"TurnRightPoint",false,7,[56],[1,6.962,0,-23.971],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,-90,0]],[16,"Red",56,[-4208,819]],[8,"Blue",false,56,[-4209,820]],[8,"Green",false,56,[-4210,821]],[8,"Orange",false,56,[-4211,822]],[8,"Pink",false,56,[-4212,823]],[8,"Purple",false,56,[-4213,824]],[8,"Yellow",false,56,[-4214,825]],[39,"CarStop_1",false,7,[826],[1,5.9,0,-19.047],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",826,[-4215,827]],[39,"CarStop_2",false,7,[828],[1,2.307,0,-19.093],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",828,[-4216,829]],[39,"CarStop_3",false,7,[830],[1,-1.197,0,-18.904],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",830,[-4217,831]],[39,"CarStop_4",false,7,[832],[1,-4.681,0,-19.022],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",832,[-4218,833]],[39,"CarStop_5",false,7,[834],[1,-8.106,0,-18.964],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",834,[-4219,835]],[39,"CarStop_6",false,7,[836],[1,-11.704,0,-19.083],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",836,[-4220,837]],[39,"CarStop_7",false,7,[838],[1,-15.296,0,-18.988],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",838,[-4221,839]],[39,"CarStop_8",false,7,[840],[1,-18.785,0,-19.102],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[16,"Red",840,[-4222,841]],[16,"Red",842,[-4223,843]],[16,"Red",844,[-4224,845]],[16,"Red",846,[-4225,847]],[16,"Red",848,[-4226,849]],[16,"Red",850,[-4227,851]],[16,"Red",852,[-4228,853]],[16,"Red",854,[-4229,855]],[16,"Red",856,[-4230,857]],[39,"TurnLeftPoint",false,7,[57],[1,-19.667,0,-23.971],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,90,0]],[16,"Red",57,[-4231,858]],[8,"Blue",false,57,[-4232,859]],[8,"Green",false,57,[-4233,860]],[8,"Orange",false,57,[-4234,861]],[8,"Pink",false,57,[-4235,862]],[8,"Purple",false,57,[-4236,863]],[8,"Yellow",false,57,[-4237,864]],[125,"Down_TurnLeftPoint",false,7,[58],[1,-20.561,0,-64.588],[1,1.5,1.5,1.5]],[16,"Red",58,[-4238,865]],[8,"Blue",false,58,[-4239,866]],[8,"Green",false,58,[-4240,867]],[8,"Orange",false,58,[-4241,868]],[8,"Pink",false,58,[-4242,869]],[8,"Purple",false,58,[-4243,870]],[8,"Yellow",false,58,[-4244,871]],[39,"DonePoint",false,7,[59],[1,-51.995,0,-23.971],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,0,-90,0]],[16,"Red",59,[-4245,872]],[8,"Blue",false,59,[-4246,873]],[8,"Green",false,59,[-4247,874]],[8,"Orange",false,59,[-4248,875]],[8,"Pink",false,59,[-4249,876]],[8,"Purple",false,59,[-4250,877]],[8,"Yellow",false,59,[-4251,878]],[72,"Text",33554432,88,[879],[[46,-4252]]],[102,"needtopickupguest",33554432,548,[[51,-4253,[5,614,204]],[97,-4254,6079]],[1,0,68,0],[1,1.3,1.3,1]],[86,"Overlay",33554432,129,[[51,-4255,[5,5000,5000]],[114,0,-4256,[4,0],6086]]],[102,"icon",33554432,129,[[51,-4257,[5,511,512]],[98,-4258,[4,16777215],6087]],[1,0,50,0],[1,0.3,0.3,1]],[126,"text",33554432,549,[[51,-4259,[5,1058,167]],[97,-4260,6088]],[1,0.4,0.4,1]],[72,"Particles",33554432,88,[550],[[46,-4261]]],[86,"Snow_1",33554432,550,[[46,-4262],[99,150,6,6,-109,4,16,2,16,70,39,0,true,50,1,-4263,[0,-320,-385],[4,1459617791],[4,855638016],[4,4294967295],6092,6093]]],[103,"Snow_2",33554432,550,[[46,-4264],[99,150,6,6,-109,4,16,2,16,70,39,0,true,50,1,-4265,[0,-320,-385],[4,1459617791],[4,855638016],[4,4294967295],6094,6095]],[1,600,0,0]],[103,"Snow_3",33554432,550,[[46,-4266],[99,150,6,6,-109,4,16,2,16,70,39,0,true,50,1,-4267,[0,-320,-385],[4,1459617791],[4,855638016],[4,4294967295],6096,6097]],[1,-600,0,0]],[127,"Main Light","c0y6F5f+pAvI805TdmxIjx",86,[[184,58000,1.5104166666666667,-4268,[4,4293980400],[185]]],[3,-0.8005972817813567,-0.1453229557254247,-0.33176781330654553,0.4773419623260901],[1,-120.254,-42.248,-4.821]],[133,"Camera",87,[-4269],[1,0,0,1000]],[175,0,2,240,2000,6,33554432,1639,[4,4278190080]],[134,"GameController","a5zsbs3htCE6z9m7oN425t",86,[883]],[59,"base",[554],[1,0,0,-27.676]],[16,"QueueNoti",127,[1642]],[128,"Main3D","84vNFSZWxClJJ5v0QXVu9X",86,[555]],[129,"pasted__Plane.011",false,555,[[2,-4270,[1,2],[0],3]],[1,0.255112,0,0]],[130,"SpawnPos",895,[1,-10.43,0.432,-10.182],[3,0,1,0,6.123233995736766e-17],[1,0.8,0.8,0.8],[1,0,180,0]],[1,"Red",46,[[25,-4271,[27],[0],46,28,29]]],[19,"Hip_R",556,[-4272],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1648,[[29,"Ankle_R",-4273,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",557,[-4274],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1650,[[29,"HeadEnd_M",-4275,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",557,[-4276],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1652,[-4277],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1653,[[29,"Wrist_R",-4278,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",557,[-4279],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1655,[-4280],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1656,[[29,"Wrist_L",-4281,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",556,[-4282],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1658,[[29,"Ankle_L",-4283,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,46,[[25,-4284,[30],[0],46,31,32]]],[26,"Green",false,46,[[25,-4285,[33],[0],46,34,35]]],[26,"Pink",false,46,[[25,-4286,[36],[0],46,37,38]]],[26,"Purple",false,46,[[25,-4287,[39],[0],46,40,41]]],[26,"Orange",false,46,[[25,-4288,[42],[0],46,43,44]]],[55,"Shadow",46,[[5,"Quad<ModelComponent>",-4289,[45],[0],46]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,46,[[25,-4290,[47],[0],46,48,49]]],[1,"Red",47,[[25,-4291,[50],[0],47,51,52]]],[19,"Hip_R",558,[-4292],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1668,[[29,"Ankle_R",-4293,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",559,[-4294],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1670,[[29,"HeadEnd_M",-4295,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",559,[-4296],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1672,[-4297],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1673,[[29,"Wrist_R",-4298,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",559,[-4299],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1675,[-4300],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1676,[[29,"Wrist_L",-4301,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",558,[-4302],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1678,[[29,"Ankle_L",-4303,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,47,[[25,-4304,[53],[0],47,54,55]]],[26,"Green",false,47,[[25,-4305,[56],[0],47,57,58]]],[26,"Pink",false,47,[[25,-4306,[59],[0],47,60,61]]],[26,"Purple",false,47,[[25,-4307,[62],[0],47,63,64]]],[26,"Orange",false,47,[[25,-4308,[65],[0],47,66,67]]],[55,"Shadow",47,[[5,"Quad<ModelComponent>",-4309,[68],[0],69]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,47,[[25,-4310,[70],[0],47,71,72]]],[1,"Red",48,[[25,-4311,[73],[0],48,74,75]]],[19,"Hip_R",560,[-4312],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1688,[[29,"Ankle_R",-4313,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",561,[-4314],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1690,[[29,"HeadEnd_M",-4315,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",561,[-4316],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1692,[-4317],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1693,[[29,"Wrist_R",-4318,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",561,[-4319],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1695,[-4320],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1696,[[29,"Wrist_L",-4321,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",560,[-4322],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1698,[[29,"Ankle_L",-4323,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,48,[[25,-4324,[76],[0],48,77,78]]],[26,"Green",false,48,[[25,-4325,[79],[0],48,80,81]]],[26,"Pink",false,48,[[25,-4326,[82],[0],48,83,84]]],[26,"Purple",false,48,[[25,-4327,[85],[0],48,86,87]]],[26,"Orange",false,48,[[25,-4328,[88],[0],48,89,90]]],[55,"Shadow",48,[[5,"Quad<ModelComponent>",-4329,[91],[0],92]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,48,[[25,-4330,[93],[0],48,94,95]]],[1,"Red",49,[[25,-4331,[96],[0],49,97,98]]],[19,"Hip_R",562,[-4332],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1708,[[29,"Ankle_R",-4333,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",563,[-4334],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1710,[[29,"HeadEnd_M",-4335,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",563,[-4336],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1712,[-4337],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1713,[[29,"Wrist_R",-4338,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",563,[-4339],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1715,[-4340],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1716,[[29,"Wrist_L",-4341,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",562,[-4342],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1718,[[29,"Ankle_L",-4343,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,49,[[25,-4344,[99],[0],49,100,101]]],[26,"Green",false,49,[[25,-4345,[102],[0],49,103,104]]],[26,"Pink",false,49,[[25,-4346,[105],[0],49,106,107]]],[26,"Purple",false,49,[[25,-4347,[108],[0],49,109,110]]],[26,"Orange",false,49,[[25,-4348,[111],[0],49,112,113]]],[55,"Shadow",49,[[5,"Quad<ModelComponent>",-4349,[114],[0],115]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,49,[[25,-4350,[116],[0],49,117,118]]],[1,"Red",50,[[25,-4351,[119],[0],50,120,121]]],[19,"Hip_R",564,[-4352],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1728,[[29,"Ankle_R",-4353,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",565,[-4354],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1730,[[29,"HeadEnd_M",-4355,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",565,[-4356],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1732,[-4357],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1733,[[29,"Wrist_R",-4358,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",565,[-4359],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1735,[-4360],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1736,[[29,"Wrist_L",-4361,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",564,[-4362],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1738,[[29,"Ankle_L",-4363,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,50,[[25,-4364,[122],[0],50,123,124]]],[26,"Green",false,50,[[25,-4365,[125],[0],50,126,127]]],[26,"Pink",false,50,[[25,-4366,[128],[0],50,129,130]]],[26,"Purple",false,50,[[25,-4367,[131],[0],50,132,133]]],[26,"Orange",false,50,[[25,-4368,[134],[0],50,135,136]]],[55,"Shadow",50,[[5,"Quad<ModelComponent>",-4369,[137],[0],138]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,50,[[25,-4370,[139],[0],50,140,141]]],[1,"Red",51,[[25,-4371,[142],[0],51,143,144]]],[19,"Hip_R",566,[-4372],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1748,[[29,"Ankle_R",-4373,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",567,[-4374],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1750,[[29,"HeadEnd_M",-4375,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",567,[-4376],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1752,[-4377],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1753,[[29,"Wrist_R",-4378,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",567,[-4379],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1755,[-4380],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1756,[[29,"Wrist_L",-4381,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",566,[-4382],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1758,[[29,"Ankle_L",-4383,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,51,[[25,-4384,[145],[0],51,146,147]]],[26,"Green",false,51,[[25,-4385,[148],[0],51,149,150]]],[26,"Pink",false,51,[[25,-4386,[151],[0],51,152,153]]],[26,"Purple",false,51,[[25,-4387,[154],[0],51,155,156]]],[26,"Orange",false,51,[[25,-4388,[157],[0],51,158,159]]],[55,"Shadow",51,[[5,"Quad<ModelComponent>",-4389,[160],[0],161]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,51,[[25,-4390,[162],[0],51,163,164]]],[1,"Red",52,[[25,-4391,[165],[0],52,166,167]]],[19,"Hip_R",568,[-4392],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1768,[[29,"Ankle_R",-4393,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",569,[-4394],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1770,[[29,"HeadEnd_M",-4395,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",569,[-4396],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1772,[-4397],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1773,[[29,"Wrist_R",-4398,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",569,[-4399],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1775,[-4400],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1776,[[29,"Wrist_L",-4401,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",568,[-4402],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1778,[[29,"Ankle_L",-4403,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,52,[[25,-4404,[168],[0],52,169,170]]],[26,"Green",false,52,[[25,-4405,[171],[0],52,172,173]]],[26,"Pink",false,52,[[25,-4406,[174],[0],52,175,176]]],[26,"Purple",false,52,[[25,-4407,[177],[0],52,178,179]]],[26,"Orange",false,52,[[25,-4408,[180],[0],52,181,182]]],[55,"Shadow",52,[[5,"Quad<ModelComponent>",-4409,[183],[0],184]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,52,[[25,-4410,[185],[0],52,186,187]]],[1,"Red",45,[[25,-4411,[188],[0],45,189,190]]],[19,"Hip_R",570,[-4412],[1,-0.122371606528759,-0.022258471697568893,-0.2751345932483673],[3,0.03835089907529479,0.9974409420569548,-0.06006846996887871,0.0057056607197726004],[1,6.92755823512982,179.08118628761932,4.348342060844126]],[30,"Knee_R",1788,[[29,"Ankle_R",-4413,[1,0.5945743918418884,9.769962563761818e-17,7.105427198782324e-17]]],[1,0.5244600772857666,-7.105427198782324e-17,-3.9967248260941446e-11],[3,-4.260346088592459e-19,-4.734681798951397e-17,-0.15544338183281672,0.9878448031165509],[1,-9.368660470998822e-16,-5.639727310864537e-15,-17.885023685179938]],[19,"Neck_M",571,[-4414],[1,0.2735850512981415,3.3750779525088285e-16,8.875475919126576e-16],[3,1.1101808258292208e-16,-3.437809011373243e-18,0.00871878133424539,0.9999619907036696],[1,1.2726621212638146e-14,-5.049237135192702e-16,0.9991114044386258]],[30,"Head_M",1790,[[29,"HeadEnd_M",-4415,[1,0.9933460354804993,-2.7533530163670935e-15,1.5741030335563628e-17]]],[1,0.1701909303665161,1.3855582839102185e-15,8.919429649899684e-17],[3,1.1101545441171331e-16,4.3793799933899555e-18,-0.011106741715153745,0.9999383182419167],[1,1.2729363704942612e-14,6.432614133744837e-16,-1.2727650177426564]],[19,"Scapula_R",571,[-4416],[1,0.09612659364938736,-0.018371913582086563,-0.13711288571357727],[3,-0.004283415200853299,0.8443697784067379,0.01489373126657169,0.5355366527480007],[1,-1.7042630329879662,115.2380757617116,0.4995513450920396]],[19,"Shoulder_R",1792,[-4417],[1,0.27385950088500977,2.4868995751603507e-14,1.98951966859861e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_R",1793,[[29,"Wrist_R",-4418,[1,0.429713636636734,1.4210854397564648e-16,5.684341759025859e-16]]],[1,0.5828136205673218,5.684341759025859e-16,0],[3,-2.2406618642077893e-16,2.883557304768696e-17,0.057327770980635726,0.9983554110007076],[1,-2.59941541085245e-14,4.8023981556932214e-15,6.572882277338546]],[19,"Scapula_L",571,[-4419],[1,0.09612659364938736,-0.018371913582086563,0.13711288571357727],[3,0.8443697784067379,0.004283415200853299,-0.5355366527480007,0.01489373126657169],[1,178.29573696701203,64.76192423828843,-0.4995513450920396]],[19,"Shoulder_L",1795,[-4420],[1,-0.27385950088500977,-2.4691359390037124e-14,-1.7053025277077578e-15],[3,-0.1276635514525747,-0.22634440428482216,-0.06555958025016582,0.9634169241387069],[1,-16.04034423904431,-26.996391875588987,-3.9295916505690744]],[30,"Elbow_L",1796,[[29,"Wrist_L",-4421,[1,-0.429713636636734,0,5.684341759025859e-16]]],[1,-0.5828136205673218,-9.94759834299305e-16,1.1368683518051719e-15],[3,-7.020156946253644e-17,-2.299166695882725e-16,0.057327770980635726,0.9983554110007076],[1,-6.5640357702315465e-15,-2.601298875001618e-14,6.572882277338546]],[19,"Hip_L",570,[-4422],[1,-0.122371606528759,-0.022258471697568893,0.2751345932483673],[3,0.9974409417966534,-0.03835089906528639,-0.0057056672375416706,-0.060068473678493016],[1,-173.0724413098549,0.9188144756486766,-4.348342011123676]],[30,"Knee_L",1798,[[29,"Ankle_L",-4423,[1,-0.5945743918418884,-6.12843107475504e-16,3.552713599391162e-17]]],[1,-0.5244600772857666,-6.750155905017657e-16,3.9967140708085935e-11],[3,1.4718136812787186e-16,-2.087057703378973e-18,-0.15544338183281672,0.9878448031165509],[1,1.7467691557905605e-14,2.506545405466375e-15,-17.885023685179938]],[26,"Blue",false,45,[[25,-4424,[191],[0],45,192,193]]],[26,"Green",false,45,[[25,-4425,[194],[0],45,195,196]]],[26,"Pink",false,45,[[25,-4426,[197],[0],45,198,199]]],[26,"Purple",false,45,[[25,-4427,[200],[0],45,201,202]]],[26,"Orange",false,45,[[25,-4428,[203],[0],45,204,205]]],[55,"Shadow",45,[[5,"Quad<ModelComponent>",-4429,[206],[0],207]],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,-90,0,0]],[26,"Yellow",false,45,[[25,-4430,[208],[0],45,209,210]]],[1,"extracted_03",73,[[2,-4431,[325],[0],326]]],[9,"Text_blocked",902,[[5,"Quad<ModelComponent>",-4432,[327],[0],328]],[1,-4.615,0.464,-19.146],[3,-0.35355339059327373,0.6123724356957946,0.6123724356957945,0.3535533905932739],[1,4.636219999999999,1.2000000000000002,0.9999999999999999],[1,-90,120.00000000000001,9.54166404439055e-15]],[26,"pasted__Plane.011",false,73,[[2,-4433,[331],[0],332]]],[1,"extracted_01",73,[[2,-4434,[333],[0],334]]],[9,"Text_blocked",903,[[5,"Quad<ModelComponent>",-4435,[335],[0],336]],[1,-18.461,0.464,-19.102],[3,-0.3535533905932738,0.6123724356957946,0.6123724356957945,0.3535533905932738],[1,4.63622,1.2,1],[1,-90,120.00000000000001,-6.3611093629270335e-15]],[9,"Text_blocked",904,[[5,"Quad<ModelComponent>",-4436,[339],[0],340]],[1,-11.621,0.464,-19.122],[3,-0.3535533905932738,0.6123724356957946,0.6123724356957945,0.35355339059327384],[1,4.63622,1.2,1],[1,-90,120,0]],[1,"extracted_02",73,[[2,-4437,[343],[0],344]]],[9,"Text_blocked",905,[[5,"Quad<ModelComponent>",-4438,[345],[0],346]],[1,-15.053,0.464,-19.114],[3,-0.3535533905932738,0.6123724356957946,0.6123724356957945,0.3535533905932738],[1,4.63622,1.2,1],[1,-90,120.00000000000001,-6.3611093629270335e-15]],[9,"Text_blocked",906,[[5,"Quad<ModelComponent>",-4439,[349],[0],350]],[1,-8.163,0.464,-19.187],[3,-0.35355339059327373,0.6123724356957946,0.6123724356957944,0.3535533905932738],[1,4.636220000000001,1.2000000000000002,1],[1,-89.99999999999997,119.99999999999999,-3.1805546814635168e-15]],[27,"RoadLine_1",78,[[5,"Cube<ModelComponent>",-4440,[355],[0],356]],[1,-17.983,-0.458,-24],[1,1,1,0.4]],[27,"RoadLine_2",78,[[5,"Cube<ModelComponent>",-4441,[357],[0],358]],[1,-17.983,-0.458,-23.4],[1,1,1,0.4]],[27,"RoadLine_3",78,[[5,"Cube<ModelComponent>",-4442,[359],[0],360]],[1,-17.983,-0.458,-24.6],[1,1,1,0.4]],[27,"RoadLine_4",78,[[5,"Cube<ModelComponent>",-4443,[361],[0],362]],[1,-17.983,-0.458,-22.8],[1,1,1,0.4]],[9,"RoadLine_5",78,[[5,"Cube<ModelComponent>",-4444,[363],[0],364]],[1,7.981,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",78,[[5,"Cube<ModelComponent>",-4445,[365],[0],366]],[1,7.381,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_7",78,[[5,"Cube<ModelComponent>",-4446,[367],[0],368]],[1,6.781,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_8",78,[[5,"Cube<ModelComponent>",-4447,[369],[0],370]],[1,6.181,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",2,[[5,"Cube<ModelComponent>",-4448,[371],[0],372]],[1,-19.927,-0.458,-29],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_7",2,[[5,"Cube<ModelComponent>",-4449,[373],[0],374]],[1,-19.927,-0.458,-31.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_8",2,[[5,"Cube<ModelComponent>",-4450,[375],[0],376]],[1,-19.927,-0.458,-34],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_9",2,[[5,"Cube<ModelComponent>",-4451,[377],[0],378]],[1,-19.927,-0.458,-36.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_10",2,[[5,"Cube<ModelComponent>",-4452,[379],[0],380]],[1,-19.927,-0.458,-39.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_11",2,[[5,"Cube<ModelComponent>",-4453,[381],[0],382]],[1,-19.927,-0.458,-41.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_12",2,[[5,"Cube<ModelComponent>",-4454,[383],[0],384]],[1,-19.927,-0.458,-44.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_13",2,[[5,"Cube<ModelComponent>",-4455,[385],[0],386]],[1,-19.927,-0.458,-46.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_14",2,[[5,"Cube<ModelComponent>",-4456,[387],[0],388]],[1,-19.927,-0.458,-49.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_15",2,[[5,"Cube<ModelComponent>",-4457,[389],[0],390]],[1,-19.927,-0.458,-51.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_16",2,[[5,"Cube<ModelComponent>",-4458,[391],[0],392]],[1,-19.927,-0.458,-54.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_17",2,[[5,"Cube<ModelComponent>",-4459,[393],[0],394]],[1,7.23,-0.458,-29.461],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_18",2,[[5,"Cube<ModelComponent>",-4460,[395],[0],396]],[1,7.23,-0.458,-31.961],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_19",2,[[5,"Cube<ModelComponent>",-4461,[397],[0],398]],[1,7.23,-0.458,-34.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_20",2,[[5,"Cube<ModelComponent>",-4462,[399],[0],400]],[1,7.23,-0.458,-37.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_21",2,[[5,"Cube<ModelComponent>",-4463,[401],[0],402]],[1,7.23,-0.458,-39.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_22",2,[[5,"Cube<ModelComponent>",-4464,[403],[0],404]],[1,7.23,-0.458,-42.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_23",2,[[5,"Cube<ModelComponent>",-4465,[405],[0],406]],[1,7.23,-0.458,-44.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_24",2,[[5,"Cube<ModelComponent>",-4466,[407],[0],408]],[1,7.23,-0.458,-47.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_25",2,[[5,"Cube<ModelComponent>",-4467,[409],[0],410]],[1,7.23,-0.458,-49.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_26",2,[[5,"Cube<ModelComponent>",-4468,[411],[0],412]],[1,7.23,-0.458,-52.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_27",2,[[5,"Cube<ModelComponent>",-4469,[413],[0],414]],[1,7.23,-0.458,-54.242],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[27,"RoadFence_1",74,[[5,"Cube<ModelComponent>",-4470,[415],[0],416]],[1,-5.044,-0.4,-25.42],[1,22,1,0.4]],[27,"RoadFence_2",74,[[5,"Cube<ModelComponent>",-4471,[417],[0],418]],[1,-22.574,-0.4,-22.239],[1,100,1,0.4]],[9,"RoadFence_3",74,[[5,"Cube<ModelComponent>",-4472,[419],[0],420]],[1,6.34,-0.4,-25.641],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_4",74,[[5,"Cube<ModelComponent>",-4473,[421],[0],422]],[1,6.912,-0.4,-26.233],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_5",74,[[5,"Cube<ModelComponent>",-4474,[423],[0],424]],[1,7.117,-0.4,-27.043],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,90,0]],[9,"RoadFence_6",74,[[5,"Cube<ModelComponent>",-4475,[425],[0],426]],[1,7.11,-0.4,-44.485],[3,0,0.7071067811865475,0,0.7071067811865476],[1,35,1,0.4],[1,0,90,0]],[9,"RoadFence_10",74,[[5,"Cube<ModelComponent>",-4476,[427],[0],428]],[1,-16.976,-0.4,-44.066],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,35,1,0.4],[1,0,-90,0]],[9,"RoadFence_11",74,[[5,"Cube<ModelComponent>",-4477,[429],[0],430]],[1,-16.22,-0.4,-25.627],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,-30,0]],[9,"RoadFence_12",74,[[5,"Cube<ModelComponent>",-4478,[431],[0],432]],[1,-16.787,-0.4,-26.23],[3,0,-0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,-60,0]],[27,"RoadFace_1",137,[[5,"Plane<ModelComponent>",-4479,[433],[0],434]],[1,-6.47,0.02,-43.083],[1,2.38,2.5,3.5]],[27,"RoadFace_1",908,[[5,"Plane<ModelComponent>",-4480,[435],[0],436]],[1,-0.647,0.01,1.837],[1,0.238,0.25,0.29]],[27,"RoadLine_1",79,[[5,"Cube<ModelComponent>",-4481,[439],[0],440]],[1,-17.983,-0.458,-24],[1,1,1,0.4]],[27,"RoadLine_2",79,[[5,"Cube<ModelComponent>",-4482,[441],[0],442]],[1,-17.983,-0.458,-23.4],[1,1,1,0.4]],[27,"RoadLine_3",79,[[5,"Cube<ModelComponent>",-4483,[443],[0],444]],[1,-17.983,-0.458,-24.6],[1,1,1,0.4]],[27,"RoadLine_4",79,[[5,"Cube<ModelComponent>",-4484,[445],[0],446]],[1,-17.983,-0.458,-22.8],[1,1,1,0.4]],[9,"RoadLine_5",79,[[5,"Cube<ModelComponent>",-4485,[447],[0],448]],[1,7.981,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",79,[[5,"Cube<ModelComponent>",-4486,[449],[0],450]],[1,7.381,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_7",79,[[5,"Cube<ModelComponent>",-4487,[451],[0],452]],[1,6.781,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_8",79,[[5,"Cube<ModelComponent>",-4488,[453],[0],454]],[1,6.181,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",3,[[5,"Cube<ModelComponent>",-4489,[455],[0],456]],[1,-19.927,-0.458,-29],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_7",3,[[5,"Cube<ModelComponent>",-4490,[457],[0],458]],[1,-19.927,-0.458,-31.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_8",3,[[5,"Cube<ModelComponent>",-4491,[459],[0],460]],[1,-19.927,-0.458,-34],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_9",3,[[5,"Cube<ModelComponent>",-4492,[461],[0],462]],[1,-19.927,-0.458,-36.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_10",3,[[5,"Cube<ModelComponent>",-4493,[463],[0],464]],[1,-19.927,-0.458,-39.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_11",3,[[5,"Cube<ModelComponent>",-4494,[465],[0],466]],[1,-19.927,-0.458,-41.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_12",3,[[5,"Cube<ModelComponent>",-4495,[467],[0],468]],[1,-19.927,-0.458,-44.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_13",3,[[5,"Cube<ModelComponent>",-4496,[469],[0],470]],[1,-19.927,-0.458,-46.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_14",3,[[5,"Cube<ModelComponent>",-4497,[471],[0],472]],[1,-19.927,-0.458,-49.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_15",3,[[5,"Cube<ModelComponent>",-4498,[473],[0],474]],[1,-19.927,-0.458,-51.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_16",3,[[5,"Cube<ModelComponent>",-4499,[475],[0],476]],[1,-19.927,-0.458,-54.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_17",3,[[5,"Cube<ModelComponent>",-4500,[477],[0],478]],[1,7.23,-0.458,-29.461],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_18",3,[[5,"Cube<ModelComponent>",-4501,[479],[0],480]],[1,7.23,-0.458,-31.961],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_19",3,[[5,"Cube<ModelComponent>",-4502,[481],[0],482]],[1,7.23,-0.458,-34.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_20",3,[[5,"Cube<ModelComponent>",-4503,[483],[0],484]],[1,7.23,-0.458,-37.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_21",3,[[5,"Cube<ModelComponent>",-4504,[485],[0],486]],[1,7.23,-0.458,-39.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_22",3,[[5,"Cube<ModelComponent>",-4505,[487],[0],488]],[1,7.23,-0.458,-42.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_23",3,[[5,"Cube<ModelComponent>",-4506,[489],[0],490]],[1,7.23,-0.458,-44.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_24",3,[[5,"Cube<ModelComponent>",-4507,[491],[0],492]],[1,7.23,-0.458,-47.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_25",3,[[5,"Cube<ModelComponent>",-4508,[493],[0],494]],[1,7.23,-0.458,-49.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_26",3,[[5,"Cube<ModelComponent>",-4509,[495],[0],496]],[1,7.23,-0.458,-52.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_27",3,[[5,"Cube<ModelComponent>",-4510,[497],[0],498]],[1,7.23,-0.458,-54.242],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[27,"RoadFence_1",60,[[5,"Cube<ModelComponent>",-4511,[499],[0],500]],[1,-5.044,-0.4,-25.42],[1,22,1,0.4]],[27,"RoadFence_2",60,[[5,"Cube<ModelComponent>",-4512,[501],[0],502]],[1,-22.574,-0.4,-22.239],[1,100,1,0.4]],[9,"RoadFence_3",60,[[5,"Cube<ModelComponent>",-4513,[503],[0],504]],[1,6.34,-0.4,-25.641],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_4",60,[[5,"Cube<ModelComponent>",-4514,[505],[0],506]],[1,6.912,-0.4,-26.233],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_5",60,[[5,"Cube<ModelComponent>",-4515,[507],[0],508]],[1,7.117,-0.4,-27.043],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,90,0]],[9,"RoadFence_6",60,[[5,"Cube<ModelComponent>",-4516,[509],[0],510]],[1,7.11,-0.4,-41.001],[3,0,0.7071067811865475,0,0.7071067811865476],[1,27.5,1,0.4],[1,0,90,0]],[27,"RoadFence_7",60,[[5,"Cube<ModelComponent>",-4517,[511],[0],512]],[1,-4.297,-0.4,-54.87],[1,23,1,0.4]],[9,"RoadFence_8",60,[[5,"Cube<ModelComponent>",-4518,[513],[0],514]],[1,-16.109,-0.4,-54.672],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_9",60,[[5,"Cube<ModelComponent>",-4519,[515],[0],516]],[1,-16.718,-0.4,-54.056],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_10",60,[[5,"Cube<ModelComponent>",-4520,[517],[0],518]],[1,-16.976,-0.4,-40.071],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,27.2,1,0.4],[1,0,-90,0]],[9,"RoadFence_11",60,[[5,"Cube<ModelComponent>",-4521,[519],[0],520]],[1,-16.22,-0.4,-25.627],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,-30,0]],[9,"RoadFence_12",60,[[5,"Cube<ModelComponent>",-4522,[521],[0],522]],[1,-16.787,-0.4,-26.23],[3,0,-0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,-60,0]],[27,"RoadFace_1",910,[[5,"Plane<ModelComponent>",-4523,[523],[0],524]],[1,-0.647,0.01,1.837],[1,0.238,0.25,0.29]],[27,"RoadLine_1",80,[[5,"Cube<ModelComponent>",-4524,[527],[0],528]],[1,-17.983,-0.458,-24],[1,1,1,0.4]],[27,"RoadLine_2",80,[[5,"Cube<ModelComponent>",-4525,[529],[0],530]],[1,-17.983,-0.458,-23.4],[1,1,1,0.4]],[27,"RoadLine_3",80,[[5,"Cube<ModelComponent>",-4526,[531],[0],532]],[1,-17.983,-0.458,-24.6],[1,1,1,0.4]],[27,"RoadLine_4",80,[[5,"Cube<ModelComponent>",-4527,[533],[0],534]],[1,-17.983,-0.458,-22.8],[1,1,1,0.4]],[9,"RoadLine_5",80,[[5,"Cube<ModelComponent>",-4528,[535],[0],536]],[1,7.981,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",80,[[5,"Cube<ModelComponent>",-4529,[537],[0],538]],[1,7.381,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_7",80,[[5,"Cube<ModelComponent>",-4530,[539],[0],540]],[1,6.781,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_8",80,[[5,"Cube<ModelComponent>",-4531,[541],[0],542]],[1,6.181,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",4,[[5,"Cube<ModelComponent>",-4532,[543],[0],544]],[1,-19.927,-0.458,-29],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_7",4,[[5,"Cube<ModelComponent>",-4533,[545],[0],546]],[1,-19.927,-0.458,-31.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_8",4,[[5,"Cube<ModelComponent>",-4534,[547],[0],548]],[1,-19.927,-0.458,-34],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_9",4,[[5,"Cube<ModelComponent>",-4535,[549],[0],550]],[1,-19.927,-0.458,-36.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_10",4,[[5,"Cube<ModelComponent>",-4536,[551],[0],552]],[1,-19.927,-0.458,-39.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_11",4,[[5,"Cube<ModelComponent>",-4537,[553],[0],554]],[1,-19.927,-0.458,-41.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_12",4,[[5,"Cube<ModelComponent>",-4538,[555],[0],556]],[1,-19.927,-0.458,-44.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_13",4,[[5,"Cube<ModelComponent>",-4539,[557],[0],558]],[1,-19.927,-0.458,-46.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_14",4,[[5,"Cube<ModelComponent>",-4540,[559],[0],560]],[1,-19.927,-0.458,-49.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_15",4,[[5,"Cube<ModelComponent>",-4541,[561],[0],562]],[1,-19.927,-0.458,-51.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_16",4,[[5,"Cube<ModelComponent>",-4542,[563],[0],564]],[1,-19.927,-0.458,-54.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_17",4,[[5,"Cube<ModelComponent>",-4543,[565],[0],566]],[1,7.23,-0.458,-29.461],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_18",4,[[5,"Cube<ModelComponent>",-4544,[567],[0],568]],[1,7.23,-0.458,-31.961],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_19",4,[[5,"Cube<ModelComponent>",-4545,[569],[0],570]],[1,7.23,-0.458,-34.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_20",4,[[5,"Cube<ModelComponent>",-4546,[571],[0],572]],[1,7.23,-0.458,-37.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_21",4,[[5,"Cube<ModelComponent>",-4547,[573],[0],574]],[1,7.23,-0.458,-39.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_22",4,[[5,"Cube<ModelComponent>",-4548,[575],[0],576]],[1,7.23,-0.458,-42.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_23",4,[[5,"Cube<ModelComponent>",-4549,[577],[0],578]],[1,7.23,-0.458,-44.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_24",4,[[5,"Cube<ModelComponent>",-4550,[579],[0],580]],[1,7.23,-0.458,-47.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_25",4,[[5,"Cube<ModelComponent>",-4551,[581],[0],582]],[1,7.23,-0.458,-49.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_26",4,[[5,"Cube<ModelComponent>",-4552,[583],[0],584]],[1,7.23,-0.458,-52.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_27",4,[[5,"Cube<ModelComponent>",-4553,[585],[0],586]],[1,7.23,-0.458,-54.242],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[27,"RoadFence_1",61,[[5,"Cube<ModelComponent>",-4554,[587],[0],588]],[1,-5.044,-0.4,-25.42],[1,22,1,0.4]],[27,"RoadFence_2",61,[[5,"Cube<ModelComponent>",-4555,[589],[0],590]],[1,-22.574,-0.4,-22.239],[1,100,1,0.4]],[9,"RoadFence_3",61,[[5,"Cube<ModelComponent>",-4556,[591],[0],592]],[1,6.34,-0.4,-25.641],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_4",61,[[5,"Cube<ModelComponent>",-4557,[593],[0],594]],[1,6.912,-0.4,-26.233],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_5",61,[[5,"Cube<ModelComponent>",-4558,[595],[0],596]],[1,7.117,-0.4,-27.043],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,90,0]],[9,"RoadFence_6",61,[[5,"Cube<ModelComponent>",-4559,[597],[0],598]],[1,7.11,-0.4,-40.977],[3,0,0.7071067811865475,0,0.7071067811865476],[1,27.5,1,0.4],[1,0,90,0]],[27,"RoadFence_7",61,[[5,"Cube<ModelComponent>",-4560,[599],[0],600]],[1,-4.297,-0.4,-54.87],[1,23,1,0.4]],[9,"RoadFence_8",61,[[5,"Cube<ModelComponent>",-4561,[601],[0],602]],[1,-16.109,-0.4,-54.672],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_9",61,[[5,"Cube<ModelComponent>",-4562,[603],[0],604]],[1,-16.718,-0.4,-54.056],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_10",61,[[5,"Cube<ModelComponent>",-4563,[605],[0],606]],[1,-16.976,-0.4,-40.071],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,27.2,1,0.4],[1,0,-90,0]],[9,"RoadFence_11",61,[[5,"Cube<ModelComponent>",-4564,[607],[0],608]],[1,-16.22,-0.4,-25.627],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,-30,0]],[9,"RoadFence_12",61,[[5,"Cube<ModelComponent>",-4565,[609],[0],610]],[1,-16.787,-0.4,-26.23],[3,0,-0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,-60,0]],[27,"RoadFace_1",912,[[5,"Plane<ModelComponent>",-4566,[611],[0],612]],[1,-0.647,0.01,1.837],[1,0.238,0.25,0.29]],[27,"RoadLine_1",81,[[5,"Cube<ModelComponent>",-4567,[615],[0],616]],[1,-17.983,-0.458,-24],[1,1,1,0.4]],[27,"RoadLine_2",81,[[5,"Cube<ModelComponent>",-4568,[617],[0],618]],[1,-17.983,-0.458,-23.4],[1,1,1,0.4]],[27,"RoadLine_3",81,[[5,"Cube<ModelComponent>",-4569,[619],[0],620]],[1,-17.983,-0.458,-24.6],[1,1,1,0.4]],[27,"RoadLine_4",81,[[5,"Cube<ModelComponent>",-4570,[621],[0],622]],[1,-17.983,-0.458,-22.8],[1,1,1,0.4]],[9,"RoadLine_5",81,[[5,"Cube<ModelComponent>",-4571,[623],[0],624]],[1,7.981,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",81,[[5,"Cube<ModelComponent>",-4572,[625],[0],626]],[1,7.381,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_7",81,[[5,"Cube<ModelComponent>",-4573,[627],[0],628]],[1,6.781,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_8",81,[[5,"Cube<ModelComponent>",-4574,[629],[0],630]],[1,6.181,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",5,[[5,"Cube<ModelComponent>",-4575,[631],[0],632]],[1,-19.927,-0.458,-29],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_7",5,[[5,"Cube<ModelComponent>",-4576,[633],[0],634]],[1,-19.927,-0.458,-31.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_8",5,[[5,"Cube<ModelComponent>",-4577,[635],[0],636]],[1,-19.927,-0.458,-34],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_9",5,[[5,"Cube<ModelComponent>",-4578,[637],[0],638]],[1,-19.927,-0.458,-36.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_10",5,[[5,"Cube<ModelComponent>",-4579,[639],[0],640]],[1,-19.927,-0.458,-39.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_11",5,[[5,"Cube<ModelComponent>",-4580,[641],[0],642]],[1,-19.927,-0.458,-41.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_12",5,[[5,"Cube<ModelComponent>",-4581,[643],[0],644]],[1,-19.927,-0.458,-44.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_13",5,[[5,"Cube<ModelComponent>",-4582,[645],[0],646]],[1,-19.927,-0.458,-46.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_14",5,[[5,"Cube<ModelComponent>",-4583,[647],[0],648]],[1,-19.927,-0.458,-49.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_15",5,[[5,"Cube<ModelComponent>",-4584,[649],[0],650]],[1,-19.927,-0.458,-51.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_16",5,[[5,"Cube<ModelComponent>",-4585,[651],[0],652]],[1,-19.927,-0.458,-54.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_17",5,[[5,"Cube<ModelComponent>",-4586,[653],[0],654]],[1,7.23,-0.458,-29.461],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_18",5,[[5,"Cube<ModelComponent>",-4587,[655],[0],656]],[1,7.23,-0.458,-31.961],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_19",5,[[5,"Cube<ModelComponent>",-4588,[657],[0],658]],[1,7.23,-0.458,-34.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_20",5,[[5,"Cube<ModelComponent>",-4589,[659],[0],660]],[1,7.23,-0.458,-37.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_21",5,[[5,"Cube<ModelComponent>",-4590,[661],[0],662]],[1,7.23,-0.458,-39.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_22",5,[[5,"Cube<ModelComponent>",-4591,[663],[0],664]],[1,7.23,-0.458,-42.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_23",5,[[5,"Cube<ModelComponent>",-4592,[665],[0],666]],[1,7.23,-0.458,-44.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_24",5,[[5,"Cube<ModelComponent>",-4593,[667],[0],668]],[1,7.23,-0.458,-47.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_25",5,[[5,"Cube<ModelComponent>",-4594,[669],[0],670]],[1,7.23,-0.458,-49.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_26",5,[[5,"Cube<ModelComponent>",-4595,[671],[0],672]],[1,7.23,-0.458,-52.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_27",5,[[5,"Cube<ModelComponent>",-4596,[673],[0],674]],[1,7.23,-0.458,-54.242],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[27,"RoadFence_1",62,[[5,"Cube<ModelComponent>",-4597,[675],[0],676]],[1,-5.044,-0.4,-25.42],[1,22,1,0.4]],[27,"RoadFence_2",62,[[5,"Cube<ModelComponent>",-4598,[677],[0],678]],[1,-22.574,-0.4,-22.239],[1,100,1,0.4]],[9,"RoadFence_3",62,[[5,"Cube<ModelComponent>",-4599,[679],[0],680]],[1,6.34,-0.4,-25.641],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_4",62,[[5,"Cube<ModelComponent>",-4600,[681],[0],682]],[1,6.912,-0.4,-26.233],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_5",62,[[5,"Cube<ModelComponent>",-4601,[683],[0],684]],[1,7.117,-0.4,-27.043],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,90,0]],[9,"RoadFence_6",62,[[5,"Cube<ModelComponent>",-4602,[685],[0],686]],[1,7.11,-0.4,-42.175],[3,0,0.7071067811865475,0,0.7071067811865476],[1,30,1,0.4],[1,0,90,0]],[27,"RoadFence_7",62,[[5,"Cube<ModelComponent>",-4603,[687],[0],688]],[1,-4.297,-0.4,-54.87],[1,23,1,0.4]],[9,"RoadFence_8",62,[[5,"Cube<ModelComponent>",-4604,[689],[0],690]],[1,-16.109,-0.4,-54.672],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_9",62,[[5,"Cube<ModelComponent>",-4605,[691],[0],692]],[1,-16.718,-0.4,-54.056],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_10",62,[[5,"Cube<ModelComponent>",-4606,[693],[0],694]],[1,-16.976,-0.4,-40.071],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,27.2,1,0.4],[1,0,-90,0]],[9,"RoadFence_11",62,[[5,"Cube<ModelComponent>",-4607,[695],[0],696]],[1,-16.22,-0.4,-25.627],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,-30,0]],[9,"RoadFence_12",62,[[5,"Cube<ModelComponent>",-4608,[697],[0],698]],[1,-16.787,-0.4,-26.23],[3,0,-0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,-60,0]],[27,"RoadFace_1",914,[[5,"Plane<ModelComponent>",-4609,[699],[0],700]],[1,-0.647,0.01,1.837],[1,0.238,0.25,0.29]],[27,"RoadLine_1",82,[[5,"Cube<ModelComponent>",-4610,[703],[0],704]],[1,-17.983,-0.458,-24],[1,1,1,0.4]],[27,"RoadLine_2",82,[[5,"Cube<ModelComponent>",-4611,[705],[0],706]],[1,-17.983,-0.458,-23.4],[1,1,1,0.4]],[27,"RoadLine_3",82,[[5,"Cube<ModelComponent>",-4612,[707],[0],708]],[1,-17.983,-0.458,-24.6],[1,1,1,0.4]],[27,"RoadLine_4",82,[[5,"Cube<ModelComponent>",-4613,[709],[0],710]],[1,-17.983,-0.458,-22.8],[1,1,1,0.4]],[9,"RoadLine_5",82,[[5,"Cube<ModelComponent>",-4614,[711],[0],712]],[1,7.981,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",82,[[5,"Cube<ModelComponent>",-4615,[713],[0],714]],[1,7.381,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_7",82,[[5,"Cube<ModelComponent>",-4616,[715],[0],716]],[1,6.781,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_8",82,[[5,"Cube<ModelComponent>",-4617,[717],[0],718]],[1,6.181,-0.458,-26.529],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-90,0]],[9,"RoadLine_6",6,[[5,"Cube<ModelComponent>",-4618,[719],[0],720]],[1,-19.927,-0.458,-29],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_7",6,[[5,"Cube<ModelComponent>",-4619,[721],[0],722]],[1,-19.927,-0.458,-31.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_8",6,[[5,"Cube<ModelComponent>",-4620,[723],[0],724]],[1,-19.927,-0.458,-34],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_9",6,[[5,"Cube<ModelComponent>",-4621,[725],[0],726]],[1,-19.927,-0.458,-36.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_10",6,[[5,"Cube<ModelComponent>",-4622,[727],[0],728]],[1,-19.927,-0.458,-39.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_11",6,[[5,"Cube<ModelComponent>",-4623,[729],[0],730]],[1,-19.927,-0.458,-41.564],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_12",6,[[5,"Cube<ModelComponent>",-4624,[731],[0],732]],[1,-19.927,-0.458,-44.064],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_13",6,[[5,"Cube<ModelComponent>",-4625,[733],[0],734]],[1,-19.927,-0.458,-46.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_14",6,[[5,"Cube<ModelComponent>",-4626,[735],[0],736]],[1,-19.927,-0.458,-49.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_15",6,[[5,"Cube<ModelComponent>",-4627,[737],[0],738]],[1,-19.927,-0.458,-51.664],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_16",6,[[5,"Cube<ModelComponent>",-4628,[739],[0],740]],[1,-19.927,-0.458,-54.164],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_17",6,[[5,"Cube<ModelComponent>",-4629,[741],[0],742]],[1,7.23,-0.458,-29.461],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_18",6,[[5,"Cube<ModelComponent>",-4630,[743],[0],744]],[1,7.23,-0.458,-31.961],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_19",6,[[5,"Cube<ModelComponent>",-4631,[745],[0],746]],[1,7.23,-0.458,-34.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_20",6,[[5,"Cube<ModelComponent>",-4632,[747],[0],748]],[1,7.23,-0.458,-37.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_21",6,[[5,"Cube<ModelComponent>",-4633,[749],[0],750]],[1,7.23,-0.458,-39.525],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_22",6,[[5,"Cube<ModelComponent>",-4634,[751],[0],752]],[1,7.23,-0.458,-42.025],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_23",6,[[5,"Cube<ModelComponent>",-4635,[753],[0],754]],[1,7.23,-0.458,-44.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_24",6,[[5,"Cube<ModelComponent>",-4636,[755],[0],756]],[1,7.23,-0.458,-47.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_25",6,[[5,"Cube<ModelComponent>",-4637,[757],[0],758]],[1,7.23,-0.458,-49.625],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_26",6,[[5,"Cube<ModelComponent>",-4638,[759],[0],760]],[1,7.23,-0.458,-52.125],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[9,"RoadLine_27",6,[[5,"Cube<ModelComponent>",-4639,[761],[0],762]],[1,7.23,-0.458,-54.242],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,-89.99999999999999,0]],[27,"RoadFence_1",63,[[5,"Cube<ModelComponent>",-4640,[763],[0],764]],[1,-5.044,-0.4,-25.42],[1,22,1,0.4]],[27,"RoadFence_2",63,[[5,"Cube<ModelComponent>",-4641,[765],[0],766]],[1,-22.574,-0.4,-22.239],[1,100,1,0.4]],[9,"RoadFence_3",63,[[5,"Cube<ModelComponent>",-4642,[767],[0],768]],[1,6.34,-0.4,-25.641],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_4",63,[[5,"Cube<ModelComponent>",-4643,[769],[0],770]],[1,6.912,-0.4,-26.233],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_5",63,[[5,"Cube<ModelComponent>",-4644,[771],[0],772]],[1,7.117,-0.4,-27.043],[3,0,0.7071067811865475,0,0.7071067811865476],[1,1,1,0.4],[1,0,90,0]],[9,"RoadFence_6",63,[[5,"Cube<ModelComponent>",-4645,[773],[0],774]],[1,7.11,-0.4,-42.175],[3,0,0.7071067811865475,0,0.7071067811865476],[1,30,1,0.4],[1,0,90,0]],[27,"RoadFence_7",63,[[5,"Cube<ModelComponent>",-4646,[775],[0],776]],[1,-4.297,-0.4,-54.87],[1,23,1,0.4]],[9,"RoadFence_8",63,[[5,"Cube<ModelComponent>",-4647,[777],[0],778]],[1,-16.109,-0.4,-54.672],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,30,0]],[9,"RoadFence_9",63,[[5,"Cube<ModelComponent>",-4648,[779],[0],780]],[1,-16.718,-0.4,-54.056],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,60,0]],[9,"RoadFence_10",63,[[5,"Cube<ModelComponent>",-4649,[781],[0],782]],[1,-16.976,-0.4,-40.071],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,27.2,1,0.4],[1,0,-90,0]],[9,"RoadFence_11",63,[[5,"Cube<ModelComponent>",-4650,[783],[0],784]],[1,-16.22,-0.4,-25.627],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1,1,0.4],[1,0,-30,0]],[9,"RoadFence_12",63,[[5,"Cube<ModelComponent>",-4651,[785],[0],786]],[1,-16.787,-0.4,-26.23],[3,0,-0.49999999999999994,0,0.8660254037844387],[1,1,1,0.4],[1,0,-60,0]],[1,"Car_Body_Top_color",916,[[6,1,-4652,[787,788],[0],789]]],[1,"Car_roof__Removable__color",138,[[2,-4653,[790],[0],791]]],[1,"kinh_a_2",138,[[2,-4654,[792],[0],793]]],[1,"kinh_a_1",138,[[2,-4655,[794],[0],795]]],[9,"Arrow",138,[[5,"Quad<ModelComponent>",-4656,[796],[0],797]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",917,[[6,1,-4657,[798,799],[0],800]]],[1,"Car_roof__Removable__color",139,[[2,-4658,[801],[0],802]]],[1,"kinh_a_2",139,[[2,-4659,[803],[0],804]]],[1,"kinh_a_1",139,[[2,-4660,[805],[0],806]]],[9,"Arrow",139,[[5,"Quad<ModelComponent>",-4661,[807],[0],808]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",918,[[6,1,-4662,[809,810],[0],811]]],[1,"Car_roof__Removable__color",583,[[2,-4663,[812],[0],813]]],[1,"kinh_a_2",583,[[2,-4664,[814],[0],815]]],[1,"kinh_a_1",583,[[2,-4665,[816],[0],817]]],[1,"Car_Body_Top_color",919,[[6,1,-4666,[818,819],[0],820]]],[1,"Car_roof__Removable__color",584,[[2,-4667,[821],[0],822]]],[1,"kinh_a_2",584,[[2,-4668,[823],[0],824]]],[1,"kinh_a_1",584,[[2,-4669,[825],[0],826]]],[1,"Car_Body_Top_color",920,[[6,1,-4670,[827,828],[0],829]]],[1,"Car_roof__Removable__color",585,[[2,-4671,[830],[0],831]]],[1,"kinh_a_2",585,[[2,-4672,[832],[0],833]]],[1,"kinh_a_1",585,[[2,-4673,[834],[0],835]]],[1,"Car_Body_Top_color",921,[[6,1,-4674,[836,837],[0],838]]],[1,"Car_roof__Removable__color",586,[[2,-4675,[839],[0],840]]],[1,"kinh_a_2",586,[[2,-4676,[841],[0],842]]],[1,"kinh_a_1",586,[[2,-4677,[843],[0],844]]],[1,"Car_Body_Top_color",922,[[6,1,-4678,[845,846],[0],847]]],[1,"Car_roof__Removable__color",587,[[2,-4679,[848],[0],849]]],[1,"kinh_a_2",587,[[2,-4680,[850],[0],851]]],[1,"kinh_a_1",587,[[2,-4681,[852],[0],853]]],[1,"Car_Body_Top_color",923,[[6,1,-4682,[854,855],[0],856]]],[1,"Car_roof__Removable__color",140,[[2,-4683,[857],[0],858]]],[1,"kinh_a_2",140,[[2,-4684,[859],[0],860]]],[1,"kinh_a_1",140,[[2,-4685,[861],[0],862]]],[9,"Arrow",140,[[5,"Quad<ModelComponent>",-4686,[863],[0],864]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",924,[[6,1,-4687,[865,866],[0],867]]],[1,"Car_roof__Removable__color",141,[[2,-4688,[868],[0],869]]],[1,"kinh_a_2",141,[[2,-4689,[870],[0],871]]],[1,"kinh_a_1",141,[[2,-4690,[872],[0],873]]],[31,"Arrow",false,141,[[5,"Quad<ModelComponent>",-4691,[874],[0],875]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.003",83,[[2,-4692,[876],[0],877]]],[1,"BANH XE.006",83,[[2,-4693,[878],[0],879]]],[1,"BANH XE.007",83,[[2,-4694,[880],[0],881]]],[1,"BANH XE.008",83,[[2,-4695,[882],[0],883]]],[1,"BANH XE.009",83,[[2,-4696,[884],[0],885]]],[1,"Seat_4.003",83,[[2,-4697,[886],[0],887]]],[1,"Seat_3.003",83,[[2,-4698,[888],[0],889]]],[1,"Seat_2.003",83,[[2,-4699,[890],[0],891]]],[1,"Seat_1.002",84,[[2,-4700,[892],[0],893]]],[1,"Seat_2.002",84,[[2,-4701,[894],[0],895]]],[1,"Seat_3.002",84,[[2,-4702,[896],[0],897]]],[1,"Seat_4.002",84,[[2,-4703,[898],[0],899]]],[1,"BANH XE.002",84,[[2,-4704,[900],[0],901]]],[1,"BANH XE.003",84,[[2,-4705,[902],[0],903]]],[1,"BANH XE.004",84,[[2,-4706,[904],[0],905]]],[1,"BANH XE.005",84,[[2,-4707,[906],[0],907]]],[1,"Bus_body_color.001",931,[[6,1,-4708,[919],[0],920]]],[1,"Bus_roof__Removable__color.001",932,[[2,-4709,[921],[0],922]]],[9,"Arrow",932,[[5,"Quad<ModelComponent>",-4710,[923],[0],924]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",933,[[6,1,-4711,[925],[0],926]]],[1,"Bus_roof__Removable__color.001",589,[[2,-4712,[927],[0],928]]],[9,"Arrow",589,[[5,"Quad<ModelComponent>",-4713,[929],[0],930]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",934,[[6,1,-4714,[931],[0],932]]],[1,"Bus_roof__Removable__color.001",935,[[2,-4715,[933],[0],934]]],[9,"Arrow",935,[[5,"Quad<ModelComponent>",-4716,[935],[0],936]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",936,[[6,1,-4717,[937],[0],938]]],[1,"Bus_roof__Removable__color.001",937,[[2,-4718,[939],[0],940]]],[9,"Arrow",937,[[5,"Quad<ModelComponent>",-4719,[941],[0],942]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",938,[[6,1,-4720,[943],[0],944]]],[1,"Bus_roof__Removable__color.001",939,[[2,-4721,[945],[0],946]]],[9,"Arrow",939,[[5,"Quad<ModelComponent>",-4722,[947],[0],948]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",940,[[6,1,-4723,[949],[0],950]]],[1,"Bus_roof__Removable__color.001",941,[[2,-4724,[951],[0],952]]],[9,"Arrow",941,[[5,"Quad<ModelComponent>",-4725,[953],[0],954]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",942,[[6,1,-4726,[955],[0],956]]],[1,"Bus_roof__Removable__color.001",943,[[2,-4727,[957],[0],958]]],[9,"Arrow",943,[[5,"Quad<ModelComponent>",-4728,[959],[0],960]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",944,[[6,1,-4729,[961],[0],962]]],[1,"Bus_roof__Removable__color.001",945,[[2,-4730,[963],[0],964]]],[9,"Arrow",945,[[5,"Quad<ModelComponent>",-4731,[965],[0],966]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",946,[[6,1,-4732,[967],[0],968]]],[1,"Bus_roof__Removable__color.001",947,[[2,-4733,[969],[0],970]]],[9,"Arrow",947,[[5,"Quad<ModelComponent>",-4734,[971],[0],972]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,1,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Seat_1.001",53,[[2,-4735,[973],[0],974]]],[1,"Seat_2.001",53,[[2,-4736,[975],[0],976]]],[1,"Seat_4.001",53,[[2,-4737,[977],[0],978]]],[1,"Seat_3.001",53,[[2,-4738,[979],[0],980]]],[1,"Seat_5.001",53,[[2,-4739,[981],[0],982]]],[1,"Seat_6.001",53,[[2,-4740,[983],[0],984]]],[1,"Seat_7.001",53,[[2,-4741,[985],[0],986]]],[1,"Seat_8.001",53,[[2,-4742,[987],[0],988]]],[1,"Seat_9.001",53,[[2,-4743,[989],[0],990]]],[1,"Seat_10.001",53,[[2,-4744,[991],[0],992]]],[1,"BANH XE.001",53,[[2,-4745,[993],[0],994]]],[1,"extracted_02.001",53,[[2,-4746,[995],[0],996]]],[62,"BANH XE.002",53,[[2,-4747,[997],[0],998]],[1,0,0,-2.6159999999999854]],[62,"BANH XE.003",53,[[2,-4748,[999],[0],1000]],[1,0,0,-2.1229999999999905]],[49,"BANH XE.004",53,[[2,-4749,[1001],[0],1002]],[1,0.0519999999999996,0,2.822000000000017],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.005",53,[[2,-4750,[1003],[0],1004]],[1,0.0519999999999996,0,0.20600000000001728],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.006",53,[[2,-4751,[1005],[0],1006]],[1,0.0519999999999996,0,0.6990000000000123],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[1,"Bus_body_color.001",960,[[6,1,-4752,[1031],[0],1032]]],[1,"Bus_roof__Removable__color.001",961,[[2,-4753,[1033],[0],1034]]],[9,"Arrow",961,[[5,"Quad<ModelComponent>",-4754,[1035],[0],1036]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",962,[[6,1,-4755,[1037],[0],1038]]],[1,"Bus_roof__Removable__color.001",963,[[2,-4756,[1039],[0],1040]]],[9,"Arrow",963,[[5,"Quad<ModelComponent>",-4757,[1041],[0],1042]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",964,[[6,1,-4758,[1043],[0],1044]]],[1,"Bus_roof__Removable__color.001",590,[[2,-4759,[1045],[0],1046]]],[9,"Arrow",590,[[5,"Quad<ModelComponent>",-4760,[1047],[0],1048]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",965,[[6,1,-4761,[1049],[0],1050]]],[1,"Bus_roof__Removable__color.001",966,[[2,-4762,[1051],[0],1052]]],[9,"Arrow",966,[[5,"Quad<ModelComponent>",-4763,[1053],[0],1054]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",967,[[6,1,-4764,[1055],[0],1056]]],[1,"Bus_roof__Removable__color.001",968,[[2,-4765,[1057],[0],1058]]],[9,"Arrow",968,[[5,"Quad<ModelComponent>",-4766,[1059],[0],1060]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",969,[[6,1,-4767,[1061],[0],1062]]],[1,"Bus_roof__Removable__color.001",970,[[2,-4768,[1063],[0],1064]]],[9,"Arrow",970,[[5,"Quad<ModelComponent>",-4769,[1065],[0],1066]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",971,[[6,1,-4770,[1067],[0],1068]]],[1,"Bus_roof__Removable__color.001",972,[[2,-4771,[1069],[0],1070]]],[9,"Arrow",972,[[5,"Quad<ModelComponent>",-4772,[1071],[0],1072]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",973,[[6,1,-4773,[1073],[0],1074]]],[1,"Bus_roof__Removable__color.001",974,[[2,-4774,[1075],[0],1076]]],[9,"Arrow",974,[[5,"Quad<ModelComponent>",-4775,[1077],[0],1078]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",975,[[6,1,-4776,[1079],[0],1080]]],[1,"Bus_roof__Removable__color.001",976,[[2,-4777,[1081],[0],1082]]],[9,"Arrow",976,[[5,"Quad<ModelComponent>",-4778,[1083],[0],1084]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,1,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Seat_1.001",54,[[2,-4779,[1085],[0],1086]]],[1,"Seat_2.001",54,[[2,-4780,[1087],[0],1088]]],[1,"Seat_4.001",54,[[2,-4781,[1089],[0],1090]]],[1,"Seat_3.001",54,[[2,-4782,[1091],[0],1092]]],[1,"Seat_5.001",54,[[2,-4783,[1093],[0],1094]]],[1,"Seat_6.001",54,[[2,-4784,[1095],[0],1096]]],[1,"Seat_7.001",54,[[2,-4785,[1097],[0],1098]]],[1,"Seat_8.001",54,[[2,-4786,[1099],[0],1100]]],[1,"Seat_9.001",54,[[2,-4787,[1101],[0],1102]]],[1,"Seat_10.001",54,[[2,-4788,[1103],[0],1104]]],[1,"BANH XE.001",54,[[2,-4789,[1105],[0],1106]]],[1,"extracted_02.001",54,[[2,-4790,[1107],[0],1108]]],[62,"BANH XE.002",54,[[2,-4791,[1109],[0],1110]],[1,0,0,-2.6159999999999854]],[62,"BANH XE.003",54,[[2,-4792,[1111],[0],1112]],[1,0,0,-2.1229999999999905]],[49,"BANH XE.004",54,[[2,-4793,[1113],[0],1114]],[1,0.0519999999999996,0,2.822000000000017],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.005",54,[[2,-4794,[1115],[0],1116]],[1,0.0519999999999996,0,0.20600000000001728],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.006",54,[[2,-4795,[1117],[0],1118]],[1,0.0519999999999996,0,0.6990000000000123],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[1,"Bus_body_color.001",989,[[6,1,-4796,[1143],[0],1144]]],[1,"Bus_roof__Removable__color.001",990,[[2,-4797,[1145],[0],1146]]],[9,"Arrow",990,[[5,"Quad<ModelComponent>",-4798,[1147],[0],1148]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",991,[[6,1,-4799,[1149],[0],1150]]],[1,"Bus_roof__Removable__color.001",992,[[2,-4800,[1151],[0],1152]]],[9,"Arrow",992,[[5,"Quad<ModelComponent>",-4801,[1153],[0],1154]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",993,[[6,1,-4802,[1155],[0],1156]]],[1,"Bus_roof__Removable__color.001",994,[[2,-4803,[1157],[0],1158]]],[9,"Arrow",994,[[5,"Quad<ModelComponent>",-4804,[1159],[0],1160]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",995,[[6,1,-4805,[1161],[0],1162]]],[1,"Bus_roof__Removable__color.001",996,[[2,-4806,[1163],[0],1164]]],[9,"Arrow",996,[[5,"Quad<ModelComponent>",-4807,[1165],[0],1166]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",997,[[6,1,-4808,[1167],[0],1168]]],[1,"Bus_roof__Removable__color.001",591,[[2,-4809,[1169],[0],1170]]],[9,"Arrow",591,[[5,"Quad<ModelComponent>",-4810,[1171],[0],1172]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",998,[[6,1,-4811,[1173],[0],1174]]],[1,"Bus_roof__Removable__color.001",999,[[2,-4812,[1175],[0],1176]]],[9,"Arrow",999,[[5,"Quad<ModelComponent>",-4813,[1177],[0],1178]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",1000,[[6,1,-4814,[1179],[0],1180]]],[1,"Bus_roof__Removable__color.001",1001,[[2,-4815,[1181],[0],1182]]],[9,"Arrow",1001,[[5,"Quad<ModelComponent>",-4816,[1183],[0],1184]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",1002,[[6,1,-4817,[1185],[0],1186]]],[1,"Bus_roof__Removable__color.001",1003,[[2,-4818,[1187],[0],1188]]],[9,"Arrow",1003,[[5,"Quad<ModelComponent>",-4819,[1189],[0],1190]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Bus_body_color.001",1004,[[6,1,-4820,[1191],[0],1192]]],[1,"Bus_roof__Removable__color.001",1005,[[2,-4821,[1193],[0],1194]]],[9,"Arrow",1005,[[5,"Quad<ModelComponent>",-4822,[1195],[0],1196]],[1,0,1.494,0],[3,4.3297802811774664e-17,0.7071067811865476,0.7071067811865475,-4.3297802811774677e-17],[1,1,1.3,1],[1,-89.99999999999999,-180,-7.062250076880254e-31]],[1,"Seat_1.001",55,[[2,-4823,[1197],[0],1198]]],[1,"Seat_2.001",55,[[2,-4824,[1199],[0],1200]]],[1,"Seat_4.001",55,[[2,-4825,[1201],[0],1202]]],[1,"Seat_3.001",55,[[2,-4826,[1203],[0],1204]]],[1,"Seat_5.001",55,[[2,-4827,[1205],[0],1206]]],[1,"Seat_6.001",55,[[2,-4828,[1207],[0],1208]]],[1,"Seat_7.001",55,[[2,-4829,[1209],[0],1210]]],[1,"Seat_8.001",55,[[2,-4830,[1211],[0],1212]]],[1,"Seat_9.001",55,[[2,-4831,[1213],[0],1214]]],[1,"Seat_10.001",55,[[2,-4832,[1215],[0],1216]]],[1,"BANH XE.001",55,[[2,-4833,[1217],[0],1218]]],[1,"extracted_02.001",55,[[2,-4834,[1219],[0],1220]]],[62,"BANH XE.002",55,[[2,-4835,[1221],[0],1222]],[1,0,0,-2.6159999999999854]],[62,"BANH XE.003",55,[[2,-4836,[1223],[0],1224]],[1,0,0,-2.1229999999999905]],[49,"BANH XE.004",55,[[2,-4837,[1225],[0],1226]],[1,0.0519999999999996,0,2.822000000000017],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.005",55,[[2,-4838,[1227],[0],1228]],[1,0.0519999999999996,0,0.20600000000001728],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[49,"BANH XE.006",55,[[2,-4839,[1229],[0],1230]],[1,0.0519999999999996,0,0.6990000000000123],[3,0,1,0,-6.123233995736765e-17],[1,0,-180,0]],[1,"Seat_1.002",8,[[2,-4840,[1255],[0],1256]]],[1,"Seat_2.002",8,[[2,-4841,[1257],[0],1258]]],[1,"Seat_3.002",8,[[2,-4842,[1259],[0],1260]]],[1,"Seat_4.002",8,[[2,-4843,[1261],[0],1262]]],[1,"BANH XE.002",8,[[2,-4844,[1263],[0],1264]]],[1,"BANH XE.003",8,[[2,-4845,[1265],[0],1266]]],[1,"BANH XE.004",8,[[2,-4846,[1267],[0],1268]]],[1,"BANH XE.005",8,[[2,-4847,[1269],[0],1270]]],[1,"Car_Body_Top_color",1018,[[6,1,-4848,[1271,1272],[0],1273]]],[1,"Car_roof__Removable__color",178,[[2,-4849,[1274],[0],1275]]],[1,"kinh_a_2",178,[[2,-4850,[1276],[0],1277]]],[1,"kinh_a_1",178,[[2,-4851,[1278],[0],1279]]],[9,"Arrow",178,[[5,"Quad<ModelComponent>",-4852,[1280],[0],1281]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1019,[[6,1,-4853,[1282,1283],[0],1284]]],[1,"Car_roof__Removable__color",179,[[2,-4854,[1285],[0],1286]]],[1,"kinh_a_2",179,[[2,-4855,[1287],[0],1288]]],[1,"kinh_a_1",179,[[2,-4856,[1289],[0],1290]]],[9,"Arrow",179,[[5,"Quad<ModelComponent>",-4857,[1291],[0],1292]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1020,[[6,1,-4858,[1293,1294],[0],1295]]],[1,"Car_roof__Removable__color",592,[[2,-4859,[1296],[0],1297]]],[1,"kinh_a_2",592,[[2,-4860,[1298],[0],1299]]],[1,"kinh_a_1",592,[[2,-4861,[1300],[0],1301]]],[1,"Car_Body_Top_color",1021,[[6,1,-4862,[1302,1303],[0],1304]]],[1,"Car_roof__Removable__color",593,[[2,-4863,[1305],[0],1306]]],[1,"kinh_a_2",593,[[2,-4864,[1307],[0],1308]]],[1,"kinh_a_1",593,[[2,-4865,[1309],[0],1310]]],[1,"Car_Body_Top_color",1022,[[6,1,-4866,[1311,1312],[0],1313]]],[1,"Car_roof__Removable__color",594,[[2,-4867,[1314],[0],1315]]],[1,"kinh_a_2",594,[[2,-4868,[1316],[0],1317]]],[1,"kinh_a_1",594,[[2,-4869,[1318],[0],1319]]],[1,"Car_Body_Top_color",1023,[[6,1,-4870,[1320,1321],[0],1322]]],[1,"Car_roof__Removable__color",595,[[2,-4871,[1323],[0],1324]]],[1,"kinh_a_2",595,[[2,-4872,[1325],[0],1326]]],[1,"kinh_a_1",595,[[2,-4873,[1327],[0],1328]]],[1,"Car_Body_Top_color",1024,[[6,1,-4874,[1329,1330],[0],1331]]],[1,"Car_roof__Removable__color",596,[[2,-4875,[1332],[0],1333]]],[1,"kinh_a_2",596,[[2,-4876,[1334],[0],1335]]],[1,"kinh_a_1",596,[[2,-4877,[1336],[0],1337]]],[1,"Car_Body_Top_color",1025,[[6,1,-4878,[1338,1339],[0],1340]]],[1,"Car_roof__Removable__color",180,[[2,-4879,[1341],[0],1342]]],[1,"kinh_a_2",180,[[2,-4880,[1343],[0],1344]]],[1,"kinh_a_1",180,[[2,-4881,[1345],[0],1346]]],[9,"Arrow",180,[[5,"Quad<ModelComponent>",-4882,[1347],[0],1348]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1026,[[6,1,-4883,[1349,1350],[0],1351]]],[1,"Car_roof__Removable__color",181,[[2,-4884,[1352],[0],1353]]],[1,"kinh_a_2",181,[[2,-4885,[1354],[0],1355]]],[1,"kinh_a_1",181,[[2,-4886,[1356],[0],1357]]],[31,"Arrow",false,181,[[5,"Quad<ModelComponent>",-4887,[1358],[0],1359]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",9,[[2,-4888,[1371],[0],1372]]],[1,"Seat_2.002",9,[[2,-4889,[1373],[0],1374]]],[1,"Seat_3.002",9,[[2,-4890,[1375],[0],1376]]],[1,"Seat_4.002",9,[[2,-4891,[1377],[0],1378]]],[1,"BANH XE.002",9,[[2,-4892,[1379],[0],1380]]],[1,"BANH XE.003",9,[[2,-4893,[1381],[0],1382]]],[1,"BANH XE.004",9,[[2,-4894,[1383],[0],1384]]],[1,"BANH XE.005",9,[[2,-4895,[1385],[0],1386]]],[1,"Car_Body_Top_color",1033,[[6,1,-4896,[1387,1388],[0],1389]]],[1,"Car_roof__Removable__color",188,[[2,-4897,[1390],[0],1391]]],[1,"kinh_a_2",188,[[2,-4898,[1392],[0],1393]]],[1,"kinh_a_1",188,[[2,-4899,[1394],[0],1395]]],[9,"Arrow",188,[[5,"Quad<ModelComponent>",-4900,[1396],[0],1397]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1034,[[6,1,-4901,[1398,1399],[0],1400]]],[1,"Car_roof__Removable__color",189,[[2,-4902,[1401],[0],1402]]],[1,"kinh_a_2",189,[[2,-4903,[1403],[0],1404]]],[1,"kinh_a_1",189,[[2,-4904,[1405],[0],1406]]],[9,"Arrow",189,[[5,"Quad<ModelComponent>",-4905,[1407],[0],1408]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1035,[[6,1,-4906,[1409,1410],[0],1411]]],[1,"Car_roof__Removable__color",598,[[2,-4907,[1412],[0],1413]]],[1,"kinh_a_2",598,[[2,-4908,[1414],[0],1415]]],[1,"kinh_a_1",598,[[2,-4909,[1416],[0],1417]]],[1,"Car_Body_Top_color",1036,[[6,1,-4910,[1418,1419],[0],1420]]],[1,"Car_roof__Removable__color",599,[[2,-4911,[1421],[0],1422]]],[1,"kinh_a_2",599,[[2,-4912,[1423],[0],1424]]],[1,"kinh_a_1",599,[[2,-4913,[1425],[0],1426]]],[1,"Car_Body_Top_color",1037,[[6,1,-4914,[1427,1428],[0],1429]]],[1,"Car_roof__Removable__color",600,[[2,-4915,[1430],[0],1431]]],[1,"kinh_a_2",600,[[2,-4916,[1432],[0],1433]]],[1,"kinh_a_1",600,[[2,-4917,[1434],[0],1435]]],[1,"Car_Body_Top_color",1038,[[6,1,-4918,[1436,1437],[0],1438]]],[1,"Car_roof__Removable__color",601,[[2,-4919,[1439],[0],1440]]],[1,"kinh_a_2",601,[[2,-4920,[1441],[0],1442]]],[1,"kinh_a_1",601,[[2,-4921,[1443],[0],1444]]],[1,"Car_Body_Top_color",1039,[[6,1,-4922,[1445,1446],[0],1447]]],[1,"Car_roof__Removable__color",602,[[2,-4923,[1448],[0],1449]]],[1,"kinh_a_2",602,[[2,-4924,[1450],[0],1451]]],[1,"kinh_a_1",602,[[2,-4925,[1452],[0],1453]]],[1,"Car_Body_Top_color",1040,[[6,1,-4926,[1454,1455],[0],1456]]],[1,"Car_roof__Removable__color",190,[[2,-4927,[1457],[0],1458]]],[1,"kinh_a_2",190,[[2,-4928,[1459],[0],1460]]],[1,"kinh_a_1",190,[[2,-4929,[1461],[0],1462]]],[9,"Arrow",190,[[5,"Quad<ModelComponent>",-4930,[1463],[0],1464]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1041,[[6,1,-4931,[1465,1466],[0],1467]]],[1,"Car_roof__Removable__color",191,[[2,-4932,[1468],[0],1469]]],[1,"kinh_a_2",191,[[2,-4933,[1470],[0],1471]]],[1,"kinh_a_1",191,[[2,-4934,[1472],[0],1473]]],[31,"Arrow",false,191,[[5,"Quad<ModelComponent>",-4935,[1474],[0],1475]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",10,[[2,-4936,[1487],[0],1488]]],[1,"Seat_2.002",10,[[2,-4937,[1489],[0],1490]]],[1,"Seat_3.002",10,[[2,-4938,[1491],[0],1492]]],[1,"Seat_4.002",10,[[2,-4939,[1493],[0],1494]]],[1,"BANH XE.002",10,[[2,-4940,[1495],[0],1496]]],[1,"BANH XE.003",10,[[2,-4941,[1497],[0],1498]]],[1,"BANH XE.004",10,[[2,-4942,[1499],[0],1500]]],[1,"BANH XE.005",10,[[2,-4943,[1501],[0],1502]]],[1,"Car_Body_Top_color",1048,[[6,1,-4944,[1503,1504],[0],1505]]],[1,"Car_roof__Removable__color",198,[[2,-4945,[1506],[0],1507]]],[1,"kinh_a_2",198,[[2,-4946,[1508],[0],1509]]],[1,"kinh_a_1",198,[[2,-4947,[1510],[0],1511]]],[9,"Arrow",198,[[5,"Quad<ModelComponent>",-4948,[1512],[0],1513]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1049,[[6,1,-4949,[1514,1515],[0],1516]]],[1,"Car_roof__Removable__color",199,[[2,-4950,[1517],[0],1518]]],[1,"kinh_a_2",199,[[2,-4951,[1519],[0],1520]]],[1,"kinh_a_1",199,[[2,-4952,[1521],[0],1522]]],[9,"Arrow",199,[[5,"Quad<ModelComponent>",-4953,[1523],[0],1524]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1050,[[6,1,-4954,[1525,1526],[0],1527]]],[1,"Car_roof__Removable__color",604,[[2,-4955,[1528],[0],1529]]],[1,"kinh_a_2",604,[[2,-4956,[1530],[0],1531]]],[1,"kinh_a_1",604,[[2,-4957,[1532],[0],1533]]],[1,"Car_Body_Top_color",1051,[[6,1,-4958,[1534,1535],[0],1536]]],[1,"Car_roof__Removable__color",605,[[2,-4959,[1537],[0],1538]]],[1,"kinh_a_2",605,[[2,-4960,[1539],[0],1540]]],[1,"kinh_a_1",605,[[2,-4961,[1541],[0],1542]]],[1,"Car_Body_Top_color",1052,[[6,1,-4962,[1543,1544],[0],1545]]],[1,"Car_roof__Removable__color",606,[[2,-4963,[1546],[0],1547]]],[1,"kinh_a_2",606,[[2,-4964,[1548],[0],1549]]],[1,"kinh_a_1",606,[[2,-4965,[1550],[0],1551]]],[1,"Car_Body_Top_color",1053,[[6,1,-4966,[1552,1553],[0],1554]]],[1,"Car_roof__Removable__color",607,[[2,-4967,[1555],[0],1556]]],[1,"kinh_a_2",607,[[2,-4968,[1557],[0],1558]]],[1,"kinh_a_1",607,[[2,-4969,[1559],[0],1560]]],[1,"Car_Body_Top_color",1054,[[6,1,-4970,[1561,1562],[0],1563]]],[1,"Car_roof__Removable__color",608,[[2,-4971,[1564],[0],1565]]],[1,"kinh_a_2",608,[[2,-4972,[1566],[0],1567]]],[1,"kinh_a_1",608,[[2,-4973,[1568],[0],1569]]],[1,"Car_Body_Top_color",1055,[[6,1,-4974,[1570,1571],[0],1572]]],[1,"Car_roof__Removable__color",200,[[2,-4975,[1573],[0],1574]]],[1,"kinh_a_2",200,[[2,-4976,[1575],[0],1576]]],[1,"kinh_a_1",200,[[2,-4977,[1577],[0],1578]]],[9,"Arrow",200,[[5,"Quad<ModelComponent>",-4978,[1579],[0],1580]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1056,[[6,1,-4979,[1581,1582],[0],1583]]],[1,"Car_roof__Removable__color",201,[[2,-4980,[1584],[0],1585]]],[1,"kinh_a_2",201,[[2,-4981,[1586],[0],1587]]],[1,"kinh_a_1",201,[[2,-4982,[1588],[0],1589]]],[31,"Arrow",false,201,[[5,"Quad<ModelComponent>",-4983,[1590],[0],1591]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",11,[[2,-4984,[1603],[0],1604]]],[1,"Seat_2.002",11,[[2,-4985,[1605],[0],1606]]],[1,"Seat_3.002",11,[[2,-4986,[1607],[0],1608]]],[1,"Seat_4.002",11,[[2,-4987,[1609],[0],1610]]],[1,"BANH XE.002",11,[[2,-4988,[1611],[0],1612]]],[1,"BANH XE.003",11,[[2,-4989,[1613],[0],1614]]],[1,"BANH XE.004",11,[[2,-4990,[1615],[0],1616]]],[1,"BANH XE.005",11,[[2,-4991,[1617],[0],1618]]],[1,"Car_Body_Top_color",1063,[[6,1,-4992,[1619,1620],[0],1621]]],[1,"Car_roof__Removable__color",208,[[2,-4993,[1622],[0],1623]]],[1,"kinh_a_2",208,[[2,-4994,[1624],[0],1625]]],[1,"kinh_a_1",208,[[2,-4995,[1626],[0],1627]]],[9,"Arrow",208,[[5,"Quad<ModelComponent>",-4996,[1628],[0],1629]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1064,[[6,1,-4997,[1630,1631],[0],1632]]],[1,"Car_roof__Removable__color",209,[[2,-4998,[1633],[0],1634]]],[1,"kinh_a_2",209,[[2,-4999,[1635],[0],1636]]],[1,"kinh_a_1",209,[[2,-5000,[1637],[0],1638]]],[9,"Arrow",209,[[5,"Quad<ModelComponent>",-5001,[1639],[0],1640]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1065,[[6,1,-5002,[1641,1642],[0],1643]]],[1,"Car_roof__Removable__color",610,[[2,-5003,[1644],[0],1645]]],[1,"kinh_a_2",610,[[2,-5004,[1646],[0],1647]]],[1,"kinh_a_1",610,[[2,-5005,[1648],[0],1649]]],[1,"Car_Body_Top_color",1066,[[6,1,-5006,[1650,1651],[0],1652]]],[1,"Car_roof__Removable__color",611,[[2,-5007,[1653],[0],1654]]],[1,"kinh_a_2",611,[[2,-5008,[1655],[0],1656]]],[1,"kinh_a_1",611,[[2,-5009,[1657],[0],1658]]],[1,"Car_Body_Top_color",1067,[[6,1,-5010,[1659,1660],[0],1661]]],[1,"Car_roof__Removable__color",612,[[2,-5011,[1662],[0],1663]]],[1,"kinh_a_2",612,[[2,-5012,[1664],[0],1665]]],[1,"kinh_a_1",612,[[2,-5013,[1666],[0],1667]]],[1,"Car_Body_Top_color",1068,[[6,1,-5014,[1668,1669],[0],1670]]],[1,"Car_roof__Removable__color",613,[[2,-5015,[1671],[0],1672]]],[1,"kinh_a_2",613,[[2,-5016,[1673],[0],1674]]],[1,"kinh_a_1",613,[[2,-5017,[1675],[0],1676]]],[1,"Car_Body_Top_color",1069,[[6,1,-5018,[1677,1678],[0],1679]]],[1,"Car_roof__Removable__color",614,[[2,-5019,[1680],[0],1681]]],[1,"kinh_a_2",614,[[2,-5020,[1682],[0],1683]]],[1,"kinh_a_1",614,[[2,-5021,[1684],[0],1685]]],[1,"Car_Body_Top_color",1070,[[6,1,-5022,[1686,1687],[0],1688]]],[1,"Car_roof__Removable__color",210,[[2,-5023,[1689],[0],1690]]],[1,"kinh_a_2",210,[[2,-5024,[1691],[0],1692]]],[1,"kinh_a_1",210,[[2,-5025,[1693],[0],1694]]],[9,"Arrow",210,[[5,"Quad<ModelComponent>",-5026,[1695],[0],1696]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1071,[[6,1,-5027,[1697,1698],[0],1699]]],[1,"Car_roof__Removable__color",211,[[2,-5028,[1700],[0],1701]]],[1,"kinh_a_2",211,[[2,-5029,[1702],[0],1703]]],[1,"kinh_a_1",211,[[2,-5030,[1704],[0],1705]]],[31,"Arrow",false,211,[[5,"Quad<ModelComponent>",-5031,[1706],[0],1707]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",12,[[2,-5032,[1719],[0],1720]]],[1,"Seat_2.002",12,[[2,-5033,[1721],[0],1722]]],[1,"Seat_3.002",12,[[2,-5034,[1723],[0],1724]]],[1,"Seat_4.002",12,[[2,-5035,[1725],[0],1726]]],[1,"BANH XE.002",12,[[2,-5036,[1727],[0],1728]]],[1,"BANH XE.003",12,[[2,-5037,[1729],[0],1730]]],[1,"BANH XE.004",12,[[2,-5038,[1731],[0],1732]]],[1,"BANH XE.005",12,[[2,-5039,[1733],[0],1734]]],[1,"Car_Body_Top_color",1078,[[6,1,-5040,[1735,1736],[0],1737]]],[1,"Car_roof__Removable__color",218,[[2,-5041,[1738],[0],1739]]],[1,"kinh_a_2",218,[[2,-5042,[1740],[0],1741]]],[1,"kinh_a_1",218,[[2,-5043,[1742],[0],1743]]],[9,"Arrow",218,[[5,"Quad<ModelComponent>",-5044,[1744],[0],1745]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1079,[[6,1,-5045,[1746,1747],[0],1748]]],[1,"Car_roof__Removable__color",219,[[2,-5046,[1749],[0],1750]]],[1,"kinh_a_2",219,[[2,-5047,[1751],[0],1752]]],[1,"kinh_a_1",219,[[2,-5048,[1753],[0],1754]]],[9,"Arrow",219,[[5,"Quad<ModelComponent>",-5049,[1755],[0],1756]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1080,[[6,1,-5050,[1757,1758],[0],1759]]],[1,"Car_roof__Removable__color",616,[[2,-5051,[1760],[0],1761]]],[1,"kinh_a_2",616,[[2,-5052,[1762],[0],1763]]],[1,"kinh_a_1",616,[[2,-5053,[1764],[0],1765]]],[1,"Car_Body_Top_color",1081,[[6,1,-5054,[1766,1767],[0],1768]]],[1,"Car_roof__Removable__color",617,[[2,-5055,[1769],[0],1770]]],[1,"kinh_a_2",617,[[2,-5056,[1771],[0],1772]]],[1,"kinh_a_1",617,[[2,-5057,[1773],[0],1774]]],[1,"Car_Body_Top_color",1082,[[6,1,-5058,[1775,1776],[0],1777]]],[1,"Car_roof__Removable__color",618,[[2,-5059,[1778],[0],1779]]],[1,"kinh_a_2",618,[[2,-5060,[1780],[0],1781]]],[1,"kinh_a_1",618,[[2,-5061,[1782],[0],1783]]],[1,"Car_Body_Top_color",1083,[[6,1,-5062,[1784,1785],[0],1786]]],[1,"Car_roof__Removable__color",619,[[2,-5063,[1787],[0],1788]]],[1,"kinh_a_2",619,[[2,-5064,[1789],[0],1790]]],[1,"kinh_a_1",619,[[2,-5065,[1791],[0],1792]]],[1,"Car_Body_Top_color",1084,[[6,1,-5066,[1793,1794],[0],1795]]],[1,"Car_roof__Removable__color",620,[[2,-5067,[1796],[0],1797]]],[1,"kinh_a_2",620,[[2,-5068,[1798],[0],1799]]],[1,"kinh_a_1",620,[[2,-5069,[1800],[0],1801]]],[1,"Car_Body_Top_color",1085,[[6,1,-5070,[1802,1803],[0],1804]]],[1,"Car_roof__Removable__color",220,[[2,-5071,[1805],[0],1806]]],[1,"kinh_a_2",220,[[2,-5072,[1807],[0],1808]]],[1,"kinh_a_1",220,[[2,-5073,[1809],[0],1810]]],[9,"Arrow",220,[[5,"Quad<ModelComponent>",-5074,[1811],[0],1812]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1086,[[6,1,-5075,[1813,1814],[0],1815]]],[1,"Car_roof__Removable__color",221,[[2,-5076,[1816],[0],1817]]],[1,"kinh_a_2",221,[[2,-5077,[1818],[0],1819]]],[1,"kinh_a_1",221,[[2,-5078,[1820],[0],1821]]],[31,"Arrow",false,221,[[5,"Quad<ModelComponent>",-5079,[1822],[0],1823]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",13,[[2,-5080,[1835],[0],1836]]],[1,"Seat_2.002",13,[[2,-5081,[1837],[0],1838]]],[1,"Seat_3.002",13,[[2,-5082,[1839],[0],1840]]],[1,"Seat_4.002",13,[[2,-5083,[1841],[0],1842]]],[1,"BANH XE.002",13,[[2,-5084,[1843],[0],1844]]],[1,"BANH XE.003",13,[[2,-5085,[1845],[0],1846]]],[1,"BANH XE.004",13,[[2,-5086,[1847],[0],1848]]],[1,"BANH XE.005",13,[[2,-5087,[1849],[0],1850]]],[1,"Car_Body_Top_color",1093,[[6,1,-5088,[1851,1852],[0],1853]]],[1,"Car_roof__Removable__color",228,[[2,-5089,[1854],[0],1855]]],[1,"kinh_a_2",228,[[2,-5090,[1856],[0],1857]]],[1,"kinh_a_1",228,[[2,-5091,[1858],[0],1859]]],[9,"Arrow",228,[[5,"Quad<ModelComponent>",-5092,[1860],[0],1861]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1094,[[6,1,-5093,[1862,1863],[0],1864]]],[1,"Car_roof__Removable__color",229,[[2,-5094,[1865],[0],1866]]],[1,"kinh_a_2",229,[[2,-5095,[1867],[0],1868]]],[1,"kinh_a_1",229,[[2,-5096,[1869],[0],1870]]],[9,"Arrow",229,[[5,"Quad<ModelComponent>",-5097,[1871],[0],1872]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1095,[[6,1,-5098,[1873,1874],[0],1875]]],[1,"Car_roof__Removable__color",622,[[2,-5099,[1876],[0],1877]]],[1,"kinh_a_2",622,[[2,-5100,[1878],[0],1879]]],[1,"kinh_a_1",622,[[2,-5101,[1880],[0],1881]]],[1,"Car_Body_Top_color",1096,[[6,1,-5102,[1882,1883],[0],1884]]],[1,"Car_roof__Removable__color",623,[[2,-5103,[1885],[0],1886]]],[1,"kinh_a_2",623,[[2,-5104,[1887],[0],1888]]],[1,"kinh_a_1",623,[[2,-5105,[1889],[0],1890]]],[1,"Car_Body_Top_color",1097,[[6,1,-5106,[1891,1892],[0],1893]]],[1,"Car_roof__Removable__color",624,[[2,-5107,[1894],[0],1895]]],[1,"kinh_a_2",624,[[2,-5108,[1896],[0],1897]]],[1,"kinh_a_1",624,[[2,-5109,[1898],[0],1899]]],[1,"Car_Body_Top_color",1098,[[6,1,-5110,[1900,1901],[0],1902]]],[1,"Car_roof__Removable__color",625,[[2,-5111,[1903],[0],1904]]],[1,"kinh_a_2",625,[[2,-5112,[1905],[0],1906]]],[1,"kinh_a_1",625,[[2,-5113,[1907],[0],1908]]],[1,"Car_Body_Top_color",1099,[[6,1,-5114,[1909,1910],[0],1911]]],[1,"Car_roof__Removable__color",626,[[2,-5115,[1912],[0],1913]]],[1,"kinh_a_2",626,[[2,-5116,[1914],[0],1915]]],[1,"kinh_a_1",626,[[2,-5117,[1916],[0],1917]]],[1,"Car_Body_Top_color",1100,[[6,1,-5118,[1918,1919],[0],1920]]],[1,"Car_roof__Removable__color",230,[[2,-5119,[1921],[0],1922]]],[1,"kinh_a_2",230,[[2,-5120,[1923],[0],1924]]],[1,"kinh_a_1",230,[[2,-5121,[1925],[0],1926]]],[9,"Arrow",230,[[5,"Quad<ModelComponent>",-5122,[1927],[0],1928]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1101,[[6,1,-5123,[1929,1930],[0],1931]]],[1,"Car_roof__Removable__color",231,[[2,-5124,[1932],[0],1933]]],[1,"kinh_a_2",231,[[2,-5125,[1934],[0],1935]]],[1,"kinh_a_1",231,[[2,-5126,[1936],[0],1937]]],[31,"Arrow",false,231,[[5,"Quad<ModelComponent>",-5127,[1938],[0],1939]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",14,[[2,-5128,[1951],[0],1952]]],[1,"Seat_2.002",14,[[2,-5129,[1953],[0],1954]]],[1,"Seat_3.002",14,[[2,-5130,[1955],[0],1956]]],[1,"Seat_4.002",14,[[2,-5131,[1957],[0],1958]]],[1,"BANH XE.002",14,[[2,-5132,[1959],[0],1960]]],[1,"BANH XE.003",14,[[2,-5133,[1961],[0],1962]]],[1,"BANH XE.004",14,[[2,-5134,[1963],[0],1964]]],[1,"BANH XE.005",14,[[2,-5135,[1965],[0],1966]]],[1,"Car_Body_Top_color",1108,[[6,1,-5136,[1967,1968],[0],1969]]],[1,"Car_roof__Removable__color",238,[[2,-5137,[1970],[0],1971]]],[1,"kinh_a_2",238,[[2,-5138,[1972],[0],1973]]],[1,"kinh_a_1",238,[[2,-5139,[1974],[0],1975]]],[9,"Arrow",238,[[5,"Quad<ModelComponent>",-5140,[1976],[0],1977]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1109,[[6,1,-5141,[1978,1979],[0],1980]]],[1,"Car_roof__Removable__color",239,[[2,-5142,[1981],[0],1982]]],[1,"kinh_a_2",239,[[2,-5143,[1983],[0],1984]]],[1,"kinh_a_1",239,[[2,-5144,[1985],[0],1986]]],[9,"Arrow",239,[[5,"Quad<ModelComponent>",-5145,[1987],[0],1988]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1110,[[6,1,-5146,[1989,1990],[0],1991]]],[1,"Car_roof__Removable__color",628,[[2,-5147,[1992],[0],1993]]],[1,"kinh_a_2",628,[[2,-5148,[1994],[0],1995]]],[1,"kinh_a_1",628,[[2,-5149,[1996],[0],1997]]],[1,"Car_Body_Top_color",1111,[[6,1,-5150,[1998,1999],[0],2000]]],[1,"Car_roof__Removable__color",629,[[2,-5151,[2001],[0],2002]]],[1,"kinh_a_2",629,[[2,-5152,[2003],[0],2004]]],[1,"kinh_a_1",629,[[2,-5153,[2005],[0],2006]]],[1,"Car_Body_Top_color",1112,[[6,1,-5154,[2007,2008],[0],2009]]],[1,"Car_roof__Removable__color",630,[[2,-5155,[2010],[0],2011]]],[1,"kinh_a_2",630,[[2,-5156,[2012],[0],2013]]],[1,"kinh_a_1",630,[[2,-5157,[2014],[0],2015]]],[1,"Car_Body_Top_color",1113,[[6,1,-5158,[2016,2017],[0],2018]]],[1,"Car_roof__Removable__color",631,[[2,-5159,[2019],[0],2020]]],[1,"kinh_a_2",631,[[2,-5160,[2021],[0],2022]]],[1,"kinh_a_1",631,[[2,-5161,[2023],[0],2024]]],[1,"Car_Body_Top_color",1114,[[6,1,-5162,[2025,2026],[0],2027]]],[1,"Car_roof__Removable__color",632,[[2,-5163,[2028],[0],2029]]],[1,"kinh_a_2",632,[[2,-5164,[2030],[0],2031]]],[1,"kinh_a_1",632,[[2,-5165,[2032],[0],2033]]],[1,"Car_Body_Top_color",1115,[[6,1,-5166,[2034,2035],[0],2036]]],[1,"Car_roof__Removable__color",240,[[2,-5167,[2037],[0],2038]]],[1,"kinh_a_2",240,[[2,-5168,[2039],[0],2040]]],[1,"kinh_a_1",240,[[2,-5169,[2041],[0],2042]]],[9,"Arrow",240,[[5,"Quad<ModelComponent>",-5170,[2043],[0],2044]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1116,[[6,1,-5171,[2045,2046],[0],2047]]],[1,"Car_roof__Removable__color",241,[[2,-5172,[2048],[0],2049]]],[1,"kinh_a_2",241,[[2,-5173,[2050],[0],2051]]],[1,"kinh_a_1",241,[[2,-5174,[2052],[0],2053]]],[31,"Arrow",false,241,[[5,"Quad<ModelComponent>",-5175,[2054],[0],2055]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",15,[[2,-5176,[2067],[0],2068]]],[1,"Seat_2.002",15,[[2,-5177,[2069],[0],2070]]],[1,"Seat_3.002",15,[[2,-5178,[2071],[0],2072]]],[1,"Seat_4.002",15,[[2,-5179,[2073],[0],2074]]],[1,"BANH XE.002",15,[[2,-5180,[2075],[0],2076]]],[1,"BANH XE.003",15,[[2,-5181,[2077],[0],2078]]],[1,"BANH XE.004",15,[[2,-5182,[2079],[0],2080]]],[1,"BANH XE.005",15,[[2,-5183,[2081],[0],2082]]],[1,"Car_Body_Top_color",1123,[[6,1,-5184,[2083,2084],[0],2085]]],[1,"Car_roof__Removable__color",248,[[2,-5185,[2086],[0],2087]]],[1,"kinh_a_2",248,[[2,-5186,[2088],[0],2089]]],[1,"kinh_a_1",248,[[2,-5187,[2090],[0],2091]]],[9,"Arrow",248,[[5,"Quad<ModelComponent>",-5188,[2092],[0],2093]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1124,[[6,1,-5189,[2094,2095],[0],2096]]],[1,"Car_roof__Removable__color",249,[[2,-5190,[2097],[0],2098]]],[1,"kinh_a_2",249,[[2,-5191,[2099],[0],2100]]],[1,"kinh_a_1",249,[[2,-5192,[2101],[0],2102]]],[9,"Arrow",249,[[5,"Quad<ModelComponent>",-5193,[2103],[0],2104]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1125,[[6,1,-5194,[2105,2106],[0],2107]]],[1,"Car_roof__Removable__color",634,[[2,-5195,[2108],[0],2109]]],[1,"kinh_a_2",634,[[2,-5196,[2110],[0],2111]]],[1,"kinh_a_1",634,[[2,-5197,[2112],[0],2113]]],[1,"Car_Body_Top_color",1126,[[6,1,-5198,[2114,2115],[0],2116]]],[1,"Car_roof__Removable__color",635,[[2,-5199,[2117],[0],2118]]],[1,"kinh_a_2",635,[[2,-5200,[2119],[0],2120]]],[1,"kinh_a_1",635,[[2,-5201,[2121],[0],2122]]],[1,"Car_Body_Top_color",1127,[[6,1,-5202,[2123,2124],[0],2125]]],[1,"Car_roof__Removable__color",636,[[2,-5203,[2126],[0],2127]]],[1,"kinh_a_2",636,[[2,-5204,[2128],[0],2129]]],[1,"kinh_a_1",636,[[2,-5205,[2130],[0],2131]]],[1,"Car_Body_Top_color",1128,[[6,1,-5206,[2132,2133],[0],2134]]],[1,"Car_roof__Removable__color",637,[[2,-5207,[2135],[0],2136]]],[1,"kinh_a_2",637,[[2,-5208,[2137],[0],2138]]],[1,"kinh_a_1",637,[[2,-5209,[2139],[0],2140]]],[1,"Car_Body_Top_color",1129,[[6,1,-5210,[2141,2142],[0],2143]]],[1,"Car_roof__Removable__color",638,[[2,-5211,[2144],[0],2145]]],[1,"kinh_a_2",638,[[2,-5212,[2146],[0],2147]]],[1,"kinh_a_1",638,[[2,-5213,[2148],[0],2149]]],[1,"Car_Body_Top_color",1130,[[6,1,-5214,[2150,2151],[0],2152]]],[1,"Car_roof__Removable__color",250,[[2,-5215,[2153],[0],2154]]],[1,"kinh_a_2",250,[[2,-5216,[2155],[0],2156]]],[1,"kinh_a_1",250,[[2,-5217,[2157],[0],2158]]],[9,"Arrow",250,[[5,"Quad<ModelComponent>",-5218,[2159],[0],2160]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1131,[[6,1,-5219,[2161,2162],[0],2163]]],[1,"Car_roof__Removable__color",251,[[2,-5220,[2164],[0],2165]]],[1,"kinh_a_2",251,[[2,-5221,[2166],[0],2167]]],[1,"kinh_a_1",251,[[2,-5222,[2168],[0],2169]]],[31,"Arrow",false,251,[[5,"Quad<ModelComponent>",-5223,[2170],[0],2171]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",16,[[2,-5224,[2183],[0],2184]]],[1,"Seat_2.002",16,[[2,-5225,[2185],[0],2186]]],[1,"Seat_3.002",16,[[2,-5226,[2187],[0],2188]]],[1,"Seat_4.002",16,[[2,-5227,[2189],[0],2190]]],[1,"BANH XE.002",16,[[2,-5228,[2191],[0],2192]]],[1,"BANH XE.003",16,[[2,-5229,[2193],[0],2194]]],[1,"BANH XE.004",16,[[2,-5230,[2195],[0],2196]]],[1,"BANH XE.005",16,[[2,-5231,[2197],[0],2198]]],[1,"Car_Body_Top_color",1138,[[6,1,-5232,[2199,2200],[0],2201]]],[1,"Car_roof__Removable__color",258,[[2,-5233,[2202],[0],2203]]],[1,"kinh_a_2",258,[[2,-5234,[2204],[0],2205]]],[1,"kinh_a_1",258,[[2,-5235,[2206],[0],2207]]],[9,"Arrow",258,[[5,"Quad<ModelComponent>",-5236,[2208],[0],2209]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1139,[[6,1,-5237,[2210,2211],[0],2212]]],[1,"Car_roof__Removable__color",259,[[2,-5238,[2213],[0],2214]]],[1,"kinh_a_2",259,[[2,-5239,[2215],[0],2216]]],[1,"kinh_a_1",259,[[2,-5240,[2217],[0],2218]]],[9,"Arrow",259,[[5,"Quad<ModelComponent>",-5241,[2219],[0],2220]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1140,[[6,1,-5242,[2221,2222],[0],2223]]],[1,"Car_roof__Removable__color",640,[[2,-5243,[2224],[0],2225]]],[1,"kinh_a_2",640,[[2,-5244,[2226],[0],2227]]],[1,"kinh_a_1",640,[[2,-5245,[2228],[0],2229]]],[1,"Car_Body_Top_color",1141,[[6,1,-5246,[2230,2231],[0],2232]]],[1,"Car_roof__Removable__color",641,[[2,-5247,[2233],[0],2234]]],[1,"kinh_a_2",641,[[2,-5248,[2235],[0],2236]]],[1,"kinh_a_1",641,[[2,-5249,[2237],[0],2238]]],[1,"Car_Body_Top_color",1142,[[6,1,-5250,[2239,2240],[0],2241]]],[1,"Car_roof__Removable__color",642,[[2,-5251,[2242],[0],2243]]],[1,"kinh_a_2",642,[[2,-5252,[2244],[0],2245]]],[1,"kinh_a_1",642,[[2,-5253,[2246],[0],2247]]],[1,"Car_Body_Top_color",1143,[[6,1,-5254,[2248,2249],[0],2250]]],[1,"Car_roof__Removable__color",643,[[2,-5255,[2251],[0],2252]]],[1,"kinh_a_2",643,[[2,-5256,[2253],[0],2254]]],[1,"kinh_a_1",643,[[2,-5257,[2255],[0],2256]]],[1,"Car_Body_Top_color",1144,[[6,1,-5258,[2257,2258],[0],2259]]],[1,"Car_roof__Removable__color",644,[[2,-5259,[2260],[0],2261]]],[1,"kinh_a_2",644,[[2,-5260,[2262],[0],2263]]],[1,"kinh_a_1",644,[[2,-5261,[2264],[0],2265]]],[1,"Car_Body_Top_color",1145,[[6,1,-5262,[2266,2267],[0],2268]]],[1,"Car_roof__Removable__color",260,[[2,-5263,[2269],[0],2270]]],[1,"kinh_a_2",260,[[2,-5264,[2271],[0],2272]]],[1,"kinh_a_1",260,[[2,-5265,[2273],[0],2274]]],[9,"Arrow",260,[[5,"Quad<ModelComponent>",-5266,[2275],[0],2276]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1146,[[6,1,-5267,[2277,2278],[0],2279]]],[1,"Car_roof__Removable__color",261,[[2,-5268,[2280],[0],2281]]],[1,"kinh_a_2",261,[[2,-5269,[2282],[0],2283]]],[1,"kinh_a_1",261,[[2,-5270,[2284],[0],2285]]],[31,"Arrow",false,261,[[5,"Quad<ModelComponent>",-5271,[2286],[0],2287]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",17,[[2,-5272,[2299],[0],2300]]],[1,"Seat_2.002",17,[[2,-5273,[2301],[0],2302]]],[1,"Seat_3.002",17,[[2,-5274,[2303],[0],2304]]],[1,"Seat_4.002",17,[[2,-5275,[2305],[0],2306]]],[1,"BANH XE.002",17,[[2,-5276,[2307],[0],2308]]],[1,"BANH XE.003",17,[[2,-5277,[2309],[0],2310]]],[1,"BANH XE.004",17,[[2,-5278,[2311],[0],2312]]],[1,"BANH XE.005",17,[[2,-5279,[2313],[0],2314]]],[1,"Car_Body_Top_color",1153,[[6,1,-5280,[2315,2316],[0],2317]]],[1,"Car_roof__Removable__color",268,[[2,-5281,[2318],[0],2319]]],[1,"kinh_a_2",268,[[2,-5282,[2320],[0],2321]]],[1,"kinh_a_1",268,[[2,-5283,[2322],[0],2323]]],[9,"Arrow",268,[[5,"Quad<ModelComponent>",-5284,[2324],[0],2325]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1154,[[6,1,-5285,[2326,2327],[0],2328]]],[1,"Car_roof__Removable__color",269,[[2,-5286,[2329],[0],2330]]],[1,"kinh_a_2",269,[[2,-5287,[2331],[0],2332]]],[1,"kinh_a_1",269,[[2,-5288,[2333],[0],2334]]],[9,"Arrow",269,[[5,"Quad<ModelComponent>",-5289,[2335],[0],2336]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1155,[[6,1,-5290,[2337,2338],[0],2339]]],[1,"Car_roof__Removable__color",646,[[2,-5291,[2340],[0],2341]]],[1,"kinh_a_2",646,[[2,-5292,[2342],[0],2343]]],[1,"kinh_a_1",646,[[2,-5293,[2344],[0],2345]]],[1,"Car_Body_Top_color",1156,[[6,1,-5294,[2346,2347],[0],2348]]],[1,"Car_roof__Removable__color",647,[[2,-5295,[2349],[0],2350]]],[1,"kinh_a_2",647,[[2,-5296,[2351],[0],2352]]],[1,"kinh_a_1",647,[[2,-5297,[2353],[0],2354]]],[1,"Car_Body_Top_color",1157,[[6,1,-5298,[2355,2356],[0],2357]]],[1,"Car_roof__Removable__color",648,[[2,-5299,[2358],[0],2359]]],[1,"kinh_a_2",648,[[2,-5300,[2360],[0],2361]]],[1,"kinh_a_1",648,[[2,-5301,[2362],[0],2363]]],[1,"Car_Body_Top_color",1158,[[6,1,-5302,[2364,2365],[0],2366]]],[1,"Car_roof__Removable__color",649,[[2,-5303,[2367],[0],2368]]],[1,"kinh_a_2",649,[[2,-5304,[2369],[0],2370]]],[1,"kinh_a_1",649,[[2,-5305,[2371],[0],2372]]],[1,"Car_Body_Top_color",1159,[[6,1,-5306,[2373,2374],[0],2375]]],[1,"Car_roof__Removable__color",650,[[2,-5307,[2376],[0],2377]]],[1,"kinh_a_2",650,[[2,-5308,[2378],[0],2379]]],[1,"kinh_a_1",650,[[2,-5309,[2380],[0],2381]]],[1,"Car_Body_Top_color",1160,[[6,1,-5310,[2382,2383],[0],2384]]],[1,"Car_roof__Removable__color",270,[[2,-5311,[2385],[0],2386]]],[1,"kinh_a_2",270,[[2,-5312,[2387],[0],2388]]],[1,"kinh_a_1",270,[[2,-5313,[2389],[0],2390]]],[9,"Arrow",270,[[5,"Quad<ModelComponent>",-5314,[2391],[0],2392]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1161,[[6,1,-5315,[2393,2394],[0],2395]]],[1,"Car_roof__Removable__color",271,[[2,-5316,[2396],[0],2397]]],[1,"kinh_a_2",271,[[2,-5317,[2398],[0],2399]]],[1,"kinh_a_1",271,[[2,-5318,[2400],[0],2401]]],[31,"Arrow",false,271,[[5,"Quad<ModelComponent>",-5319,[2402],[0],2403]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",18,[[2,-5320,[2415],[0],2416]]],[1,"Seat_2.002",18,[[2,-5321,[2417],[0],2418]]],[1,"Seat_3.002",18,[[2,-5322,[2419],[0],2420]]],[1,"Seat_4.002",18,[[2,-5323,[2421],[0],2422]]],[1,"BANH XE.002",18,[[2,-5324,[2423],[0],2424]]],[1,"BANH XE.003",18,[[2,-5325,[2425],[0],2426]]],[1,"BANH XE.004",18,[[2,-5326,[2427],[0],2428]]],[1,"BANH XE.005",18,[[2,-5327,[2429],[0],2430]]],[1,"Car_Body_Top_color",1168,[[6,1,-5328,[2431,2432],[0],2433]]],[1,"Car_roof__Removable__color",278,[[2,-5329,[2434],[0],2435]]],[1,"kinh_a_2",278,[[2,-5330,[2436],[0],2437]]],[1,"kinh_a_1",278,[[2,-5331,[2438],[0],2439]]],[9,"Arrow",278,[[5,"Quad<ModelComponent>",-5332,[2440],[0],2441]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1169,[[6,1,-5333,[2442,2443],[0],2444]]],[1,"Car_roof__Removable__color",279,[[2,-5334,[2445],[0],2446]]],[1,"kinh_a_2",279,[[2,-5335,[2447],[0],2448]]],[1,"kinh_a_1",279,[[2,-5336,[2449],[0],2450]]],[9,"Arrow",279,[[5,"Quad<ModelComponent>",-5337,[2451],[0],2452]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1170,[[6,1,-5338,[2453,2454],[0],2455]]],[1,"Car_roof__Removable__color",652,[[2,-5339,[2456],[0],2457]]],[1,"kinh_a_2",652,[[2,-5340,[2458],[0],2459]]],[1,"kinh_a_1",652,[[2,-5341,[2460],[0],2461]]],[1,"Car_Body_Top_color",1171,[[6,1,-5342,[2462,2463],[0],2464]]],[1,"Car_roof__Removable__color",653,[[2,-5343,[2465],[0],2466]]],[1,"kinh_a_2",653,[[2,-5344,[2467],[0],2468]]],[1,"kinh_a_1",653,[[2,-5345,[2469],[0],2470]]],[1,"Car_Body_Top_color",1172,[[6,1,-5346,[2471,2472],[0],2473]]],[1,"Car_roof__Removable__color",654,[[2,-5347,[2474],[0],2475]]],[1,"kinh_a_2",654,[[2,-5348,[2476],[0],2477]]],[1,"kinh_a_1",654,[[2,-5349,[2478],[0],2479]]],[1,"Car_Body_Top_color",1173,[[6,1,-5350,[2480,2481],[0],2482]]],[1,"Car_roof__Removable__color",655,[[2,-5351,[2483],[0],2484]]],[1,"kinh_a_2",655,[[2,-5352,[2485],[0],2486]]],[1,"kinh_a_1",655,[[2,-5353,[2487],[0],2488]]],[1,"Car_Body_Top_color",1174,[[6,1,-5354,[2489,2490],[0],2491]]],[1,"Car_roof__Removable__color",656,[[2,-5355,[2492],[0],2493]]],[1,"kinh_a_2",656,[[2,-5356,[2494],[0],2495]]],[1,"kinh_a_1",656,[[2,-5357,[2496],[0],2497]]],[1,"Car_Body_Top_color",1175,[[6,1,-5358,[2498,2499],[0],2500]]],[1,"Car_roof__Removable__color",280,[[2,-5359,[2501],[0],2502]]],[1,"kinh_a_2",280,[[2,-5360,[2503],[0],2504]]],[1,"kinh_a_1",280,[[2,-5361,[2505],[0],2506]]],[9,"Arrow",280,[[5,"Quad<ModelComponent>",-5362,[2507],[0],2508]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1176,[[6,1,-5363,[2509,2510],[0],2511]]],[1,"Car_roof__Removable__color",281,[[2,-5364,[2512],[0],2513]]],[1,"kinh_a_2",281,[[2,-5365,[2514],[0],2515]]],[1,"kinh_a_1",281,[[2,-5366,[2516],[0],2517]]],[31,"Arrow",false,281,[[5,"Quad<ModelComponent>",-5367,[2518],[0],2519]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",19,[[2,-5368,[2531],[0],2532]]],[1,"Seat_2.002",19,[[2,-5369,[2533],[0],2534]]],[1,"Seat_3.002",19,[[2,-5370,[2535],[0],2536]]],[1,"Seat_4.002",19,[[2,-5371,[2537],[0],2538]]],[1,"BANH XE.002",19,[[2,-5372,[2539],[0],2540]]],[1,"BANH XE.003",19,[[2,-5373,[2541],[0],2542]]],[1,"BANH XE.004",19,[[2,-5374,[2543],[0],2544]]],[1,"BANH XE.005",19,[[2,-5375,[2545],[0],2546]]],[1,"Car_Body_Top_color",1183,[[6,1,-5376,[2547,2548],[0],2549]]],[1,"Car_roof__Removable__color",288,[[2,-5377,[2550],[0],2551]]],[1,"kinh_a_2",288,[[2,-5378,[2552],[0],2553]]],[1,"kinh_a_1",288,[[2,-5379,[2554],[0],2555]]],[9,"Arrow",288,[[5,"Quad<ModelComponent>",-5380,[2556],[0],2557]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1184,[[6,1,-5381,[2558,2559],[0],2560]]],[1,"Car_roof__Removable__color",289,[[2,-5382,[2561],[0],2562]]],[1,"kinh_a_2",289,[[2,-5383,[2563],[0],2564]]],[1,"kinh_a_1",289,[[2,-5384,[2565],[0],2566]]],[9,"Arrow",289,[[5,"Quad<ModelComponent>",-5385,[2567],[0],2568]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1185,[[6,1,-5386,[2569,2570],[0],2571]]],[1,"Car_roof__Removable__color",658,[[2,-5387,[2572],[0],2573]]],[1,"kinh_a_2",658,[[2,-5388,[2574],[0],2575]]],[1,"kinh_a_1",658,[[2,-5389,[2576],[0],2577]]],[1,"Car_Body_Top_color",1186,[[6,1,-5390,[2578,2579],[0],2580]]],[1,"Car_roof__Removable__color",659,[[2,-5391,[2581],[0],2582]]],[1,"kinh_a_2",659,[[2,-5392,[2583],[0],2584]]],[1,"kinh_a_1",659,[[2,-5393,[2585],[0],2586]]],[1,"Car_Body_Top_color",1187,[[6,1,-5394,[2587,2588],[0],2589]]],[1,"Car_roof__Removable__color",660,[[2,-5395,[2590],[0],2591]]],[1,"kinh_a_2",660,[[2,-5396,[2592],[0],2593]]],[1,"kinh_a_1",660,[[2,-5397,[2594],[0],2595]]],[1,"Car_Body_Top_color",1188,[[6,1,-5398,[2596,2597],[0],2598]]],[1,"Car_roof__Removable__color",661,[[2,-5399,[2599],[0],2600]]],[1,"kinh_a_2",661,[[2,-5400,[2601],[0],2602]]],[1,"kinh_a_1",661,[[2,-5401,[2603],[0],2604]]],[1,"Car_Body_Top_color",1189,[[6,1,-5402,[2605,2606],[0],2607]]],[1,"Car_roof__Removable__color",662,[[2,-5403,[2608],[0],2609]]],[1,"kinh_a_2",662,[[2,-5404,[2610],[0],2611]]],[1,"kinh_a_1",662,[[2,-5405,[2612],[0],2613]]],[1,"Car_Body_Top_color",1190,[[6,1,-5406,[2614,2615],[0],2616]]],[1,"Car_roof__Removable__color",290,[[2,-5407,[2617],[0],2618]]],[1,"kinh_a_2",290,[[2,-5408,[2619],[0],2620]]],[1,"kinh_a_1",290,[[2,-5409,[2621],[0],2622]]],[9,"Arrow",290,[[5,"Quad<ModelComponent>",-5410,[2623],[0],2624]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1191,[[6,1,-5411,[2625,2626],[0],2627]]],[1,"Car_roof__Removable__color",291,[[2,-5412,[2628],[0],2629]]],[1,"kinh_a_2",291,[[2,-5413,[2630],[0],2631]]],[1,"kinh_a_1",291,[[2,-5414,[2632],[0],2633]]],[31,"Arrow",false,291,[[5,"Quad<ModelComponent>",-5415,[2634],[0],2635]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",20,[[2,-5416,[2647],[0],2648]]],[1,"Seat_2.002",20,[[2,-5417,[2649],[0],2650]]],[1,"Seat_3.002",20,[[2,-5418,[2651],[0],2652]]],[1,"Seat_4.002",20,[[2,-5419,[2653],[0],2654]]],[1,"BANH XE.002",20,[[2,-5420,[2655],[0],2656]]],[1,"BANH XE.003",20,[[2,-5421,[2657],[0],2658]]],[1,"BANH XE.004",20,[[2,-5422,[2659],[0],2660]]],[1,"BANH XE.005",20,[[2,-5423,[2661],[0],2662]]],[1,"Car_Body_Top_color",1198,[[6,1,-5424,[2663,2664],[0],2665]]],[1,"Car_roof__Removable__color",298,[[2,-5425,[2666],[0],2667]]],[1,"kinh_a_2",298,[[2,-5426,[2668],[0],2669]]],[1,"kinh_a_1",298,[[2,-5427,[2670],[0],2671]]],[9,"Arrow",298,[[5,"Quad<ModelComponent>",-5428,[2672],[0],2673]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1199,[[6,1,-5429,[2674,2675],[0],2676]]],[1,"Car_roof__Removable__color",299,[[2,-5430,[2677],[0],2678]]],[1,"kinh_a_2",299,[[2,-5431,[2679],[0],2680]]],[1,"kinh_a_1",299,[[2,-5432,[2681],[0],2682]]],[9,"Arrow",299,[[5,"Quad<ModelComponent>",-5433,[2683],[0],2684]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1200,[[6,1,-5434,[2685,2686],[0],2687]]],[1,"Car_roof__Removable__color",664,[[2,-5435,[2688],[0],2689]]],[1,"kinh_a_2",664,[[2,-5436,[2690],[0],2691]]],[1,"kinh_a_1",664,[[2,-5437,[2692],[0],2693]]],[1,"Car_Body_Top_color",1201,[[6,1,-5438,[2694,2695],[0],2696]]],[1,"Car_roof__Removable__color",665,[[2,-5439,[2697],[0],2698]]],[1,"kinh_a_2",665,[[2,-5440,[2699],[0],2700]]],[1,"kinh_a_1",665,[[2,-5441,[2701],[0],2702]]],[1,"Car_Body_Top_color",1202,[[6,1,-5442,[2703,2704],[0],2705]]],[1,"Car_roof__Removable__color",666,[[2,-5443,[2706],[0],2707]]],[1,"kinh_a_2",666,[[2,-5444,[2708],[0],2709]]],[1,"kinh_a_1",666,[[2,-5445,[2710],[0],2711]]],[1,"Car_Body_Top_color",1203,[[6,1,-5446,[2712,2713],[0],2714]]],[1,"Car_roof__Removable__color",667,[[2,-5447,[2715],[0],2716]]],[1,"kinh_a_2",667,[[2,-5448,[2717],[0],2718]]],[1,"kinh_a_1",667,[[2,-5449,[2719],[0],2720]]],[1,"Car_Body_Top_color",1204,[[6,1,-5450,[2721,2722],[0],2723]]],[1,"Car_roof__Removable__color",668,[[2,-5451,[2724],[0],2725]]],[1,"kinh_a_2",668,[[2,-5452,[2726],[0],2727]]],[1,"kinh_a_1",668,[[2,-5453,[2728],[0],2729]]],[1,"Car_Body_Top_color",1205,[[6,1,-5454,[2730,2731],[0],2732]]],[1,"Car_roof__Removable__color",300,[[2,-5455,[2733],[0],2734]]],[1,"kinh_a_2",300,[[2,-5456,[2735],[0],2736]]],[1,"kinh_a_1",300,[[2,-5457,[2737],[0],2738]]],[9,"Arrow",300,[[5,"Quad<ModelComponent>",-5458,[2739],[0],2740]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1206,[[6,1,-5459,[2741,2742],[0],2743]]],[1,"Car_roof__Removable__color",301,[[2,-5460,[2744],[0],2745]]],[1,"kinh_a_2",301,[[2,-5461,[2746],[0],2747]]],[1,"kinh_a_1",301,[[2,-5462,[2748],[0],2749]]],[31,"Arrow",false,301,[[5,"Quad<ModelComponent>",-5463,[2750],[0],2751]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",21,[[2,-5464,[2763],[0],2764]]],[1,"Seat_2.002",21,[[2,-5465,[2765],[0],2766]]],[1,"Seat_3.002",21,[[2,-5466,[2767],[0],2768]]],[1,"Seat_4.002",21,[[2,-5467,[2769],[0],2770]]],[1,"BANH XE.002",21,[[2,-5468,[2771],[0],2772]]],[1,"BANH XE.003",21,[[2,-5469,[2773],[0],2774]]],[1,"BANH XE.004",21,[[2,-5470,[2775],[0],2776]]],[1,"BANH XE.005",21,[[2,-5471,[2777],[0],2778]]],[1,"Car_Body_Top_color",1213,[[6,1,-5472,[2779,2780],[0],2781]]],[1,"Car_roof__Removable__color",308,[[2,-5473,[2782],[0],2783]]],[1,"kinh_a_2",308,[[2,-5474,[2784],[0],2785]]],[1,"kinh_a_1",308,[[2,-5475,[2786],[0],2787]]],[9,"Arrow",308,[[5,"Quad<ModelComponent>",-5476,[2788],[0],2789]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1214,[[6,1,-5477,[2790,2791],[0],2792]]],[1,"Car_roof__Removable__color",309,[[2,-5478,[2793],[0],2794]]],[1,"kinh_a_2",309,[[2,-5479,[2795],[0],2796]]],[1,"kinh_a_1",309,[[2,-5480,[2797],[0],2798]]],[9,"Arrow",309,[[5,"Quad<ModelComponent>",-5481,[2799],[0],2800]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1215,[[6,1,-5482,[2801,2802],[0],2803]]],[1,"Car_roof__Removable__color",670,[[2,-5483,[2804],[0],2805]]],[1,"kinh_a_2",670,[[2,-5484,[2806],[0],2807]]],[1,"kinh_a_1",670,[[2,-5485,[2808],[0],2809]]],[1,"Car_Body_Top_color",1216,[[6,1,-5486,[2810,2811],[0],2812]]],[1,"Car_roof__Removable__color",671,[[2,-5487,[2813],[0],2814]]],[1,"kinh_a_2",671,[[2,-5488,[2815],[0],2816]]],[1,"kinh_a_1",671,[[2,-5489,[2817],[0],2818]]],[1,"Car_Body_Top_color",1217,[[6,1,-5490,[2819,2820],[0],2821]]],[1,"Car_roof__Removable__color",672,[[2,-5491,[2822],[0],2823]]],[1,"kinh_a_2",672,[[2,-5492,[2824],[0],2825]]],[1,"kinh_a_1",672,[[2,-5493,[2826],[0],2827]]],[1,"Car_Body_Top_color",1218,[[6,1,-5494,[2828,2829],[0],2830]]],[1,"Car_roof__Removable__color",673,[[2,-5495,[2831],[0],2832]]],[1,"kinh_a_2",673,[[2,-5496,[2833],[0],2834]]],[1,"kinh_a_1",673,[[2,-5497,[2835],[0],2836]]],[1,"Car_Body_Top_color",1219,[[6,1,-5498,[2837,2838],[0],2839]]],[1,"Car_roof__Removable__color",674,[[2,-5499,[2840],[0],2841]]],[1,"kinh_a_2",674,[[2,-5500,[2842],[0],2843]]],[1,"kinh_a_1",674,[[2,-5501,[2844],[0],2845]]],[1,"Car_Body_Top_color",1220,[[6,1,-5502,[2846,2847],[0],2848]]],[1,"Car_roof__Removable__color",310,[[2,-5503,[2849],[0],2850]]],[1,"kinh_a_2",310,[[2,-5504,[2851],[0],2852]]],[1,"kinh_a_1",310,[[2,-5505,[2853],[0],2854]]],[9,"Arrow",310,[[5,"Quad<ModelComponent>",-5506,[2855],[0],2856]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1221,[[6,1,-5507,[2857,2858],[0],2859]]],[1,"Car_roof__Removable__color",311,[[2,-5508,[2860],[0],2861]]],[1,"kinh_a_2",311,[[2,-5509,[2862],[0],2863]]],[1,"kinh_a_1",311,[[2,-5510,[2864],[0],2865]]],[31,"Arrow",false,311,[[5,"Quad<ModelComponent>",-5511,[2866],[0],2867]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",22,[[2,-5512,[2879],[0],2880]]],[1,"Seat_2.002",22,[[2,-5513,[2881],[0],2882]]],[1,"Seat_3.002",22,[[2,-5514,[2883],[0],2884]]],[1,"Seat_4.002",22,[[2,-5515,[2885],[0],2886]]],[1,"BANH XE.002",22,[[2,-5516,[2887],[0],2888]]],[1,"BANH XE.003",22,[[2,-5517,[2889],[0],2890]]],[1,"BANH XE.004",22,[[2,-5518,[2891],[0],2892]]],[1,"BANH XE.005",22,[[2,-5519,[2893],[0],2894]]],[1,"Car_Body_Top_color",1228,[[6,1,-5520,[2895,2896],[0],2897]]],[1,"Car_roof__Removable__color",318,[[2,-5521,[2898],[0],2899]]],[1,"kinh_a_2",318,[[2,-5522,[2900],[0],2901]]],[1,"kinh_a_1",318,[[2,-5523,[2902],[0],2903]]],[9,"Arrow",318,[[5,"Quad<ModelComponent>",-5524,[2904],[0],2905]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1229,[[6,1,-5525,[2906,2907],[0],2908]]],[1,"Car_roof__Removable__color",319,[[2,-5526,[2909],[0],2910]]],[1,"kinh_a_2",319,[[2,-5527,[2911],[0],2912]]],[1,"kinh_a_1",319,[[2,-5528,[2913],[0],2914]]],[9,"Arrow",319,[[5,"Quad<ModelComponent>",-5529,[2915],[0],2916]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1230,[[6,1,-5530,[2917,2918],[0],2919]]],[1,"Car_roof__Removable__color",676,[[2,-5531,[2920],[0],2921]]],[1,"kinh_a_2",676,[[2,-5532,[2922],[0],2923]]],[1,"kinh_a_1",676,[[2,-5533,[2924],[0],2925]]],[1,"Car_Body_Top_color",1231,[[6,1,-5534,[2926,2927],[0],2928]]],[1,"Car_roof__Removable__color",677,[[2,-5535,[2929],[0],2930]]],[1,"kinh_a_2",677,[[2,-5536,[2931],[0],2932]]],[1,"kinh_a_1",677,[[2,-5537,[2933],[0],2934]]],[1,"Car_Body_Top_color",1232,[[6,1,-5538,[2935,2936],[0],2937]]],[1,"Car_roof__Removable__color",678,[[2,-5539,[2938],[0],2939]]],[1,"kinh_a_2",678,[[2,-5540,[2940],[0],2941]]],[1,"kinh_a_1",678,[[2,-5541,[2942],[0],2943]]],[1,"Car_Body_Top_color",1233,[[6,1,-5542,[2944,2945],[0],2946]]],[1,"Car_roof__Removable__color",679,[[2,-5543,[2947],[0],2948]]],[1,"kinh_a_2",679,[[2,-5544,[2949],[0],2950]]],[1,"kinh_a_1",679,[[2,-5545,[2951],[0],2952]]],[1,"Car_Body_Top_color",1234,[[6,1,-5546,[2953,2954],[0],2955]]],[1,"Car_roof__Removable__color",680,[[2,-5547,[2956],[0],2957]]],[1,"kinh_a_2",680,[[2,-5548,[2958],[0],2959]]],[1,"kinh_a_1",680,[[2,-5549,[2960],[0],2961]]],[1,"Car_Body_Top_color",1235,[[6,1,-5550,[2962,2963],[0],2964]]],[1,"Car_roof__Removable__color",320,[[2,-5551,[2965],[0],2966]]],[1,"kinh_a_2",320,[[2,-5552,[2967],[0],2968]]],[1,"kinh_a_1",320,[[2,-5553,[2969],[0],2970]]],[9,"Arrow",320,[[5,"Quad<ModelComponent>",-5554,[2971],[0],2972]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1236,[[6,1,-5555,[2973,2974],[0],2975]]],[1,"Car_roof__Removable__color",321,[[2,-5556,[2976],[0],2977]]],[1,"kinh_a_2",321,[[2,-5557,[2978],[0],2979]]],[1,"kinh_a_1",321,[[2,-5558,[2980],[0],2981]]],[31,"Arrow",false,321,[[5,"Quad<ModelComponent>",-5559,[2982],[0],2983]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",23,[[2,-5560,[2995],[0],2996]]],[1,"Seat_2.002",23,[[2,-5561,[2997],[0],2998]]],[1,"Seat_3.002",23,[[2,-5562,[2999],[0],3000]]],[1,"Seat_4.002",23,[[2,-5563,[3001],[0],3002]]],[1,"BANH XE.002",23,[[2,-5564,[3003],[0],3004]]],[1,"BANH XE.003",23,[[2,-5565,[3005],[0],3006]]],[1,"BANH XE.004",23,[[2,-5566,[3007],[0],3008]]],[1,"BANH XE.005",23,[[2,-5567,[3009],[0],3010]]],[1,"Car_Body_Top_color",1243,[[6,1,-5568,[3011,3012],[0],3013]]],[1,"Car_roof__Removable__color",328,[[2,-5569,[3014],[0],3015]]],[1,"kinh_a_2",328,[[2,-5570,[3016],[0],3017]]],[1,"kinh_a_1",328,[[2,-5571,[3018],[0],3019]]],[9,"Arrow",328,[[5,"Quad<ModelComponent>",-5572,[3020],[0],3021]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1244,[[6,1,-5573,[3022,3023],[0],3024]]],[1,"Car_roof__Removable__color",329,[[2,-5574,[3025],[0],3026]]],[1,"kinh_a_2",329,[[2,-5575,[3027],[0],3028]]],[1,"kinh_a_1",329,[[2,-5576,[3029],[0],3030]]],[9,"Arrow",329,[[5,"Quad<ModelComponent>",-5577,[3031],[0],3032]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1245,[[6,1,-5578,[3033,3034],[0],3035]]],[1,"Car_roof__Removable__color",682,[[2,-5579,[3036],[0],3037]]],[1,"kinh_a_2",682,[[2,-5580,[3038],[0],3039]]],[1,"kinh_a_1",682,[[2,-5581,[3040],[0],3041]]],[1,"Car_Body_Top_color",1246,[[6,1,-5582,[3042,3043],[0],3044]]],[1,"Car_roof__Removable__color",683,[[2,-5583,[3045],[0],3046]]],[1,"kinh_a_2",683,[[2,-5584,[3047],[0],3048]]],[1,"kinh_a_1",683,[[2,-5585,[3049],[0],3050]]],[1,"Car_Body_Top_color",1247,[[6,1,-5586,[3051,3052],[0],3053]]],[1,"Car_roof__Removable__color",684,[[2,-5587,[3054],[0],3055]]],[1,"kinh_a_2",684,[[2,-5588,[3056],[0],3057]]],[1,"kinh_a_1",684,[[2,-5589,[3058],[0],3059]]],[1,"Car_Body_Top_color",1248,[[6,1,-5590,[3060,3061],[0],3062]]],[1,"Car_roof__Removable__color",685,[[2,-5591,[3063],[0],3064]]],[1,"kinh_a_2",685,[[2,-5592,[3065],[0],3066]]],[1,"kinh_a_1",685,[[2,-5593,[3067],[0],3068]]],[1,"Car_Body_Top_color",1249,[[6,1,-5594,[3069,3070],[0],3071]]],[1,"Car_roof__Removable__color",686,[[2,-5595,[3072],[0],3073]]],[1,"kinh_a_2",686,[[2,-5596,[3074],[0],3075]]],[1,"kinh_a_1",686,[[2,-5597,[3076],[0],3077]]],[1,"Car_Body_Top_color",1250,[[6,1,-5598,[3078,3079],[0],3080]]],[1,"Car_roof__Removable__color",330,[[2,-5599,[3081],[0],3082]]],[1,"kinh_a_2",330,[[2,-5600,[3083],[0],3084]]],[1,"kinh_a_1",330,[[2,-5601,[3085],[0],3086]]],[9,"Arrow",330,[[5,"Quad<ModelComponent>",-5602,[3087],[0],3088]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1251,[[6,1,-5603,[3089,3090],[0],3091]]],[1,"Car_roof__Removable__color",331,[[2,-5604,[3092],[0],3093]]],[1,"kinh_a_2",331,[[2,-5605,[3094],[0],3095]]],[1,"kinh_a_1",331,[[2,-5606,[3096],[0],3097]]],[31,"Arrow",false,331,[[5,"Quad<ModelComponent>",-5607,[3098],[0],3099]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",24,[[2,-5608,[3111],[0],3112]]],[1,"Seat_2.002",24,[[2,-5609,[3113],[0],3114]]],[1,"Seat_3.002",24,[[2,-5610,[3115],[0],3116]]],[1,"Seat_4.002",24,[[2,-5611,[3117],[0],3118]]],[1,"BANH XE.002",24,[[2,-5612,[3119],[0],3120]]],[1,"BANH XE.003",24,[[2,-5613,[3121],[0],3122]]],[1,"BANH XE.004",24,[[2,-5614,[3123],[0],3124]]],[1,"BANH XE.005",24,[[2,-5615,[3125],[0],3126]]],[1,"Car_Body_Top_color",1258,[[6,1,-5616,[3127,3128],[0],3129]]],[1,"Car_roof__Removable__color",338,[[2,-5617,[3130],[0],3131]]],[1,"kinh_a_2",338,[[2,-5618,[3132],[0],3133]]],[1,"kinh_a_1",338,[[2,-5619,[3134],[0],3135]]],[9,"Arrow",338,[[5,"Quad<ModelComponent>",-5620,[3136],[0],3137]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1259,[[6,1,-5621,[3138,3139],[0],3140]]],[1,"Car_roof__Removable__color",339,[[2,-5622,[3141],[0],3142]]],[1,"kinh_a_2",339,[[2,-5623,[3143],[0],3144]]],[1,"kinh_a_1",339,[[2,-5624,[3145],[0],3146]]],[9,"Arrow",339,[[5,"Quad<ModelComponent>",-5625,[3147],[0],3148]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1260,[[6,1,-5626,[3149,3150],[0],3151]]],[1,"Car_roof__Removable__color",688,[[2,-5627,[3152],[0],3153]]],[1,"kinh_a_2",688,[[2,-5628,[3154],[0],3155]]],[1,"kinh_a_1",688,[[2,-5629,[3156],[0],3157]]],[1,"Car_Body_Top_color",1261,[[6,1,-5630,[3158,3159],[0],3160]]],[1,"Car_roof__Removable__color",689,[[2,-5631,[3161],[0],3162]]],[1,"kinh_a_2",689,[[2,-5632,[3163],[0],3164]]],[1,"kinh_a_1",689,[[2,-5633,[3165],[0],3166]]],[1,"Car_Body_Top_color",1262,[[6,1,-5634,[3167,3168],[0],3169]]],[1,"Car_roof__Removable__color",690,[[2,-5635,[3170],[0],3171]]],[1,"kinh_a_2",690,[[2,-5636,[3172],[0],3173]]],[1,"kinh_a_1",690,[[2,-5637,[3174],[0],3175]]],[1,"Car_Body_Top_color",1263,[[6,1,-5638,[3176,3177],[0],3178]]],[1,"Car_roof__Removable__color",691,[[2,-5639,[3179],[0],3180]]],[1,"kinh_a_2",691,[[2,-5640,[3181],[0],3182]]],[1,"kinh_a_1",691,[[2,-5641,[3183],[0],3184]]],[1,"Car_Body_Top_color",1264,[[6,1,-5642,[3185,3186],[0],3187]]],[1,"Car_roof__Removable__color",692,[[2,-5643,[3188],[0],3189]]],[1,"kinh_a_2",692,[[2,-5644,[3190],[0],3191]]],[1,"kinh_a_1",692,[[2,-5645,[3192],[0],3193]]],[1,"Car_Body_Top_color",1265,[[6,1,-5646,[3194,3195],[0],3196]]],[1,"Car_roof__Removable__color",340,[[2,-5647,[3197],[0],3198]]],[1,"kinh_a_2",340,[[2,-5648,[3199],[0],3200]]],[1,"kinh_a_1",340,[[2,-5649,[3201],[0],3202]]],[9,"Arrow",340,[[5,"Quad<ModelComponent>",-5650,[3203],[0],3204]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1266,[[6,1,-5651,[3205,3206],[0],3207]]],[1,"Car_roof__Removable__color",341,[[2,-5652,[3208],[0],3209]]],[1,"kinh_a_2",341,[[2,-5653,[3210],[0],3211]]],[1,"kinh_a_1",341,[[2,-5654,[3212],[0],3213]]],[31,"Arrow",false,341,[[5,"Quad<ModelComponent>",-5655,[3214],[0],3215]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",25,[[2,-5656,[3227],[0],3228]]],[1,"Seat_2.002",25,[[2,-5657,[3229],[0],3230]]],[1,"Seat_3.002",25,[[2,-5658,[3231],[0],3232]]],[1,"Seat_4.002",25,[[2,-5659,[3233],[0],3234]]],[1,"BANH XE.002",25,[[2,-5660,[3235],[0],3236]]],[1,"BANH XE.003",25,[[2,-5661,[3237],[0],3238]]],[1,"BANH XE.004",25,[[2,-5662,[3239],[0],3240]]],[1,"BANH XE.005",25,[[2,-5663,[3241],[0],3242]]],[1,"Car_Body_Top_color",1273,[[6,1,-5664,[3243,3244],[0],3245]]],[1,"Car_roof__Removable__color",348,[[2,-5665,[3246],[0],3247]]],[1,"kinh_a_2",348,[[2,-5666,[3248],[0],3249]]],[1,"kinh_a_1",348,[[2,-5667,[3250],[0],3251]]],[9,"Arrow",348,[[5,"Quad<ModelComponent>",-5668,[3252],[0],3253]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1274,[[6,1,-5669,[3254,3255],[0],3256]]],[1,"Car_roof__Removable__color",349,[[2,-5670,[3257],[0],3258]]],[1,"kinh_a_2",349,[[2,-5671,[3259],[0],3260]]],[1,"kinh_a_1",349,[[2,-5672,[3261],[0],3262]]],[9,"Arrow",349,[[5,"Quad<ModelComponent>",-5673,[3263],[0],3264]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1275,[[6,1,-5674,[3265,3266],[0],3267]]],[1,"Car_roof__Removable__color",694,[[2,-5675,[3268],[0],3269]]],[1,"kinh_a_2",694,[[2,-5676,[3270],[0],3271]]],[1,"kinh_a_1",694,[[2,-5677,[3272],[0],3273]]],[1,"Car_Body_Top_color",1276,[[6,1,-5678,[3274,3275],[0],3276]]],[1,"Car_roof__Removable__color",695,[[2,-5679,[3277],[0],3278]]],[1,"kinh_a_2",695,[[2,-5680,[3279],[0],3280]]],[1,"kinh_a_1",695,[[2,-5681,[3281],[0],3282]]],[1,"Car_Body_Top_color",1277,[[6,1,-5682,[3283,3284],[0],3285]]],[1,"Car_roof__Removable__color",696,[[2,-5683,[3286],[0],3287]]],[1,"kinh_a_2",696,[[2,-5684,[3288],[0],3289]]],[1,"kinh_a_1",696,[[2,-5685,[3290],[0],3291]]],[1,"Car_Body_Top_color",1278,[[6,1,-5686,[3292,3293],[0],3294]]],[1,"Car_roof__Removable__color",697,[[2,-5687,[3295],[0],3296]]],[1,"kinh_a_2",697,[[2,-5688,[3297],[0],3298]]],[1,"kinh_a_1",697,[[2,-5689,[3299],[0],3300]]],[1,"Car_Body_Top_color",1279,[[6,1,-5690,[3301,3302],[0],3303]]],[1,"Car_roof__Removable__color",698,[[2,-5691,[3304],[0],3305]]],[1,"kinh_a_2",698,[[2,-5692,[3306],[0],3307]]],[1,"kinh_a_1",698,[[2,-5693,[3308],[0],3309]]],[1,"Car_Body_Top_color",1280,[[6,1,-5694,[3310,3311],[0],3312]]],[1,"Car_roof__Removable__color",350,[[2,-5695,[3313],[0],3314]]],[1,"kinh_a_2",350,[[2,-5696,[3315],[0],3316]]],[1,"kinh_a_1",350,[[2,-5697,[3317],[0],3318]]],[9,"Arrow",350,[[5,"Quad<ModelComponent>",-5698,[3319],[0],3320]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1281,[[6,1,-5699,[3321,3322],[0],3323]]],[1,"Car_roof__Removable__color",351,[[2,-5700,[3324],[0],3325]]],[1,"kinh_a_2",351,[[2,-5701,[3326],[0],3327]]],[1,"kinh_a_1",351,[[2,-5702,[3328],[0],3329]]],[31,"Arrow",false,351,[[5,"Quad<ModelComponent>",-5703,[3330],[0],3331]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",26,[[2,-5704,[3343],[0],3344]]],[1,"Seat_2.002",26,[[2,-5705,[3345],[0],3346]]],[1,"Seat_3.002",26,[[2,-5706,[3347],[0],3348]]],[1,"Seat_4.002",26,[[2,-5707,[3349],[0],3350]]],[1,"BANH XE.002",26,[[2,-5708,[3351],[0],3352]]],[1,"BANH XE.003",26,[[2,-5709,[3353],[0],3354]]],[1,"BANH XE.004",26,[[2,-5710,[3355],[0],3356]]],[1,"BANH XE.005",26,[[2,-5711,[3357],[0],3358]]],[1,"Car_Body_Top_color",1288,[[6,1,-5712,[3359,3360],[0],3361]]],[1,"Car_roof__Removable__color",358,[[2,-5713,[3362],[0],3363]]],[1,"kinh_a_2",358,[[2,-5714,[3364],[0],3365]]],[1,"kinh_a_1",358,[[2,-5715,[3366],[0],3367]]],[9,"Arrow",358,[[5,"Quad<ModelComponent>",-5716,[3368],[0],3369]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1289,[[6,1,-5717,[3370,3371],[0],3372]]],[1,"Car_roof__Removable__color",359,[[2,-5718,[3373],[0],3374]]],[1,"kinh_a_2",359,[[2,-5719,[3375],[0],3376]]],[1,"kinh_a_1",359,[[2,-5720,[3377],[0],3378]]],[9,"Arrow",359,[[5,"Quad<ModelComponent>",-5721,[3379],[0],3380]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1290,[[6,1,-5722,[3381,3382],[0],3383]]],[1,"Car_roof__Removable__color",700,[[2,-5723,[3384],[0],3385]]],[1,"kinh_a_2",700,[[2,-5724,[3386],[0],3387]]],[1,"kinh_a_1",700,[[2,-5725,[3388],[0],3389]]],[1,"Car_Body_Top_color",1291,[[6,1,-5726,[3390,3391],[0],3392]]],[1,"Car_roof__Removable__color",701,[[2,-5727,[3393],[0],3394]]],[1,"kinh_a_2",701,[[2,-5728,[3395],[0],3396]]],[1,"kinh_a_1",701,[[2,-5729,[3397],[0],3398]]],[1,"Car_Body_Top_color",1292,[[6,1,-5730,[3399,3400],[0],3401]]],[1,"Car_roof__Removable__color",702,[[2,-5731,[3402],[0],3403]]],[1,"kinh_a_2",702,[[2,-5732,[3404],[0],3405]]],[1,"kinh_a_1",702,[[2,-5733,[3406],[0],3407]]],[1,"Car_Body_Top_color",1293,[[6,1,-5734,[3408,3409],[0],3410]]],[1,"Car_roof__Removable__color",703,[[2,-5735,[3411],[0],3412]]],[1,"kinh_a_2",703,[[2,-5736,[3413],[0],3414]]],[1,"kinh_a_1",703,[[2,-5737,[3415],[0],3416]]],[1,"Car_Body_Top_color",1294,[[6,1,-5738,[3417,3418],[0],3419]]],[1,"Car_roof__Removable__color",704,[[2,-5739,[3420],[0],3421]]],[1,"kinh_a_2",704,[[2,-5740,[3422],[0],3423]]],[1,"kinh_a_1",704,[[2,-5741,[3424],[0],3425]]],[1,"Car_Body_Top_color",1295,[[6,1,-5742,[3426,3427],[0],3428]]],[1,"Car_roof__Removable__color",360,[[2,-5743,[3429],[0],3430]]],[1,"kinh_a_2",360,[[2,-5744,[3431],[0],3432]]],[1,"kinh_a_1",360,[[2,-5745,[3433],[0],3434]]],[9,"Arrow",360,[[5,"Quad<ModelComponent>",-5746,[3435],[0],3436]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1296,[[6,1,-5747,[3437,3438],[0],3439]]],[1,"Car_roof__Removable__color",361,[[2,-5748,[3440],[0],3441]]],[1,"kinh_a_2",361,[[2,-5749,[3442],[0],3443]]],[1,"kinh_a_1",361,[[2,-5750,[3444],[0],3445]]],[31,"Arrow",false,361,[[5,"Quad<ModelComponent>",-5751,[3446],[0],3447]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",27,[[2,-5752,[3459],[0],3460]]],[1,"Seat_2.002",27,[[2,-5753,[3461],[0],3462]]],[1,"Seat_3.002",27,[[2,-5754,[3463],[0],3464]]],[1,"Seat_4.002",27,[[2,-5755,[3465],[0],3466]]],[1,"BANH XE.002",27,[[2,-5756,[3467],[0],3468]]],[1,"BANH XE.003",27,[[2,-5757,[3469],[0],3470]]],[1,"BANH XE.004",27,[[2,-5758,[3471],[0],3472]]],[1,"BANH XE.005",27,[[2,-5759,[3473],[0],3474]]],[1,"Car_Body_Top_color",1303,[[6,1,-5760,[3475,3476],[0],3477]]],[1,"Car_roof__Removable__color",368,[[2,-5761,[3478],[0],3479]]],[1,"kinh_a_2",368,[[2,-5762,[3480],[0],3481]]],[1,"kinh_a_1",368,[[2,-5763,[3482],[0],3483]]],[9,"Arrow",368,[[5,"Quad<ModelComponent>",-5764,[3484],[0],3485]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1304,[[6,1,-5765,[3486,3487],[0],3488]]],[1,"Car_roof__Removable__color",369,[[2,-5766,[3489],[0],3490]]],[1,"kinh_a_2",369,[[2,-5767,[3491],[0],3492]]],[1,"kinh_a_1",369,[[2,-5768,[3493],[0],3494]]],[9,"Arrow",369,[[5,"Quad<ModelComponent>",-5769,[3495],[0],3496]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1305,[[6,1,-5770,[3497,3498],[0],3499]]],[1,"Car_roof__Removable__color",706,[[2,-5771,[3500],[0],3501]]],[1,"kinh_a_2",706,[[2,-5772,[3502],[0],3503]]],[1,"kinh_a_1",706,[[2,-5773,[3504],[0],3505]]],[1,"Car_Body_Top_color",1306,[[6,1,-5774,[3506,3507],[0],3508]]],[1,"Car_roof__Removable__color",707,[[2,-5775,[3509],[0],3510]]],[1,"kinh_a_2",707,[[2,-5776,[3511],[0],3512]]],[1,"kinh_a_1",707,[[2,-5777,[3513],[0],3514]]],[1,"Car_Body_Top_color",1307,[[6,1,-5778,[3515,3516],[0],3517]]],[1,"Car_roof__Removable__color",708,[[2,-5779,[3518],[0],3519]]],[1,"kinh_a_2",708,[[2,-5780,[3520],[0],3521]]],[1,"kinh_a_1",708,[[2,-5781,[3522],[0],3523]]],[1,"Car_Body_Top_color",1308,[[6,1,-5782,[3524,3525],[0],3526]]],[1,"Car_roof__Removable__color",709,[[2,-5783,[3527],[0],3528]]],[1,"kinh_a_2",709,[[2,-5784,[3529],[0],3530]]],[1,"kinh_a_1",709,[[2,-5785,[3531],[0],3532]]],[1,"Car_Body_Top_color",1309,[[6,1,-5786,[3533,3534],[0],3535]]],[1,"Car_roof__Removable__color",710,[[2,-5787,[3536],[0],3537]]],[1,"kinh_a_2",710,[[2,-5788,[3538],[0],3539]]],[1,"kinh_a_1",710,[[2,-5789,[3540],[0],3541]]],[1,"Car_Body_Top_color",1310,[[6,1,-5790,[3542,3543],[0],3544]]],[1,"Car_roof__Removable__color",370,[[2,-5791,[3545],[0],3546]]],[1,"kinh_a_2",370,[[2,-5792,[3547],[0],3548]]],[1,"kinh_a_1",370,[[2,-5793,[3549],[0],3550]]],[9,"Arrow",370,[[5,"Quad<ModelComponent>",-5794,[3551],[0],3552]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1311,[[6,1,-5795,[3553,3554],[0],3555]]],[1,"Car_roof__Removable__color",371,[[2,-5796,[3556],[0],3557]]],[1,"kinh_a_2",371,[[2,-5797,[3558],[0],3559]]],[1,"kinh_a_1",371,[[2,-5798,[3560],[0],3561]]],[31,"Arrow",false,371,[[5,"Quad<ModelComponent>",-5799,[3562],[0],3563]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",28,[[2,-5800,[3575],[0],3576]]],[1,"Seat_2.002",28,[[2,-5801,[3577],[0],3578]]],[1,"Seat_3.002",28,[[2,-5802,[3579],[0],3580]]],[1,"Seat_4.002",28,[[2,-5803,[3581],[0],3582]]],[1,"BANH XE.002",28,[[2,-5804,[3583],[0],3584]]],[1,"BANH XE.003",28,[[2,-5805,[3585],[0],3586]]],[1,"BANH XE.004",28,[[2,-5806,[3587],[0],3588]]],[1,"BANH XE.005",28,[[2,-5807,[3589],[0],3590]]],[1,"Car_Body_Top_color",1318,[[6,1,-5808,[3591,3592],[0],3593]]],[1,"Car_roof__Removable__color",378,[[2,-5809,[3594],[0],3595]]],[1,"kinh_a_2",378,[[2,-5810,[3596],[0],3597]]],[1,"kinh_a_1",378,[[2,-5811,[3598],[0],3599]]],[9,"Arrow",378,[[5,"Quad<ModelComponent>",-5812,[3600],[0],3601]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1319,[[6,1,-5813,[3602,3603],[0],3604]]],[1,"Car_roof__Removable__color",379,[[2,-5814,[3605],[0],3606]]],[1,"kinh_a_2",379,[[2,-5815,[3607],[0],3608]]],[1,"kinh_a_1",379,[[2,-5816,[3609],[0],3610]]],[9,"Arrow",379,[[5,"Quad<ModelComponent>",-5817,[3611],[0],3612]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1320,[[6,1,-5818,[3613,3614],[0],3615]]],[1,"Car_roof__Removable__color",712,[[2,-5819,[3616],[0],3617]]],[1,"kinh_a_2",712,[[2,-5820,[3618],[0],3619]]],[1,"kinh_a_1",712,[[2,-5821,[3620],[0],3621]]],[1,"Car_Body_Top_color",1321,[[6,1,-5822,[3622,3623],[0],3624]]],[1,"Car_roof__Removable__color",713,[[2,-5823,[3625],[0],3626]]],[1,"kinh_a_2",713,[[2,-5824,[3627],[0],3628]]],[1,"kinh_a_1",713,[[2,-5825,[3629],[0],3630]]],[1,"Car_Body_Top_color",1322,[[6,1,-5826,[3631,3632],[0],3633]]],[1,"Car_roof__Removable__color",714,[[2,-5827,[3634],[0],3635]]],[1,"kinh_a_2",714,[[2,-5828,[3636],[0],3637]]],[1,"kinh_a_1",714,[[2,-5829,[3638],[0],3639]]],[1,"Car_Body_Top_color",1323,[[6,1,-5830,[3640,3641],[0],3642]]],[1,"Car_roof__Removable__color",715,[[2,-5831,[3643],[0],3644]]],[1,"kinh_a_2",715,[[2,-5832,[3645],[0],3646]]],[1,"kinh_a_1",715,[[2,-5833,[3647],[0],3648]]],[1,"Car_Body_Top_color",1324,[[6,1,-5834,[3649,3650],[0],3651]]],[1,"Car_roof__Removable__color",716,[[2,-5835,[3652],[0],3653]]],[1,"kinh_a_2",716,[[2,-5836,[3654],[0],3655]]],[1,"kinh_a_1",716,[[2,-5837,[3656],[0],3657]]],[1,"Car_Body_Top_color",1325,[[6,1,-5838,[3658,3659],[0],3660]]],[1,"Car_roof__Removable__color",380,[[2,-5839,[3661],[0],3662]]],[1,"kinh_a_2",380,[[2,-5840,[3663],[0],3664]]],[1,"kinh_a_1",380,[[2,-5841,[3665],[0],3666]]],[9,"Arrow",380,[[5,"Quad<ModelComponent>",-5842,[3667],[0],3668]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1326,[[6,1,-5843,[3669,3670],[0],3671]]],[1,"Car_roof__Removable__color",381,[[2,-5844,[3672],[0],3673]]],[1,"kinh_a_2",381,[[2,-5845,[3674],[0],3675]]],[1,"kinh_a_1",381,[[2,-5846,[3676],[0],3677]]],[31,"Arrow",false,381,[[5,"Quad<ModelComponent>",-5847,[3678],[0],3679]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",29,[[2,-5848,[3691],[0],3692]]],[1,"Seat_2.002",29,[[2,-5849,[3693],[0],3694]]],[1,"Seat_3.002",29,[[2,-5850,[3695],[0],3696]]],[1,"Seat_4.002",29,[[2,-5851,[3697],[0],3698]]],[1,"BANH XE.002",29,[[2,-5852,[3699],[0],3700]]],[1,"BANH XE.003",29,[[2,-5853,[3701],[0],3702]]],[1,"BANH XE.004",29,[[2,-5854,[3703],[0],3704]]],[1,"BANH XE.005",29,[[2,-5855,[3705],[0],3706]]],[1,"Car_Body_Top_color",1333,[[6,1,-5856,[3707,3708],[0],3709]]],[1,"Car_roof__Removable__color",388,[[2,-5857,[3710],[0],3711]]],[1,"kinh_a_2",388,[[2,-5858,[3712],[0],3713]]],[1,"kinh_a_1",388,[[2,-5859,[3714],[0],3715]]],[9,"Arrow",388,[[5,"Quad<ModelComponent>",-5860,[3716],[0],3717]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1334,[[6,1,-5861,[3718,3719],[0],3720]]],[1,"Car_roof__Removable__color",389,[[2,-5862,[3721],[0],3722]]],[1,"kinh_a_2",389,[[2,-5863,[3723],[0],3724]]],[1,"kinh_a_1",389,[[2,-5864,[3725],[0],3726]]],[9,"Arrow",389,[[5,"Quad<ModelComponent>",-5865,[3727],[0],3728]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1335,[[6,1,-5866,[3729,3730],[0],3731]]],[1,"Car_roof__Removable__color",718,[[2,-5867,[3732],[0],3733]]],[1,"kinh_a_2",718,[[2,-5868,[3734],[0],3735]]],[1,"kinh_a_1",718,[[2,-5869,[3736],[0],3737]]],[1,"Car_Body_Top_color",1336,[[6,1,-5870,[3738,3739],[0],3740]]],[1,"Car_roof__Removable__color",719,[[2,-5871,[3741],[0],3742]]],[1,"kinh_a_2",719,[[2,-5872,[3743],[0],3744]]],[1,"kinh_a_1",719,[[2,-5873,[3745],[0],3746]]],[1,"Car_Body_Top_color",1337,[[6,1,-5874,[3747,3748],[0],3749]]],[1,"Car_roof__Removable__color",720,[[2,-5875,[3750],[0],3751]]],[1,"kinh_a_2",720,[[2,-5876,[3752],[0],3753]]],[1,"kinh_a_1",720,[[2,-5877,[3754],[0],3755]]],[1,"Car_Body_Top_color",1338,[[6,1,-5878,[3756,3757],[0],3758]]],[1,"Car_roof__Removable__color",721,[[2,-5879,[3759],[0],3760]]],[1,"kinh_a_2",721,[[2,-5880,[3761],[0],3762]]],[1,"kinh_a_1",721,[[2,-5881,[3763],[0],3764]]],[1,"Car_Body_Top_color",1339,[[6,1,-5882,[3765,3766],[0],3767]]],[1,"Car_roof__Removable__color",722,[[2,-5883,[3768],[0],3769]]],[1,"kinh_a_2",722,[[2,-5884,[3770],[0],3771]]],[1,"kinh_a_1",722,[[2,-5885,[3772],[0],3773]]],[1,"Car_Body_Top_color",1340,[[6,1,-5886,[3774,3775],[0],3776]]],[1,"Car_roof__Removable__color",390,[[2,-5887,[3777],[0],3778]]],[1,"kinh_a_2",390,[[2,-5888,[3779],[0],3780]]],[1,"kinh_a_1",390,[[2,-5889,[3781],[0],3782]]],[9,"Arrow",390,[[5,"Quad<ModelComponent>",-5890,[3783],[0],3784]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1341,[[6,1,-5891,[3785,3786],[0],3787]]],[1,"Car_roof__Removable__color",391,[[2,-5892,[3788],[0],3789]]],[1,"kinh_a_2",391,[[2,-5893,[3790],[0],3791]]],[1,"kinh_a_1",391,[[2,-5894,[3792],[0],3793]]],[31,"Arrow",false,391,[[5,"Quad<ModelComponent>",-5895,[3794],[0],3795]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",30,[[2,-5896,[3807],[0],3808]]],[1,"Seat_2.002",30,[[2,-5897,[3809],[0],3810]]],[1,"Seat_3.002",30,[[2,-5898,[3811],[0],3812]]],[1,"Seat_4.002",30,[[2,-5899,[3813],[0],3814]]],[1,"BANH XE.002",30,[[2,-5900,[3815],[0],3816]]],[1,"BANH XE.003",30,[[2,-5901,[3817],[0],3818]]],[1,"BANH XE.004",30,[[2,-5902,[3819],[0],3820]]],[1,"BANH XE.005",30,[[2,-5903,[3821],[0],3822]]],[1,"Car_Body_Top_color",1348,[[6,1,-5904,[3823,3824],[0],3825]]],[1,"Car_roof__Removable__color",398,[[2,-5905,[3826],[0],3827]]],[1,"kinh_a_2",398,[[2,-5906,[3828],[0],3829]]],[1,"kinh_a_1",398,[[2,-5907,[3830],[0],3831]]],[9,"Arrow",398,[[5,"Quad<ModelComponent>",-5908,[3832],[0],3833]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1349,[[6,1,-5909,[3834,3835],[0],3836]]],[1,"Car_roof__Removable__color",399,[[2,-5910,[3837],[0],3838]]],[1,"kinh_a_2",399,[[2,-5911,[3839],[0],3840]]],[1,"kinh_a_1",399,[[2,-5912,[3841],[0],3842]]],[9,"Arrow",399,[[5,"Quad<ModelComponent>",-5913,[3843],[0],3844]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1350,[[6,1,-5914,[3845,3846],[0],3847]]],[1,"Car_roof__Removable__color",724,[[2,-5915,[3848],[0],3849]]],[1,"kinh_a_2",724,[[2,-5916,[3850],[0],3851]]],[1,"kinh_a_1",724,[[2,-5917,[3852],[0],3853]]],[1,"Car_Body_Top_color",1351,[[6,1,-5918,[3854,3855],[0],3856]]],[1,"Car_roof__Removable__color",725,[[2,-5919,[3857],[0],3858]]],[1,"kinh_a_2",725,[[2,-5920,[3859],[0],3860]]],[1,"kinh_a_1",725,[[2,-5921,[3861],[0],3862]]],[1,"Car_Body_Top_color",1352,[[6,1,-5922,[3863,3864],[0],3865]]],[1,"Car_roof__Removable__color",726,[[2,-5923,[3866],[0],3867]]],[1,"kinh_a_2",726,[[2,-5924,[3868],[0],3869]]],[1,"kinh_a_1",726,[[2,-5925,[3870],[0],3871]]],[1,"Car_Body_Top_color",1353,[[6,1,-5926,[3872,3873],[0],3874]]],[1,"Car_roof__Removable__color",727,[[2,-5927,[3875],[0],3876]]],[1,"kinh_a_2",727,[[2,-5928,[3877],[0],3878]]],[1,"kinh_a_1",727,[[2,-5929,[3879],[0],3880]]],[1,"Car_Body_Top_color",1354,[[6,1,-5930,[3881,3882],[0],3883]]],[1,"Car_roof__Removable__color",728,[[2,-5931,[3884],[0],3885]]],[1,"kinh_a_2",728,[[2,-5932,[3886],[0],3887]]],[1,"kinh_a_1",728,[[2,-5933,[3888],[0],3889]]],[1,"Car_Body_Top_color",1355,[[6,1,-5934,[3890,3891],[0],3892]]],[1,"Car_roof__Removable__color",400,[[2,-5935,[3893],[0],3894]]],[1,"kinh_a_2",400,[[2,-5936,[3895],[0],3896]]],[1,"kinh_a_1",400,[[2,-5937,[3897],[0],3898]]],[9,"Arrow",400,[[5,"Quad<ModelComponent>",-5938,[3899],[0],3900]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1356,[[6,1,-5939,[3901,3902],[0],3903]]],[1,"Car_roof__Removable__color",401,[[2,-5940,[3904],[0],3905]]],[1,"kinh_a_2",401,[[2,-5941,[3906],[0],3907]]],[1,"kinh_a_1",401,[[2,-5942,[3908],[0],3909]]],[31,"Arrow",false,401,[[5,"Quad<ModelComponent>",-5943,[3910],[0],3911]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",31,[[2,-5944,[3923],[0],3924]]],[1,"Seat_2.002",31,[[2,-5945,[3925],[0],3926]]],[1,"Seat_3.002",31,[[2,-5946,[3927],[0],3928]]],[1,"Seat_4.002",31,[[2,-5947,[3929],[0],3930]]],[1,"BANH XE.002",31,[[2,-5948,[3931],[0],3932]]],[1,"BANH XE.003",31,[[2,-5949,[3933],[0],3934]]],[1,"BANH XE.004",31,[[2,-5950,[3935],[0],3936]]],[1,"BANH XE.005",31,[[2,-5951,[3937],[0],3938]]],[1,"Car_Body_Top_color",1363,[[6,1,-5952,[3939,3940],[0],3941]]],[1,"Car_roof__Removable__color",408,[[2,-5953,[3942],[0],3943]]],[1,"kinh_a_2",408,[[2,-5954,[3944],[0],3945]]],[1,"kinh_a_1",408,[[2,-5955,[3946],[0],3947]]],[9,"Arrow",408,[[5,"Quad<ModelComponent>",-5956,[3948],[0],3949]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1364,[[6,1,-5957,[3950,3951],[0],3952]]],[1,"Car_roof__Removable__color",409,[[2,-5958,[3953],[0],3954]]],[1,"kinh_a_2",409,[[2,-5959,[3955],[0],3956]]],[1,"kinh_a_1",409,[[2,-5960,[3957],[0],3958]]],[9,"Arrow",409,[[5,"Quad<ModelComponent>",-5961,[3959],[0],3960]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1365,[[6,1,-5962,[3961,3962],[0],3963]]],[1,"Car_roof__Removable__color",730,[[2,-5963,[3964],[0],3965]]],[1,"kinh_a_2",730,[[2,-5964,[3966],[0],3967]]],[1,"kinh_a_1",730,[[2,-5965,[3968],[0],3969]]],[1,"Car_Body_Top_color",1366,[[6,1,-5966,[3970,3971],[0],3972]]],[1,"Car_roof__Removable__color",731,[[2,-5967,[3973],[0],3974]]],[1,"kinh_a_2",731,[[2,-5968,[3975],[0],3976]]],[1,"kinh_a_1",731,[[2,-5969,[3977],[0],3978]]],[1,"Car_Body_Top_color",1367,[[6,1,-5970,[3979,3980],[0],3981]]],[1,"Car_roof__Removable__color",732,[[2,-5971,[3982],[0],3983]]],[1,"kinh_a_2",732,[[2,-5972,[3984],[0],3985]]],[1,"kinh_a_1",732,[[2,-5973,[3986],[0],3987]]],[1,"Car_Body_Top_color",1368,[[6,1,-5974,[3988,3989],[0],3990]]],[1,"Car_roof__Removable__color",733,[[2,-5975,[3991],[0],3992]]],[1,"kinh_a_2",733,[[2,-5976,[3993],[0],3994]]],[1,"kinh_a_1",733,[[2,-5977,[3995],[0],3996]]],[1,"Car_Body_Top_color",1369,[[6,1,-5978,[3997,3998],[0],3999]]],[1,"Car_roof__Removable__color",734,[[2,-5979,[4000],[0],4001]]],[1,"kinh_a_2",734,[[2,-5980,[4002],[0],4003]]],[1,"kinh_a_1",734,[[2,-5981,[4004],[0],4005]]],[1,"Car_Body_Top_color",1370,[[6,1,-5982,[4006,4007],[0],4008]]],[1,"Car_roof__Removable__color",410,[[2,-5983,[4009],[0],4010]]],[1,"kinh_a_2",410,[[2,-5984,[4011],[0],4012]]],[1,"kinh_a_1",410,[[2,-5985,[4013],[0],4014]]],[9,"Arrow",410,[[5,"Quad<ModelComponent>",-5986,[4015],[0],4016]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1371,[[6,1,-5987,[4017,4018],[0],4019]]],[1,"Car_roof__Removable__color",411,[[2,-5988,[4020],[0],4021]]],[1,"kinh_a_2",411,[[2,-5989,[4022],[0],4023]]],[1,"kinh_a_1",411,[[2,-5990,[4024],[0],4025]]],[31,"Arrow",false,411,[[5,"Quad<ModelComponent>",-5991,[4026],[0],4027]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",32,[[2,-5992,[4039],[0],4040]]],[1,"Seat_2.002",32,[[2,-5993,[4041],[0],4042]]],[1,"Seat_3.002",32,[[2,-5994,[4043],[0],4044]]],[1,"Seat_4.002",32,[[2,-5995,[4045],[0],4046]]],[1,"BANH XE.002",32,[[2,-5996,[4047],[0],4048]]],[1,"BANH XE.003",32,[[2,-5997,[4049],[0],4050]]],[1,"BANH XE.004",32,[[2,-5998,[4051],[0],4052]]],[1,"BANH XE.005",32,[[2,-5999,[4053],[0],4054]]],[1,"Car_Body_Top_color",1378,[[6,1,-6000,[4055,4056],[0],4057]]],[1,"Car_roof__Removable__color",418,[[2,-6001,[4058],[0],4059]]],[1,"kinh_a_2",418,[[2,-6002,[4060],[0],4061]]],[1,"kinh_a_1",418,[[2,-6003,[4062],[0],4063]]],[9,"Arrow",418,[[5,"Quad<ModelComponent>",-6004,[4064],[0],4065]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1379,[[6,1,-6005,[4066,4067],[0],4068]]],[1,"Car_roof__Removable__color",419,[[2,-6006,[4069],[0],4070]]],[1,"kinh_a_2",419,[[2,-6007,[4071],[0],4072]]],[1,"kinh_a_1",419,[[2,-6008,[4073],[0],4074]]],[9,"Arrow",419,[[5,"Quad<ModelComponent>",-6009,[4075],[0],4076]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1380,[[6,1,-6010,[4077,4078],[0],4079]]],[1,"Car_roof__Removable__color",736,[[2,-6011,[4080],[0],4081]]],[1,"kinh_a_2",736,[[2,-6012,[4082],[0],4083]]],[1,"kinh_a_1",736,[[2,-6013,[4084],[0],4085]]],[1,"Car_Body_Top_color",1381,[[6,1,-6014,[4086,4087],[0],4088]]],[1,"Car_roof__Removable__color",737,[[2,-6015,[4089],[0],4090]]],[1,"kinh_a_2",737,[[2,-6016,[4091],[0],4092]]],[1,"kinh_a_1",737,[[2,-6017,[4093],[0],4094]]],[1,"Car_Body_Top_color",1382,[[6,1,-6018,[4095,4096],[0],4097]]],[1,"Car_roof__Removable__color",738,[[2,-6019,[4098],[0],4099]]],[1,"kinh_a_2",738,[[2,-6020,[4100],[0],4101]]],[1,"kinh_a_1",738,[[2,-6021,[4102],[0],4103]]],[1,"Car_Body_Top_color",1383,[[6,1,-6022,[4104,4105],[0],4106]]],[1,"Car_roof__Removable__color",739,[[2,-6023,[4107],[0],4108]]],[1,"kinh_a_2",739,[[2,-6024,[4109],[0],4110]]],[1,"kinh_a_1",739,[[2,-6025,[4111],[0],4112]]],[1,"Car_Body_Top_color",1384,[[6,1,-6026,[4113,4114],[0],4115]]],[1,"Car_roof__Removable__color",740,[[2,-6027,[4116],[0],4117]]],[1,"kinh_a_2",740,[[2,-6028,[4118],[0],4119]]],[1,"kinh_a_1",740,[[2,-6029,[4120],[0],4121]]],[1,"Car_Body_Top_color",1385,[[6,1,-6030,[4122,4123],[0],4124]]],[1,"Car_roof__Removable__color",420,[[2,-6031,[4125],[0],4126]]],[1,"kinh_a_2",420,[[2,-6032,[4127],[0],4128]]],[1,"kinh_a_1",420,[[2,-6033,[4129],[0],4130]]],[9,"Arrow",420,[[5,"Quad<ModelComponent>",-6034,[4131],[0],4132]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1386,[[6,1,-6035,[4133,4134],[0],4135]]],[1,"Car_roof__Removable__color",421,[[2,-6036,[4136],[0],4137]]],[1,"kinh_a_2",421,[[2,-6037,[4138],[0],4139]]],[1,"kinh_a_1",421,[[2,-6038,[4140],[0],4141]]],[31,"Arrow",false,421,[[5,"Quad<ModelComponent>",-6039,[4142],[0],4143]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",33,[[2,-6040,[4155],[0],4156]]],[1,"Seat_2.002",33,[[2,-6041,[4157],[0],4158]]],[1,"Seat_3.002",33,[[2,-6042,[4159],[0],4160]]],[1,"Seat_4.002",33,[[2,-6043,[4161],[0],4162]]],[1,"BANH XE.002",33,[[2,-6044,[4163],[0],4164]]],[1,"BANH XE.003",33,[[2,-6045,[4165],[0],4166]]],[1,"BANH XE.004",33,[[2,-6046,[4167],[0],4168]]],[1,"BANH XE.005",33,[[2,-6047,[4169],[0],4170]]],[1,"Car_Body_Top_color",1393,[[6,1,-6048,[4171,4172],[0],4173]]],[1,"Car_roof__Removable__color",428,[[2,-6049,[4174],[0],4175]]],[1,"kinh_a_2",428,[[2,-6050,[4176],[0],4177]]],[1,"kinh_a_1",428,[[2,-6051,[4178],[0],4179]]],[9,"Arrow",428,[[5,"Quad<ModelComponent>",-6052,[4180],[0],4181]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1394,[[6,1,-6053,[4182,4183],[0],4184]]],[1,"Car_roof__Removable__color",429,[[2,-6054,[4185],[0],4186]]],[1,"kinh_a_2",429,[[2,-6055,[4187],[0],4188]]],[1,"kinh_a_1",429,[[2,-6056,[4189],[0],4190]]],[9,"Arrow",429,[[5,"Quad<ModelComponent>",-6057,[4191],[0],4192]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1395,[[6,1,-6058,[4193,4194],[0],4195]]],[1,"Car_roof__Removable__color",742,[[2,-6059,[4196],[0],4197]]],[1,"kinh_a_2",742,[[2,-6060,[4198],[0],4199]]],[1,"kinh_a_1",742,[[2,-6061,[4200],[0],4201]]],[1,"Car_Body_Top_color",1396,[[6,1,-6062,[4202,4203],[0],4204]]],[1,"Car_roof__Removable__color",743,[[2,-6063,[4205],[0],4206]]],[1,"kinh_a_2",743,[[2,-6064,[4207],[0],4208]]],[1,"kinh_a_1",743,[[2,-6065,[4209],[0],4210]]],[1,"Car_Body_Top_color",1397,[[6,1,-6066,[4211,4212],[0],4213]]],[1,"Car_roof__Removable__color",744,[[2,-6067,[4214],[0],4215]]],[1,"kinh_a_2",744,[[2,-6068,[4216],[0],4217]]],[1,"kinh_a_1",744,[[2,-6069,[4218],[0],4219]]],[1,"Car_Body_Top_color",1398,[[6,1,-6070,[4220,4221],[0],4222]]],[1,"Car_roof__Removable__color",745,[[2,-6071,[4223],[0],4224]]],[1,"kinh_a_2",745,[[2,-6072,[4225],[0],4226]]],[1,"kinh_a_1",745,[[2,-6073,[4227],[0],4228]]],[1,"Car_Body_Top_color",1399,[[6,1,-6074,[4229,4230],[0],4231]]],[1,"Car_roof__Removable__color",746,[[2,-6075,[4232],[0],4233]]],[1,"kinh_a_2",746,[[2,-6076,[4234],[0],4235]]],[1,"kinh_a_1",746,[[2,-6077,[4236],[0],4237]]],[1,"Car_Body_Top_color",1400,[[6,1,-6078,[4238,4239],[0],4240]]],[1,"Car_roof__Removable__color",430,[[2,-6079,[4241],[0],4242]]],[1,"kinh_a_2",430,[[2,-6080,[4243],[0],4244]]],[1,"kinh_a_1",430,[[2,-6081,[4245],[0],4246]]],[9,"Arrow",430,[[5,"Quad<ModelComponent>",-6082,[4247],[0],4248]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1401,[[6,1,-6083,[4249,4250],[0],4251]]],[1,"Car_roof__Removable__color",431,[[2,-6084,[4252],[0],4253]]],[1,"kinh_a_2",431,[[2,-6085,[4254],[0],4255]]],[1,"kinh_a_1",431,[[2,-6086,[4256],[0],4257]]],[31,"Arrow",false,431,[[5,"Quad<ModelComponent>",-6087,[4258],[0],4259]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",34,[[2,-6088,[4271],[0],4272]]],[1,"Seat_2.002",34,[[2,-6089,[4273],[0],4274]]],[1,"Seat_3.002",34,[[2,-6090,[4275],[0],4276]]],[1,"Seat_4.002",34,[[2,-6091,[4277],[0],4278]]],[1,"BANH XE.002",34,[[2,-6092,[4279],[0],4280]]],[1,"BANH XE.003",34,[[2,-6093,[4281],[0],4282]]],[1,"BANH XE.004",34,[[2,-6094,[4283],[0],4284]]],[1,"BANH XE.005",34,[[2,-6095,[4285],[0],4286]]],[1,"Car_Body_Top_color",1408,[[6,1,-6096,[4287,4288],[0],4289]]],[1,"Car_roof__Removable__color",438,[[2,-6097,[4290],[0],4291]]],[1,"kinh_a_2",438,[[2,-6098,[4292],[0],4293]]],[1,"kinh_a_1",438,[[2,-6099,[4294],[0],4295]]],[9,"Arrow",438,[[5,"Quad<ModelComponent>",-6100,[4296],[0],4297]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1409,[[6,1,-6101,[4298,4299],[0],4300]]],[1,"Car_roof__Removable__color",439,[[2,-6102,[4301],[0],4302]]],[1,"kinh_a_2",439,[[2,-6103,[4303],[0],4304]]],[1,"kinh_a_1",439,[[2,-6104,[4305],[0],4306]]],[9,"Arrow",439,[[5,"Quad<ModelComponent>",-6105,[4307],[0],4308]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1410,[[6,1,-6106,[4309,4310],[0],4311]]],[1,"Car_roof__Removable__color",748,[[2,-6107,[4312],[0],4313]]],[1,"kinh_a_2",748,[[2,-6108,[4314],[0],4315]]],[1,"kinh_a_1",748,[[2,-6109,[4316],[0],4317]]],[1,"Car_Body_Top_color",1411,[[6,1,-6110,[4318,4319],[0],4320]]],[1,"Car_roof__Removable__color",749,[[2,-6111,[4321],[0],4322]]],[1,"kinh_a_2",749,[[2,-6112,[4323],[0],4324]]],[1,"kinh_a_1",749,[[2,-6113,[4325],[0],4326]]],[1,"Car_Body_Top_color",1412,[[6,1,-6114,[4327,4328],[0],4329]]],[1,"Car_roof__Removable__color",750,[[2,-6115,[4330],[0],4331]]],[1,"kinh_a_2",750,[[2,-6116,[4332],[0],4333]]],[1,"kinh_a_1",750,[[2,-6117,[4334],[0],4335]]],[1,"Car_Body_Top_color",1413,[[6,1,-6118,[4336,4337],[0],4338]]],[1,"Car_roof__Removable__color",751,[[2,-6119,[4339],[0],4340]]],[1,"kinh_a_2",751,[[2,-6120,[4341],[0],4342]]],[1,"kinh_a_1",751,[[2,-6121,[4343],[0],4344]]],[1,"Car_Body_Top_color",1414,[[6,1,-6122,[4345,4346],[0],4347]]],[1,"Car_roof__Removable__color",752,[[2,-6123,[4348],[0],4349]]],[1,"kinh_a_2",752,[[2,-6124,[4350],[0],4351]]],[1,"kinh_a_1",752,[[2,-6125,[4352],[0],4353]]],[1,"Car_Body_Top_color",1415,[[6,1,-6126,[4354,4355],[0],4356]]],[1,"Car_roof__Removable__color",440,[[2,-6127,[4357],[0],4358]]],[1,"kinh_a_2",440,[[2,-6128,[4359],[0],4360]]],[1,"kinh_a_1",440,[[2,-6129,[4361],[0],4362]]],[9,"Arrow",440,[[5,"Quad<ModelComponent>",-6130,[4363],[0],4364]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1416,[[6,1,-6131,[4365,4366],[0],4367]]],[1,"Car_roof__Removable__color",441,[[2,-6132,[4368],[0],4369]]],[1,"kinh_a_2",441,[[2,-6133,[4370],[0],4371]]],[1,"kinh_a_1",441,[[2,-6134,[4372],[0],4373]]],[31,"Arrow",false,441,[[5,"Quad<ModelComponent>",-6135,[4374],[0],4375]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",35,[[2,-6136,[4387],[0],4388]]],[1,"Seat_2.002",35,[[2,-6137,[4389],[0],4390]]],[1,"Seat_3.002",35,[[2,-6138,[4391],[0],4392]]],[1,"Seat_4.002",35,[[2,-6139,[4393],[0],4394]]],[1,"BANH XE.002",35,[[2,-6140,[4395],[0],4396]]],[1,"BANH XE.003",35,[[2,-6141,[4397],[0],4398]]],[1,"BANH XE.004",35,[[2,-6142,[4399],[0],4400]]],[1,"BANH XE.005",35,[[2,-6143,[4401],[0],4402]]],[1,"Car_Body_Top_color",1423,[[6,1,-6144,[4403,4404],[0],4405]]],[1,"Car_roof__Removable__color",448,[[2,-6145,[4406],[0],4407]]],[1,"kinh_a_2",448,[[2,-6146,[4408],[0],4409]]],[1,"kinh_a_1",448,[[2,-6147,[4410],[0],4411]]],[9,"Arrow",448,[[5,"Quad<ModelComponent>",-6148,[4412],[0],4413]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1424,[[6,1,-6149,[4414,4415],[0],4416]]],[1,"Car_roof__Removable__color",449,[[2,-6150,[4417],[0],4418]]],[1,"kinh_a_2",449,[[2,-6151,[4419],[0],4420]]],[1,"kinh_a_1",449,[[2,-6152,[4421],[0],4422]]],[9,"Arrow",449,[[5,"Quad<ModelComponent>",-6153,[4423],[0],4424]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1425,[[6,1,-6154,[4425,4426],[0],4427]]],[1,"Car_roof__Removable__color",754,[[2,-6155,[4428],[0],4429]]],[1,"kinh_a_2",754,[[2,-6156,[4430],[0],4431]]],[1,"kinh_a_1",754,[[2,-6157,[4432],[0],4433]]],[1,"Car_Body_Top_color",1426,[[6,1,-6158,[4434,4435],[0],4436]]],[1,"Car_roof__Removable__color",755,[[2,-6159,[4437],[0],4438]]],[1,"kinh_a_2",755,[[2,-6160,[4439],[0],4440]]],[1,"kinh_a_1",755,[[2,-6161,[4441],[0],4442]]],[1,"Car_Body_Top_color",1427,[[6,1,-6162,[4443,4444],[0],4445]]],[1,"Car_roof__Removable__color",756,[[2,-6163,[4446],[0],4447]]],[1,"kinh_a_2",756,[[2,-6164,[4448],[0],4449]]],[1,"kinh_a_1",756,[[2,-6165,[4450],[0],4451]]],[1,"Car_Body_Top_color",1428,[[6,1,-6166,[4452,4453],[0],4454]]],[1,"Car_roof__Removable__color",757,[[2,-6167,[4455],[0],4456]]],[1,"kinh_a_2",757,[[2,-6168,[4457],[0],4458]]],[1,"kinh_a_1",757,[[2,-6169,[4459],[0],4460]]],[1,"Car_Body_Top_color",1429,[[6,1,-6170,[4461,4462],[0],4463]]],[1,"Car_roof__Removable__color",758,[[2,-6171,[4464],[0],4465]]],[1,"kinh_a_2",758,[[2,-6172,[4466],[0],4467]]],[1,"kinh_a_1",758,[[2,-6173,[4468],[0],4469]]],[1,"Car_Body_Top_color",1430,[[6,1,-6174,[4470,4471],[0],4472]]],[1,"Car_roof__Removable__color",450,[[2,-6175,[4473],[0],4474]]],[1,"kinh_a_2",450,[[2,-6176,[4475],[0],4476]]],[1,"kinh_a_1",450,[[2,-6177,[4477],[0],4478]]],[9,"Arrow",450,[[5,"Quad<ModelComponent>",-6178,[4479],[0],4480]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1431,[[6,1,-6179,[4481,4482],[0],4483]]],[1,"Car_roof__Removable__color",451,[[2,-6180,[4484],[0],4485]]],[1,"kinh_a_2",451,[[2,-6181,[4486],[0],4487]]],[1,"kinh_a_1",451,[[2,-6182,[4488],[0],4489]]],[31,"Arrow",false,451,[[5,"Quad<ModelComponent>",-6183,[4490],[0],4491]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",36,[[2,-6184,[4503],[0],4504]]],[1,"Seat_2.002",36,[[2,-6185,[4505],[0],4506]]],[1,"Seat_3.002",36,[[2,-6186,[4507],[0],4508]]],[1,"Seat_4.002",36,[[2,-6187,[4509],[0],4510]]],[1,"BANH XE.002",36,[[2,-6188,[4511],[0],4512]]],[1,"BANH XE.003",36,[[2,-6189,[4513],[0],4514]]],[1,"BANH XE.004",36,[[2,-6190,[4515],[0],4516]]],[1,"BANH XE.005",36,[[2,-6191,[4517],[0],4518]]],[1,"Car_Body_Top_color",1438,[[6,1,-6192,[4519,4520],[0],4521]]],[1,"Car_roof__Removable__color",458,[[2,-6193,[4522],[0],4523]]],[1,"kinh_a_2",458,[[2,-6194,[4524],[0],4525]]],[1,"kinh_a_1",458,[[2,-6195,[4526],[0],4527]]],[9,"Arrow",458,[[5,"Quad<ModelComponent>",-6196,[4528],[0],4529]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1439,[[6,1,-6197,[4530,4531],[0],4532]]],[1,"Car_roof__Removable__color",459,[[2,-6198,[4533],[0],4534]]],[1,"kinh_a_2",459,[[2,-6199,[4535],[0],4536]]],[1,"kinh_a_1",459,[[2,-6200,[4537],[0],4538]]],[9,"Arrow",459,[[5,"Quad<ModelComponent>",-6201,[4539],[0],4540]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1440,[[6,1,-6202,[4541,4542],[0],4543]]],[1,"Car_roof__Removable__color",760,[[2,-6203,[4544],[0],4545]]],[1,"kinh_a_2",760,[[2,-6204,[4546],[0],4547]]],[1,"kinh_a_1",760,[[2,-6205,[4548],[0],4549]]],[1,"Car_Body_Top_color",1441,[[6,1,-6206,[4550,4551],[0],4552]]],[1,"Car_roof__Removable__color",761,[[2,-6207,[4553],[0],4554]]],[1,"kinh_a_2",761,[[2,-6208,[4555],[0],4556]]],[1,"kinh_a_1",761,[[2,-6209,[4557],[0],4558]]],[1,"Car_Body_Top_color",1442,[[6,1,-6210,[4559,4560],[0],4561]]],[1,"Car_roof__Removable__color",762,[[2,-6211,[4562],[0],4563]]],[1,"kinh_a_2",762,[[2,-6212,[4564],[0],4565]]],[1,"kinh_a_1",762,[[2,-6213,[4566],[0],4567]]],[1,"Car_Body_Top_color",1443,[[6,1,-6214,[4568,4569],[0],4570]]],[1,"Car_roof__Removable__color",763,[[2,-6215,[4571],[0],4572]]],[1,"kinh_a_2",763,[[2,-6216,[4573],[0],4574]]],[1,"kinh_a_1",763,[[2,-6217,[4575],[0],4576]]],[1,"Car_Body_Top_color",1444,[[6,1,-6218,[4577,4578],[0],4579]]],[1,"Car_roof__Removable__color",764,[[2,-6219,[4580],[0],4581]]],[1,"kinh_a_2",764,[[2,-6220,[4582],[0],4583]]],[1,"kinh_a_1",764,[[2,-6221,[4584],[0],4585]]],[1,"Car_Body_Top_color",1445,[[6,1,-6222,[4586,4587],[0],4588]]],[1,"Car_roof__Removable__color",460,[[2,-6223,[4589],[0],4590]]],[1,"kinh_a_2",460,[[2,-6224,[4591],[0],4592]]],[1,"kinh_a_1",460,[[2,-6225,[4593],[0],4594]]],[9,"Arrow",460,[[5,"Quad<ModelComponent>",-6226,[4595],[0],4596]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1446,[[6,1,-6227,[4597,4598],[0],4599]]],[1,"Car_roof__Removable__color",461,[[2,-6228,[4600],[0],4601]]],[1,"kinh_a_2",461,[[2,-6229,[4602],[0],4603]]],[1,"kinh_a_1",461,[[2,-6230,[4604],[0],4605]]],[31,"Arrow",false,461,[[5,"Quad<ModelComponent>",-6231,[4606],[0],4607]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",37,[[2,-6232,[4619],[0],4620]]],[1,"Seat_2.002",37,[[2,-6233,[4621],[0],4622]]],[1,"Seat_3.002",37,[[2,-6234,[4623],[0],4624]]],[1,"Seat_4.002",37,[[2,-6235,[4625],[0],4626]]],[1,"BANH XE.002",37,[[2,-6236,[4627],[0],4628]]],[1,"BANH XE.003",37,[[2,-6237,[4629],[0],4630]]],[1,"BANH XE.004",37,[[2,-6238,[4631],[0],4632]]],[1,"BANH XE.005",37,[[2,-6239,[4633],[0],4634]]],[1,"Car_Body_Top_color",1453,[[6,1,-6240,[4635,4636],[0],4637]]],[1,"Car_roof__Removable__color",468,[[2,-6241,[4638],[0],4639]]],[1,"kinh_a_2",468,[[2,-6242,[4640],[0],4641]]],[1,"kinh_a_1",468,[[2,-6243,[4642],[0],4643]]],[9,"Arrow",468,[[5,"Quad<ModelComponent>",-6244,[4644],[0],4645]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1454,[[6,1,-6245,[4646,4647],[0],4648]]],[1,"Car_roof__Removable__color",469,[[2,-6246,[4649],[0],4650]]],[1,"kinh_a_2",469,[[2,-6247,[4651],[0],4652]]],[1,"kinh_a_1",469,[[2,-6248,[4653],[0],4654]]],[9,"Arrow",469,[[5,"Quad<ModelComponent>",-6249,[4655],[0],4656]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1455,[[6,1,-6250,[4657,4658],[0],4659]]],[1,"Car_roof__Removable__color",766,[[2,-6251,[4660],[0],4661]]],[1,"kinh_a_2",766,[[2,-6252,[4662],[0],4663]]],[1,"kinh_a_1",766,[[2,-6253,[4664],[0],4665]]],[1,"Car_Body_Top_color",1456,[[6,1,-6254,[4666,4667],[0],4668]]],[1,"Car_roof__Removable__color",767,[[2,-6255,[4669],[0],4670]]],[1,"kinh_a_2",767,[[2,-6256,[4671],[0],4672]]],[1,"kinh_a_1",767,[[2,-6257,[4673],[0],4674]]],[1,"Car_Body_Top_color",1457,[[6,1,-6258,[4675,4676],[0],4677]]],[1,"Car_roof__Removable__color",768,[[2,-6259,[4678],[0],4679]]],[1,"kinh_a_2",768,[[2,-6260,[4680],[0],4681]]],[1,"kinh_a_1",768,[[2,-6261,[4682],[0],4683]]],[1,"Car_Body_Top_color",1458,[[6,1,-6262,[4684,4685],[0],4686]]],[1,"Car_roof__Removable__color",769,[[2,-6263,[4687],[0],4688]]],[1,"kinh_a_2",769,[[2,-6264,[4689],[0],4690]]],[1,"kinh_a_1",769,[[2,-6265,[4691],[0],4692]]],[1,"Car_Body_Top_color",1459,[[6,1,-6266,[4693,4694],[0],4695]]],[1,"Car_roof__Removable__color",770,[[2,-6267,[4696],[0],4697]]],[1,"kinh_a_2",770,[[2,-6268,[4698],[0],4699]]],[1,"kinh_a_1",770,[[2,-6269,[4700],[0],4701]]],[1,"Car_Body_Top_color",1460,[[6,1,-6270,[4702,4703],[0],4704]]],[1,"Car_roof__Removable__color",470,[[2,-6271,[4705],[0],4706]]],[1,"kinh_a_2",470,[[2,-6272,[4707],[0],4708]]],[1,"kinh_a_1",470,[[2,-6273,[4709],[0],4710]]],[9,"Arrow",470,[[5,"Quad<ModelComponent>",-6274,[4711],[0],4712]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1461,[[6,1,-6275,[4713,4714],[0],4715]]],[1,"Car_roof__Removable__color",471,[[2,-6276,[4716],[0],4717]]],[1,"kinh_a_2",471,[[2,-6277,[4718],[0],4719]]],[1,"kinh_a_1",471,[[2,-6278,[4720],[0],4721]]],[31,"Arrow",false,471,[[5,"Quad<ModelComponent>",-6279,[4722],[0],4723]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",38,[[2,-6280,[4735],[0],4736]]],[1,"Seat_2.002",38,[[2,-6281,[4737],[0],4738]]],[1,"Seat_3.002",38,[[2,-6282,[4739],[0],4740]]],[1,"Seat_4.002",38,[[2,-6283,[4741],[0],4742]]],[1,"BANH XE.002",38,[[2,-6284,[4743],[0],4744]]],[1,"BANH XE.003",38,[[2,-6285,[4745],[0],4746]]],[1,"BANH XE.004",38,[[2,-6286,[4747],[0],4748]]],[1,"BANH XE.005",38,[[2,-6287,[4749],[0],4750]]],[1,"Car_Body_Top_color",1468,[[6,1,-6288,[4751,4752],[0],4753]]],[1,"Car_roof__Removable__color",478,[[2,-6289,[4754],[0],4755]]],[1,"kinh_a_2",478,[[2,-6290,[4756],[0],4757]]],[1,"kinh_a_1",478,[[2,-6291,[4758],[0],4759]]],[9,"Arrow",478,[[5,"Quad<ModelComponent>",-6292,[4760],[0],4761]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1469,[[6,1,-6293,[4762,4763],[0],4764]]],[1,"Car_roof__Removable__color",479,[[2,-6294,[4765],[0],4766]]],[1,"kinh_a_2",479,[[2,-6295,[4767],[0],4768]]],[1,"kinh_a_1",479,[[2,-6296,[4769],[0],4770]]],[9,"Arrow",479,[[5,"Quad<ModelComponent>",-6297,[4771],[0],4772]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1470,[[6,1,-6298,[4773,4774],[0],4775]]],[1,"Car_roof__Removable__color",772,[[2,-6299,[4776],[0],4777]]],[1,"kinh_a_2",772,[[2,-6300,[4778],[0],4779]]],[1,"kinh_a_1",772,[[2,-6301,[4780],[0],4781]]],[1,"Car_Body_Top_color",1471,[[6,1,-6302,[4782,4783],[0],4784]]],[1,"Car_roof__Removable__color",773,[[2,-6303,[4785],[0],4786]]],[1,"kinh_a_2",773,[[2,-6304,[4787],[0],4788]]],[1,"kinh_a_1",773,[[2,-6305,[4789],[0],4790]]],[1,"Car_Body_Top_color",1472,[[6,1,-6306,[4791,4792],[0],4793]]],[1,"Car_roof__Removable__color",774,[[2,-6307,[4794],[0],4795]]],[1,"kinh_a_2",774,[[2,-6308,[4796],[0],4797]]],[1,"kinh_a_1",774,[[2,-6309,[4798],[0],4799]]],[1,"Car_Body_Top_color",1473,[[6,1,-6310,[4800,4801],[0],4802]]],[1,"Car_roof__Removable__color",775,[[2,-6311,[4803],[0],4804]]],[1,"kinh_a_2",775,[[2,-6312,[4805],[0],4806]]],[1,"kinh_a_1",775,[[2,-6313,[4807],[0],4808]]],[1,"Car_Body_Top_color",1474,[[6,1,-6314,[4809,4810],[0],4811]]],[1,"Car_roof__Removable__color",776,[[2,-6315,[4812],[0],4813]]],[1,"kinh_a_2",776,[[2,-6316,[4814],[0],4815]]],[1,"kinh_a_1",776,[[2,-6317,[4816],[0],4817]]],[1,"Car_Body_Top_color",1475,[[6,1,-6318,[4818,4819],[0],4820]]],[1,"Car_roof__Removable__color",480,[[2,-6319,[4821],[0],4822]]],[1,"kinh_a_2",480,[[2,-6320,[4823],[0],4824]]],[1,"kinh_a_1",480,[[2,-6321,[4825],[0],4826]]],[9,"Arrow",480,[[5,"Quad<ModelComponent>",-6322,[4827],[0],4828]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1476,[[6,1,-6323,[4829,4830],[0],4831]]],[1,"Car_roof__Removable__color",481,[[2,-6324,[4832],[0],4833]]],[1,"kinh_a_2",481,[[2,-6325,[4834],[0],4835]]],[1,"kinh_a_1",481,[[2,-6326,[4836],[0],4837]]],[31,"Arrow",false,481,[[5,"Quad<ModelComponent>",-6327,[4838],[0],4839]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",39,[[2,-6328,[4851],[0],4852]]],[1,"Seat_2.002",39,[[2,-6329,[4853],[0],4854]]],[1,"Seat_3.002",39,[[2,-6330,[4855],[0],4856]]],[1,"Seat_4.002",39,[[2,-6331,[4857],[0],4858]]],[1,"BANH XE.002",39,[[2,-6332,[4859],[0],4860]]],[1,"BANH XE.003",39,[[2,-6333,[4861],[0],4862]]],[1,"BANH XE.004",39,[[2,-6334,[4863],[0],4864]]],[1,"BANH XE.005",39,[[2,-6335,[4865],[0],4866]]],[1,"Car_Body_Top_color",1483,[[6,1,-6336,[4867,4868],[0],4869]]],[1,"Car_roof__Removable__color",488,[[2,-6337,[4870],[0],4871]]],[1,"kinh_a_2",488,[[2,-6338,[4872],[0],4873]]],[1,"kinh_a_1",488,[[2,-6339,[4874],[0],4875]]],[9,"Arrow",488,[[5,"Quad<ModelComponent>",-6340,[4876],[0],4877]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1484,[[6,1,-6341,[4878,4879],[0],4880]]],[1,"Car_roof__Removable__color",489,[[2,-6342,[4881],[0],4882]]],[1,"kinh_a_2",489,[[2,-6343,[4883],[0],4884]]],[1,"kinh_a_1",489,[[2,-6344,[4885],[0],4886]]],[9,"Arrow",489,[[5,"Quad<ModelComponent>",-6345,[4887],[0],4888]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1485,[[6,1,-6346,[4889,4890],[0],4891]]],[1,"Car_roof__Removable__color",778,[[2,-6347,[4892],[0],4893]]],[1,"kinh_a_2",778,[[2,-6348,[4894],[0],4895]]],[1,"kinh_a_1",778,[[2,-6349,[4896],[0],4897]]],[1,"Car_Body_Top_color",1486,[[6,1,-6350,[4898,4899],[0],4900]]],[1,"Car_roof__Removable__color",779,[[2,-6351,[4901],[0],4902]]],[1,"kinh_a_2",779,[[2,-6352,[4903],[0],4904]]],[1,"kinh_a_1",779,[[2,-6353,[4905],[0],4906]]],[1,"Car_Body_Top_color",1487,[[6,1,-6354,[4907,4908],[0],4909]]],[1,"Car_roof__Removable__color",780,[[2,-6355,[4910],[0],4911]]],[1,"kinh_a_2",780,[[2,-6356,[4912],[0],4913]]],[1,"kinh_a_1",780,[[2,-6357,[4914],[0],4915]]],[1,"Car_Body_Top_color",1488,[[6,1,-6358,[4916,4917],[0],4918]]],[1,"Car_roof__Removable__color",781,[[2,-6359,[4919],[0],4920]]],[1,"kinh_a_2",781,[[2,-6360,[4921],[0],4922]]],[1,"kinh_a_1",781,[[2,-6361,[4923],[0],4924]]],[1,"Car_Body_Top_color",1489,[[6,1,-6362,[4925,4926],[0],4927]]],[1,"Car_roof__Removable__color",782,[[2,-6363,[4928],[0],4929]]],[1,"kinh_a_2",782,[[2,-6364,[4930],[0],4931]]],[1,"kinh_a_1",782,[[2,-6365,[4932],[0],4933]]],[1,"Car_Body_Top_color",1490,[[6,1,-6366,[4934,4935],[0],4936]]],[1,"Car_roof__Removable__color",490,[[2,-6367,[4937],[0],4938]]],[1,"kinh_a_2",490,[[2,-6368,[4939],[0],4940]]],[1,"kinh_a_1",490,[[2,-6369,[4941],[0],4942]]],[9,"Arrow",490,[[5,"Quad<ModelComponent>",-6370,[4943],[0],4944]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1491,[[6,1,-6371,[4945,4946],[0],4947]]],[1,"Car_roof__Removable__color",491,[[2,-6372,[4948],[0],4949]]],[1,"kinh_a_2",491,[[2,-6373,[4950],[0],4951]]],[1,"kinh_a_1",491,[[2,-6374,[4952],[0],4953]]],[31,"Arrow",false,491,[[5,"Quad<ModelComponent>",-6375,[4954],[0],4955]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",40,[[2,-6376,[4967],[0],4968]]],[1,"Seat_2.002",40,[[2,-6377,[4969],[0],4970]]],[1,"Seat_3.002",40,[[2,-6378,[4971],[0],4972]]],[1,"Seat_4.002",40,[[2,-6379,[4973],[0],4974]]],[1,"BANH XE.002",40,[[2,-6380,[4975],[0],4976]]],[1,"BANH XE.003",40,[[2,-6381,[4977],[0],4978]]],[1,"BANH XE.004",40,[[2,-6382,[4979],[0],4980]]],[1,"BANH XE.005",40,[[2,-6383,[4981],[0],4982]]],[1,"Car_Body_Top_color",1498,[[6,1,-6384,[4983,4984],[0],4985]]],[1,"Car_roof__Removable__color",498,[[2,-6385,[4986],[0],4987]]],[1,"kinh_a_2",498,[[2,-6386,[4988],[0],4989]]],[1,"kinh_a_1",498,[[2,-6387,[4990],[0],4991]]],[9,"Arrow",498,[[5,"Quad<ModelComponent>",-6388,[4992],[0],4993]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1499,[[6,1,-6389,[4994,4995],[0],4996]]],[1,"Car_roof__Removable__color",499,[[2,-6390,[4997],[0],4998]]],[1,"kinh_a_2",499,[[2,-6391,[4999],[0],5000]]],[1,"kinh_a_1",499,[[2,-6392,[5001],[0],5002]]],[9,"Arrow",499,[[5,"Quad<ModelComponent>",-6393,[5003],[0],5004]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1500,[[6,1,-6394,[5005,5006],[0],5007]]],[1,"Car_roof__Removable__color",784,[[2,-6395,[5008],[0],5009]]],[1,"kinh_a_2",784,[[2,-6396,[5010],[0],5011]]],[1,"kinh_a_1",784,[[2,-6397,[5012],[0],5013]]],[1,"Car_Body_Top_color",1501,[[6,1,-6398,[5014,5015],[0],5016]]],[1,"Car_roof__Removable__color",785,[[2,-6399,[5017],[0],5018]]],[1,"kinh_a_2",785,[[2,-6400,[5019],[0],5020]]],[1,"kinh_a_1",785,[[2,-6401,[5021],[0],5022]]],[1,"Car_Body_Top_color",1502,[[6,1,-6402,[5023,5024],[0],5025]]],[1,"Car_roof__Removable__color",786,[[2,-6403,[5026],[0],5027]]],[1,"kinh_a_2",786,[[2,-6404,[5028],[0],5029]]],[1,"kinh_a_1",786,[[2,-6405,[5030],[0],5031]]],[1,"Car_Body_Top_color",1503,[[6,1,-6406,[5032,5033],[0],5034]]],[1,"Car_roof__Removable__color",787,[[2,-6407,[5035],[0],5036]]],[1,"kinh_a_2",787,[[2,-6408,[5037],[0],5038]]],[1,"kinh_a_1",787,[[2,-6409,[5039],[0],5040]]],[1,"Car_Body_Top_color",1504,[[6,1,-6410,[5041,5042],[0],5043]]],[1,"Car_roof__Removable__color",788,[[2,-6411,[5044],[0],5045]]],[1,"kinh_a_2",788,[[2,-6412,[5046],[0],5047]]],[1,"kinh_a_1",788,[[2,-6413,[5048],[0],5049]]],[1,"Car_Body_Top_color",1505,[[6,1,-6414,[5050,5051],[0],5052]]],[1,"Car_roof__Removable__color",500,[[2,-6415,[5053],[0],5054]]],[1,"kinh_a_2",500,[[2,-6416,[5055],[0],5056]]],[1,"kinh_a_1",500,[[2,-6417,[5057],[0],5058]]],[9,"Arrow",500,[[5,"Quad<ModelComponent>",-6418,[5059],[0],5060]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1506,[[6,1,-6419,[5061,5062],[0],5063]]],[1,"Car_roof__Removable__color",501,[[2,-6420,[5064],[0],5065]]],[1,"kinh_a_2",501,[[2,-6421,[5066],[0],5067]]],[1,"kinh_a_1",501,[[2,-6422,[5068],[0],5069]]],[31,"Arrow",false,501,[[5,"Quad<ModelComponent>",-6423,[5070],[0],5071]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",41,[[2,-6424,[5083],[0],5084]]],[1,"Seat_2.002",41,[[2,-6425,[5085],[0],5086]]],[1,"Seat_3.002",41,[[2,-6426,[5087],[0],5088]]],[1,"Seat_4.002",41,[[2,-6427,[5089],[0],5090]]],[1,"BANH XE.002",41,[[2,-6428,[5091],[0],5092]]],[1,"BANH XE.003",41,[[2,-6429,[5093],[0],5094]]],[1,"BANH XE.004",41,[[2,-6430,[5095],[0],5096]]],[1,"BANH XE.005",41,[[2,-6431,[5097],[0],5098]]],[1,"Car_Body_Top_color",1513,[[6,1,-6432,[5099,5100],[0],5101]]],[1,"Car_roof__Removable__color",508,[[2,-6433,[5102],[0],5103]]],[1,"kinh_a_2",508,[[2,-6434,[5104],[0],5105]]],[1,"kinh_a_1",508,[[2,-6435,[5106],[0],5107]]],[9,"Arrow",508,[[5,"Quad<ModelComponent>",-6436,[5108],[0],5109]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1514,[[6,1,-6437,[5110,5111],[0],5112]]],[1,"Car_roof__Removable__color",509,[[2,-6438,[5113],[0],5114]]],[1,"kinh_a_2",509,[[2,-6439,[5115],[0],5116]]],[1,"kinh_a_1",509,[[2,-6440,[5117],[0],5118]]],[9,"Arrow",509,[[5,"Quad<ModelComponent>",-6441,[5119],[0],5120]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1515,[[6,1,-6442,[5121,5122],[0],5123]]],[1,"Car_roof__Removable__color",790,[[2,-6443,[5124],[0],5125]]],[1,"kinh_a_2",790,[[2,-6444,[5126],[0],5127]]],[1,"kinh_a_1",790,[[2,-6445,[5128],[0],5129]]],[1,"Car_Body_Top_color",1516,[[6,1,-6446,[5130,5131],[0],5132]]],[1,"Car_roof__Removable__color",791,[[2,-6447,[5133],[0],5134]]],[1,"kinh_a_2",791,[[2,-6448,[5135],[0],5136]]],[1,"kinh_a_1",791,[[2,-6449,[5137],[0],5138]]],[1,"Car_Body_Top_color",1517,[[6,1,-6450,[5139,5140],[0],5141]]],[1,"Car_roof__Removable__color",792,[[2,-6451,[5142],[0],5143]]],[1,"kinh_a_2",792,[[2,-6452,[5144],[0],5145]]],[1,"kinh_a_1",792,[[2,-6453,[5146],[0],5147]]],[1,"Car_Body_Top_color",1518,[[6,1,-6454,[5148,5149],[0],5150]]],[1,"Car_roof__Removable__color",793,[[2,-6455,[5151],[0],5152]]],[1,"kinh_a_2",793,[[2,-6456,[5153],[0],5154]]],[1,"kinh_a_1",793,[[2,-6457,[5155],[0],5156]]],[1,"Car_Body_Top_color",1519,[[6,1,-6458,[5157,5158],[0],5159]]],[1,"Car_roof__Removable__color",794,[[2,-6459,[5160],[0],5161]]],[1,"kinh_a_2",794,[[2,-6460,[5162],[0],5163]]],[1,"kinh_a_1",794,[[2,-6461,[5164],[0],5165]]],[1,"Car_Body_Top_color",1520,[[6,1,-6462,[5166,5167],[0],5168]]],[1,"Car_roof__Removable__color",510,[[2,-6463,[5169],[0],5170]]],[1,"kinh_a_2",510,[[2,-6464,[5171],[0],5172]]],[1,"kinh_a_1",510,[[2,-6465,[5173],[0],5174]]],[9,"Arrow",510,[[5,"Quad<ModelComponent>",-6466,[5175],[0],5176]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1521,[[6,1,-6467,[5177,5178],[0],5179]]],[1,"Car_roof__Removable__color",511,[[2,-6468,[5180],[0],5181]]],[1,"kinh_a_2",511,[[2,-6469,[5182],[0],5183]]],[1,"kinh_a_1",511,[[2,-6470,[5184],[0],5185]]],[31,"Arrow",false,511,[[5,"Quad<ModelComponent>",-6471,[5186],[0],5187]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",42,[[2,-6472,[5199],[0],5200]]],[1,"Seat_2.002",42,[[2,-6473,[5201],[0],5202]]],[1,"Seat_3.002",42,[[2,-6474,[5203],[0],5204]]],[1,"Seat_4.002",42,[[2,-6475,[5205],[0],5206]]],[1,"BANH XE.002",42,[[2,-6476,[5207],[0],5208]]],[1,"BANH XE.003",42,[[2,-6477,[5209],[0],5210]]],[1,"BANH XE.004",42,[[2,-6478,[5211],[0],5212]]],[1,"BANH XE.005",42,[[2,-6479,[5213],[0],5214]]],[1,"Car_Body_Top_color",1528,[[6,1,-6480,[5215,5216],[0],5217]]],[1,"Car_roof__Removable__color",518,[[2,-6481,[5218],[0],5219]]],[1,"kinh_a_2",518,[[2,-6482,[5220],[0],5221]]],[1,"kinh_a_1",518,[[2,-6483,[5222],[0],5223]]],[9,"Arrow",518,[[5,"Quad<ModelComponent>",-6484,[5224],[0],5225]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1529,[[6,1,-6485,[5226,5227],[0],5228]]],[1,"Car_roof__Removable__color",519,[[2,-6486,[5229],[0],5230]]],[1,"kinh_a_2",519,[[2,-6487,[5231],[0],5232]]],[1,"kinh_a_1",519,[[2,-6488,[5233],[0],5234]]],[9,"Arrow",519,[[5,"Quad<ModelComponent>",-6489,[5235],[0],5236]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1530,[[6,1,-6490,[5237,5238],[0],5239]]],[1,"Car_roof__Removable__color",796,[[2,-6491,[5240],[0],5241]]],[1,"kinh_a_2",796,[[2,-6492,[5242],[0],5243]]],[1,"kinh_a_1",796,[[2,-6493,[5244],[0],5245]]],[1,"Car_Body_Top_color",1531,[[6,1,-6494,[5246,5247],[0],5248]]],[1,"Car_roof__Removable__color",797,[[2,-6495,[5249],[0],5250]]],[1,"kinh_a_2",797,[[2,-6496,[5251],[0],5252]]],[1,"kinh_a_1",797,[[2,-6497,[5253],[0],5254]]],[1,"Car_Body_Top_color",1532,[[6,1,-6498,[5255,5256],[0],5257]]],[1,"Car_roof__Removable__color",798,[[2,-6499,[5258],[0],5259]]],[1,"kinh_a_2",798,[[2,-6500,[5260],[0],5261]]],[1,"kinh_a_1",798,[[2,-6501,[5262],[0],5263]]],[1,"Car_Body_Top_color",1533,[[6,1,-6502,[5264,5265],[0],5266]]],[1,"Car_roof__Removable__color",799,[[2,-6503,[5267],[0],5268]]],[1,"kinh_a_2",799,[[2,-6504,[5269],[0],5270]]],[1,"kinh_a_1",799,[[2,-6505,[5271],[0],5272]]],[1,"Car_Body_Top_color",1534,[[6,1,-6506,[5273,5274],[0],5275]]],[1,"Car_roof__Removable__color",800,[[2,-6507,[5276],[0],5277]]],[1,"kinh_a_2",800,[[2,-6508,[5278],[0],5279]]],[1,"kinh_a_1",800,[[2,-6509,[5280],[0],5281]]],[1,"Car_Body_Top_color",1535,[[6,1,-6510,[5282,5283],[0],5284]]],[1,"Car_roof__Removable__color",520,[[2,-6511,[5285],[0],5286]]],[1,"kinh_a_2",520,[[2,-6512,[5287],[0],5288]]],[1,"kinh_a_1",520,[[2,-6513,[5289],[0],5290]]],[9,"Arrow",520,[[5,"Quad<ModelComponent>",-6514,[5291],[0],5292]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1536,[[6,1,-6515,[5293,5294],[0],5295]]],[1,"Car_roof__Removable__color",521,[[2,-6516,[5296],[0],5297]]],[1,"kinh_a_2",521,[[2,-6517,[5298],[0],5299]]],[1,"kinh_a_1",521,[[2,-6518,[5300],[0],5301]]],[31,"Arrow",false,521,[[5,"Quad<ModelComponent>",-6519,[5302],[0],5303]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",43,[[2,-6520,[5315],[0],5316]]],[1,"Seat_2.002",43,[[2,-6521,[5317],[0],5318]]],[1,"Seat_3.002",43,[[2,-6522,[5319],[0],5320]]],[1,"Seat_4.002",43,[[2,-6523,[5321],[0],5322]]],[1,"BANH XE.002",43,[[2,-6524,[5323],[0],5324]]],[1,"BANH XE.003",43,[[2,-6525,[5325],[0],5326]]],[1,"BANH XE.004",43,[[2,-6526,[5327],[0],5328]]],[1,"BANH XE.005",43,[[2,-6527,[5329],[0],5330]]],[1,"Car_Body_Top_color",1543,[[6,1,-6528,[5331,5332],[0],5333]]],[1,"Car_roof__Removable__color",528,[[2,-6529,[5334],[0],5335]]],[1,"kinh_a_2",528,[[2,-6530,[5336],[0],5337]]],[1,"kinh_a_1",528,[[2,-6531,[5338],[0],5339]]],[9,"Arrow",528,[[5,"Quad<ModelComponent>",-6532,[5340],[0],5341]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1544,[[6,1,-6533,[5342,5343],[0],5344]]],[1,"Car_roof__Removable__color",529,[[2,-6534,[5345],[0],5346]]],[1,"kinh_a_2",529,[[2,-6535,[5347],[0],5348]]],[1,"kinh_a_1",529,[[2,-6536,[5349],[0],5350]]],[9,"Arrow",529,[[5,"Quad<ModelComponent>",-6537,[5351],[0],5352]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1545,[[6,1,-6538,[5353,5354],[0],5355]]],[1,"Car_roof__Removable__color",802,[[2,-6539,[5356],[0],5357]]],[1,"kinh_a_2",802,[[2,-6540,[5358],[0],5359]]],[1,"kinh_a_1",802,[[2,-6541,[5360],[0],5361]]],[1,"Car_Body_Top_color",1546,[[6,1,-6542,[5362,5363],[0],5364]]],[1,"Car_roof__Removable__color",803,[[2,-6543,[5365],[0],5366]]],[1,"kinh_a_2",803,[[2,-6544,[5367],[0],5368]]],[1,"kinh_a_1",803,[[2,-6545,[5369],[0],5370]]],[1,"Car_Body_Top_color",1547,[[6,1,-6546,[5371,5372],[0],5373]]],[1,"Car_roof__Removable__color",804,[[2,-6547,[5374],[0],5375]]],[1,"kinh_a_2",804,[[2,-6548,[5376],[0],5377]]],[1,"kinh_a_1",804,[[2,-6549,[5378],[0],5379]]],[1,"Car_Body_Top_color",1548,[[6,1,-6550,[5380,5381],[0],5382]]],[1,"Car_roof__Removable__color",805,[[2,-6551,[5383],[0],5384]]],[1,"kinh_a_2",805,[[2,-6552,[5385],[0],5386]]],[1,"kinh_a_1",805,[[2,-6553,[5387],[0],5388]]],[1,"Car_Body_Top_color",1549,[[6,1,-6554,[5389,5390],[0],5391]]],[1,"Car_roof__Removable__color",806,[[2,-6555,[5392],[0],5393]]],[1,"kinh_a_2",806,[[2,-6556,[5394],[0],5395]]],[1,"kinh_a_1",806,[[2,-6557,[5396],[0],5397]]],[1,"Car_Body_Top_color",1550,[[6,1,-6558,[5398,5399],[0],5400]]],[1,"Car_roof__Removable__color",530,[[2,-6559,[5401],[0],5402]]],[1,"kinh_a_2",530,[[2,-6560,[5403],[0],5404]]],[1,"kinh_a_1",530,[[2,-6561,[5405],[0],5406]]],[9,"Arrow",530,[[5,"Quad<ModelComponent>",-6562,[5407],[0],5408]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1551,[[6,1,-6563,[5409,5410],[0],5411]]],[1,"Car_roof__Removable__color",531,[[2,-6564,[5412],[0],5413]]],[1,"kinh_a_2",531,[[2,-6565,[5414],[0],5415]]],[1,"kinh_a_1",531,[[2,-6566,[5416],[0],5417]]],[31,"Arrow",false,531,[[5,"Quad<ModelComponent>",-6567,[5418],[0],5419]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",44,[[2,-6568,[5431],[0],5432]]],[1,"Seat_2.002",44,[[2,-6569,[5433],[0],5434]]],[1,"Seat_3.002",44,[[2,-6570,[5435],[0],5436]]],[1,"Seat_4.002",44,[[2,-6571,[5437],[0],5438]]],[1,"BANH XE.002",44,[[2,-6572,[5439],[0],5440]]],[1,"BANH XE.003",44,[[2,-6573,[5441],[0],5442]]],[1,"BANH XE.004",44,[[2,-6574,[5443],[0],5444]]],[1,"BANH XE.005",44,[[2,-6575,[5445],[0],5446]]],[1,"Car_Body_Top_color",1558,[[6,1,-6576,[5447,5448],[0],5449]]],[1,"Car_roof__Removable__color",538,[[2,-6577,[5450],[0],5451]]],[1,"kinh_a_2",538,[[2,-6578,[5452],[0],5453]]],[1,"kinh_a_1",538,[[2,-6579,[5454],[0],5455]]],[9,"Arrow",538,[[5,"Quad<ModelComponent>",-6580,[5456],[0],5457]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1559,[[6,1,-6581,[5458,5459],[0],5460]]],[1,"Car_roof__Removable__color",539,[[2,-6582,[5461],[0],5462]]],[1,"kinh_a_2",539,[[2,-6583,[5463],[0],5464]]],[1,"kinh_a_1",539,[[2,-6584,[5465],[0],5466]]],[9,"Arrow",539,[[5,"Quad<ModelComponent>",-6585,[5467],[0],5468]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1560,[[6,1,-6586,[5469,5470],[0],5471]]],[1,"Car_roof__Removable__color",808,[[2,-6587,[5472],[0],5473]]],[1,"kinh_a_2",808,[[2,-6588,[5474],[0],5475]]],[1,"kinh_a_1",808,[[2,-6589,[5476],[0],5477]]],[1,"Car_Body_Top_color",1561,[[6,1,-6590,[5478,5479],[0],5480]]],[1,"Car_roof__Removable__color",809,[[2,-6591,[5481],[0],5482]]],[1,"kinh_a_2",809,[[2,-6592,[5483],[0],5484]]],[1,"kinh_a_1",809,[[2,-6593,[5485],[0],5486]]],[1,"Car_Body_Top_color",1562,[[6,1,-6594,[5487,5488],[0],5489]]],[1,"Car_roof__Removable__color",810,[[2,-6595,[5490],[0],5491]]],[1,"kinh_a_2",810,[[2,-6596,[5492],[0],5493]]],[1,"kinh_a_1",810,[[2,-6597,[5494],[0],5495]]],[1,"Car_Body_Top_color",1563,[[6,1,-6598,[5496,5497],[0],5498]]],[1,"Car_roof__Removable__color",811,[[2,-6599,[5499],[0],5500]]],[1,"kinh_a_2",811,[[2,-6600,[5501],[0],5502]]],[1,"kinh_a_1",811,[[2,-6601,[5503],[0],5504]]],[1,"Car_Body_Top_color",1564,[[6,1,-6602,[5505,5506],[0],5507]]],[1,"Car_roof__Removable__color",812,[[2,-6603,[5508],[0],5509]]],[1,"kinh_a_2",812,[[2,-6604,[5510],[0],5511]]],[1,"kinh_a_1",812,[[2,-6605,[5512],[0],5513]]],[1,"Car_Body_Top_color",1565,[[6,1,-6606,[5514,5515],[0],5516]]],[1,"Car_roof__Removable__color",540,[[2,-6607,[5517],[0],5518]]],[1,"kinh_a_2",540,[[2,-6608,[5519],[0],5520]]],[1,"kinh_a_1",540,[[2,-6609,[5521],[0],5522]]],[9,"Arrow",540,[[5,"Quad<ModelComponent>",-6610,[5523],[0],5524]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Car_Body_Top_color",1566,[[6,1,-6611,[5525,5526],[0],5527]]],[1,"Car_roof__Removable__color",541,[[2,-6612,[5528],[0],5529]]],[1,"kinh_a_2",541,[[2,-6613,[5530],[0],5531]]],[1,"kinh_a_1",541,[[2,-6614,[5532],[0],5533]]],[31,"Arrow",false,541,[[5,"Quad<ModelComponent>",-6615,[5534],[0],5535]],[1,0,1.252,-8.881784197001252e-16],[3,-4.329780281177467e-17,0.7071067811865476,0.7071067811865475,4.329780281177469e-17],[1,0.5999999999999999,1.3,1],[1,-89.99999999999999,180,7.062250076880254e-31]],[1,"Seat_1.002",56,[[2,-6616,[5557],[0],5558]]],[1,"Seat_2.002",56,[[2,-6617,[5559],[0],5560]]],[1,"Seat_3.002",56,[[2,-6618,[5561],[0],5562]]],[1,"Seat_4.002",56,[[2,-6619,[5563],[0],5564]]],[1,"BANH XE.002",56,[[2,-6620,[5565],[0],5566]]],[1,"BANH XE.003",56,[[2,-6621,[5567],[0],5568]]],[1,"BANH XE.004",56,[[2,-6622,[5569],[0],5570]]],[1,"BANH XE.005",56,[[2,-6623,[5571],[0],5572]]],[1,"Car_Body_Top_color",1574,[[6,1,-6624,[5573,5574],[0],5575]]],[1,"Car_roof__Removable__color",819,[[2,-6625,[5576],[0],5577]]],[1,"kinh_a_2",819,[[2,-6626,[5578],[0],5579]]],[1,"kinh_a_1",819,[[2,-6627,[5580],[0],5581]]],[9,"Arrow",56,[[5,"Quad<ModelComponent>",-6628,[5582],[0],5583]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1575,[[6,1,-6629,[5584,5585],[0],5586]]],[1,"Car_roof__Removable__color",820,[[2,-6630,[5587],[0],5588]]],[1,"kinh_a_2",820,[[2,-6631,[5589],[0],5590]]],[1,"kinh_a_1",820,[[2,-6632,[5591],[0],5592]]],[1,"Car_Body_Top_color",1576,[[6,1,-6633,[5593,5594],[0],5595]]],[1,"Car_roof__Removable__color",821,[[2,-6634,[5596],[0],5597]]],[1,"kinh_a_2",821,[[2,-6635,[5598],[0],5599]]],[1,"kinh_a_1",821,[[2,-6636,[5600],[0],5601]]],[1,"Car_Body_Top_color",1577,[[6,1,-6637,[5602,5603],[0],5604]]],[1,"Car_roof__Removable__color",822,[[2,-6638,[5605],[0],5606]]],[1,"kinh_a_2",822,[[2,-6639,[5607],[0],5608]]],[1,"kinh_a_1",822,[[2,-6640,[5609],[0],5610]]],[1,"Car_Body_Top_color",1578,[[6,1,-6641,[5611,5612],[0],5613]]],[1,"Car_roof__Removable__color",823,[[2,-6642,[5614],[0],5615]]],[1,"kinh_a_2",823,[[2,-6643,[5616],[0],5617]]],[1,"kinh_a_1",823,[[2,-6644,[5618],[0],5619]]],[1,"Car_Body_Top_color",1579,[[6,1,-6645,[5620,5621],[0],5622]]],[1,"Car_roof__Removable__color",824,[[2,-6646,[5623],[0],5624]]],[1,"kinh_a_2",824,[[2,-6647,[5625],[0],5626]]],[1,"kinh_a_1",824,[[2,-6648,[5627],[0],5628]]],[1,"Car_Body_Top_color",1580,[[6,1,-6649,[5629,5630],[0],5631]]],[1,"Car_roof__Removable__color",825,[[2,-6650,[5632],[0],5633]]],[1,"kinh_a_2",825,[[2,-6651,[5634],[0],5635]]],[1,"kinh_a_1",825,[[2,-6652,[5636],[0],5637]]],[1,"Car_Body_Top_color",1582,[[6,1,-6653,[5639,5640],[0],5641]]],[1,"Car_roof__Removable__color",827,[[2,-6654,[5642],[0],5643]]],[1,"kinh_a_2",827,[[2,-6655,[5644],[0],5645]]],[1,"kinh_a_1",827,[[2,-6656,[5646],[0],5647]]],[9,"Arrow",826,[[5,"Quad<ModelComponent>",-6657,[5648],[0],5649]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1584,[[6,1,-6658,[5651,5652],[0],5653]]],[1,"Car_roof__Removable__color",829,[[2,-6659,[5654],[0],5655]]],[1,"kinh_a_2",829,[[2,-6660,[5656],[0],5657]]],[1,"kinh_a_1",829,[[2,-6661,[5658],[0],5659]]],[9,"Arrow",828,[[5,"Quad<ModelComponent>",-6662,[5660],[0],5661]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1586,[[6,1,-6663,[5663,5664],[0],5665]]],[1,"Car_roof__Removable__color",831,[[2,-6664,[5666],[0],5667]]],[1,"kinh_a_2",831,[[2,-6665,[5668],[0],5669]]],[1,"kinh_a_1",831,[[2,-6666,[5670],[0],5671]]],[9,"Arrow",830,[[5,"Quad<ModelComponent>",-6667,[5672],[0],5673]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1588,[[6,1,-6668,[5675,5676],[0],5677]]],[1,"Car_roof__Removable__color",833,[[2,-6669,[5678],[0],5679]]],[1,"kinh_a_2",833,[[2,-6670,[5680],[0],5681]]],[1,"kinh_a_1",833,[[2,-6671,[5682],[0],5683]]],[9,"Arrow",832,[[5,"Quad<ModelComponent>",-6672,[5684],[0],5685]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1590,[[6,1,-6673,[5687,5688],[0],5689]]],[1,"Car_roof__Removable__color",835,[[2,-6674,[5690],[0],5691]]],[1,"kinh_a_2",835,[[2,-6675,[5692],[0],5693]]],[1,"kinh_a_1",835,[[2,-6676,[5694],[0],5695]]],[9,"Arrow",834,[[5,"Quad<ModelComponent>",-6677,[5696],[0],5697]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1592,[[6,1,-6678,[5699,5700],[0],5701]]],[1,"Car_roof__Removable__color",837,[[2,-6679,[5702],[0],5703]]],[1,"kinh_a_2",837,[[2,-6680,[5704],[0],5705]]],[1,"kinh_a_1",837,[[2,-6681,[5706],[0],5707]]],[9,"Arrow",836,[[5,"Quad<ModelComponent>",-6682,[5708],[0],5709]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1594,[[6,1,-6683,[5711,5712],[0],5713]]],[1,"Car_roof__Removable__color",839,[[2,-6684,[5714],[0],5715]]],[1,"kinh_a_2",839,[[2,-6685,[5716],[0],5717]]],[1,"kinh_a_1",839,[[2,-6686,[5718],[0],5719]]],[9,"Arrow",838,[[5,"Quad<ModelComponent>",-6687,[5720],[0],5721]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1596,[[6,1,-6688,[5723,5724],[0],5725]]],[1,"Car_roof__Removable__color",841,[[2,-6689,[5726],[0],5727]]],[1,"kinh_a_2",841,[[2,-6690,[5728],[0],5729]]],[1,"kinh_a_1",841,[[2,-6691,[5730],[0],5731]]],[9,"Arrow",840,[[5,"Quad<ModelComponent>",-6692,[5732],[0],5733]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_1",false,7,[842],[1,2.649,0,-24.206],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1597,[[6,1,-6693,[5735,5736],[0],5737]]],[1,"Car_roof__Removable__color",843,[[2,-6694,[5738],[0],5739]]],[1,"kinh_a_2",843,[[2,-6695,[5740],[0],5741]]],[1,"kinh_a_1",843,[[2,-6696,[5742],[0],5743]]],[9,"Arrow",842,[[5,"Quad<ModelComponent>",-6697,[5744],[0],5745]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_2",false,7,[844],[1,-0.751,0,-24.041],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1598,[[6,1,-6698,[5747,5748],[0],5749]]],[1,"Car_roof__Removable__color",845,[[2,-6699,[5750],[0],5751]]],[1,"kinh_a_2",845,[[2,-6700,[5752],[0],5753]]],[1,"kinh_a_1",845,[[2,-6701,[5754],[0],5755]]],[9,"Arrow",844,[[5,"Quad<ModelComponent>",-6702,[5756],[0],5757]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_3",false,7,[846],[1,-4.255,0,-23.852],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1599,[[6,1,-6703,[5759,5760],[0],5761]]],[1,"Car_roof__Removable__color",847,[[2,-6704,[5762],[0],5763]]],[1,"kinh_a_2",847,[[2,-6705,[5764],[0],5765]]],[1,"kinh_a_1",847,[[2,-6706,[5766],[0],5767]]],[9,"Arrow",846,[[5,"Quad<ModelComponent>",-6707,[5768],[0],5769]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_4",false,7,[848],[1,-7.739,0,-23.97],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1600,[[6,1,-6708,[5771,5772],[0],5773]]],[1,"Car_roof__Removable__color",849,[[2,-6709,[5774],[0],5775]]],[1,"kinh_a_2",849,[[2,-6710,[5776],[0],5777]]],[1,"kinh_a_1",849,[[2,-6711,[5778],[0],5779]]],[9,"Arrow",848,[[5,"Quad<ModelComponent>",-6712,[5780],[0],5781]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_5",false,7,[850],[1,-11.164,0,-23.912],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1601,[[6,1,-6713,[5783,5784],[0],5785]]],[1,"Car_roof__Removable__color",851,[[2,-6714,[5786],[0],5787]]],[1,"kinh_a_2",851,[[2,-6715,[5788],[0],5789]]],[1,"kinh_a_1",851,[[2,-6716,[5790],[0],5791]]],[9,"Arrow",850,[[5,"Quad<ModelComponent>",-6717,[5792],[0],5793]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_6",false,7,[852],[1,-14.762,0,-24.031],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1602,[[6,1,-6718,[5795,5796],[0],5797]]],[1,"Car_roof__Removable__color",853,[[2,-6719,[5798],[0],5799]]],[1,"kinh_a_2",853,[[2,-6720,[5800],[0],5801]]],[1,"kinh_a_1",853,[[2,-6721,[5802],[0],5803]]],[9,"Arrow",852,[[5,"Quad<ModelComponent>",-6722,[5804],[0],5805]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_7",false,7,[854],[1,-18.354,0,-23.936],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1603,[[6,1,-6723,[5807,5808],[0],5809]]],[1,"Car_roof__Removable__color",855,[[2,-6724,[5810],[0],5811]]],[1,"kinh_a_2",855,[[2,-6725,[5812],[0],5813]]],[1,"kinh_a_1",855,[[2,-6726,[5814],[0],5815]]],[9,"Arrow",854,[[5,"Quad<ModelComponent>",-6727,[5816],[0],5817]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[39,"RoadStop_8",false,7,[856],[1,-21.843,0,-24.05],[3,0,0.26723837607825685,0,0.963630453208623],[1,1.5,1.5,1.5],[1,0,31,0]],[1,"Car_Body_Top_color",1604,[[6,1,-6728,[5819,5820],[0],5821]]],[1,"Car_roof__Removable__color",857,[[2,-6729,[5822],[0],5823]]],[1,"kinh_a_2",857,[[2,-6730,[5824],[0],5825]]],[1,"kinh_a_1",857,[[2,-6731,[5826],[0],5827]]],[9,"Arrow",856,[[5,"Quad<ModelComponent>",-6732,[5828],[0],5829]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Seat_1.002",57,[[2,-6733,[5831],[0],5832]]],[1,"Seat_2.002",57,[[2,-6734,[5833],[0],5834]]],[1,"Seat_3.002",57,[[2,-6735,[5835],[0],5836]]],[1,"Seat_4.002",57,[[2,-6736,[5837],[0],5838]]],[1,"BANH XE.002",57,[[2,-6737,[5839],[0],5840]]],[1,"BANH XE.003",57,[[2,-6738,[5841],[0],5842]]],[1,"BANH XE.004",57,[[2,-6739,[5843],[0],5844]]],[1,"BANH XE.005",57,[[2,-6740,[5845],[0],5846]]],[1,"Car_Body_Top_color",1606,[[6,1,-6741,[5847,5848],[0],5849]]],[1,"Car_roof__Removable__color",858,[[2,-6742,[5850],[0],5851]]],[1,"kinh_a_2",858,[[2,-6743,[5852],[0],5853]]],[1,"kinh_a_1",858,[[2,-6744,[5854],[0],5855]]],[9,"Arrow",57,[[5,"Quad<ModelComponent>",-6745,[5856],[0],5857]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1607,[[6,1,-6746,[5858,5859],[0],5860]]],[1,"Car_roof__Removable__color",859,[[2,-6747,[5861],[0],5862]]],[1,"kinh_a_2",859,[[2,-6748,[5863],[0],5864]]],[1,"kinh_a_1",859,[[2,-6749,[5865],[0],5866]]],[1,"Car_Body_Top_color",1608,[[6,1,-6750,[5867,5868],[0],5869]]],[1,"Car_roof__Removable__color",860,[[2,-6751,[5870],[0],5871]]],[1,"kinh_a_2",860,[[2,-6752,[5872],[0],5873]]],[1,"kinh_a_1",860,[[2,-6753,[5874],[0],5875]]],[1,"Car_Body_Top_color",1609,[[6,1,-6754,[5876,5877],[0],5878]]],[1,"Car_roof__Removable__color",861,[[2,-6755,[5879],[0],5880]]],[1,"kinh_a_2",861,[[2,-6756,[5881],[0],5882]]],[1,"kinh_a_1",861,[[2,-6757,[5883],[0],5884]]],[1,"Car_Body_Top_color",1610,[[6,1,-6758,[5885,5886],[0],5887]]],[1,"Car_roof__Removable__color",862,[[2,-6759,[5888],[0],5889]]],[1,"kinh_a_2",862,[[2,-6760,[5890],[0],5891]]],[1,"kinh_a_1",862,[[2,-6761,[5892],[0],5893]]],[1,"Car_Body_Top_color",1611,[[6,1,-6762,[5894,5895],[0],5896]]],[1,"Car_roof__Removable__color",863,[[2,-6763,[5897],[0],5898]]],[1,"kinh_a_2",863,[[2,-6764,[5899],[0],5900]]],[1,"kinh_a_1",863,[[2,-6765,[5901],[0],5902]]],[1,"Car_Body_Top_color",1612,[[6,1,-6766,[5903,5904],[0],5905]]],[1,"Car_roof__Removable__color",864,[[2,-6767,[5906],[0],5907]]],[1,"kinh_a_2",864,[[2,-6768,[5908],[0],5909]]],[1,"kinh_a_1",864,[[2,-6769,[5910],[0],5911]]],[1,"Seat_1.002",58,[[2,-6770,[5913],[0],5914]]],[1,"Seat_2.002",58,[[2,-6771,[5915],[0],5916]]],[1,"Seat_3.002",58,[[2,-6772,[5917],[0],5918]]],[1,"Seat_4.002",58,[[2,-6773,[5919],[0],5920]]],[1,"BANH XE.002",58,[[2,-6774,[5921],[0],5922]]],[1,"BANH XE.003",58,[[2,-6775,[5923],[0],5924]]],[1,"BANH XE.004",58,[[2,-6776,[5925],[0],5926]]],[1,"BANH XE.005",58,[[2,-6777,[5927],[0],5928]]],[1,"Car_Body_Top_color",1614,[[6,1,-6778,[5929,5930],[0],5931]]],[1,"Car_roof__Removable__color",865,[[2,-6779,[5932],[0],5933]]],[1,"kinh_a_2",865,[[2,-6780,[5934],[0],5935]]],[1,"kinh_a_1",865,[[2,-6781,[5936],[0],5937]]],[9,"Arrow",58,[[5,"Quad<ModelComponent>",-6782,[5938],[0],5939]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1615,[[6,1,-6783,[5940,5941],[0],5942]]],[1,"Car_roof__Removable__color",866,[[2,-6784,[5943],[0],5944]]],[1,"kinh_a_2",866,[[2,-6785,[5945],[0],5946]]],[1,"kinh_a_1",866,[[2,-6786,[5947],[0],5948]]],[1,"Car_Body_Top_color",1616,[[6,1,-6787,[5949,5950],[0],5951]]],[1,"Car_roof__Removable__color",867,[[2,-6788,[5952],[0],5953]]],[1,"kinh_a_2",867,[[2,-6789,[5954],[0],5955]]],[1,"kinh_a_1",867,[[2,-6790,[5956],[0],5957]]],[1,"Car_Body_Top_color",1617,[[6,1,-6791,[5958,5959],[0],5960]]],[1,"Car_roof__Removable__color",868,[[2,-6792,[5961],[0],5962]]],[1,"kinh_a_2",868,[[2,-6793,[5963],[0],5964]]],[1,"kinh_a_1",868,[[2,-6794,[5965],[0],5966]]],[1,"Car_Body_Top_color",1618,[[6,1,-6795,[5967,5968],[0],5969]]],[1,"Car_roof__Removable__color",869,[[2,-6796,[5970],[0],5971]]],[1,"kinh_a_2",869,[[2,-6797,[5972],[0],5973]]],[1,"kinh_a_1",869,[[2,-6798,[5974],[0],5975]]],[1,"Car_Body_Top_color",1619,[[6,1,-6799,[5976,5977],[0],5978]]],[1,"Car_roof__Removable__color",870,[[2,-6800,[5979],[0],5980]]],[1,"kinh_a_2",870,[[2,-6801,[5981],[0],5982]]],[1,"kinh_a_1",870,[[2,-6802,[5983],[0],5984]]],[1,"Car_Body_Top_color",1620,[[6,1,-6803,[5985,5986],[0],5987]]],[1,"Car_roof__Removable__color",871,[[2,-6804,[5988],[0],5989]]],[1,"kinh_a_2",871,[[2,-6805,[5990],[0],5991]]],[1,"kinh_a_1",871,[[2,-6806,[5992],[0],5993]]],[1,"Seat_1.002",59,[[2,-6807,[5995],[0],5996]]],[1,"Seat_2.002",59,[[2,-6808,[5997],[0],5998]]],[1,"Seat_3.002",59,[[2,-6809,[5999],[0],6000]]],[1,"Seat_4.002",59,[[2,-6810,[6001],[0],6002]]],[1,"BANH XE.002",59,[[2,-6811,[6003],[0],6004]]],[1,"BANH XE.003",59,[[2,-6812,[6005],[0],6006]]],[1,"BANH XE.004",59,[[2,-6813,[6007],[0],6008]]],[1,"BANH XE.005",59,[[2,-6814,[6009],[0],6010]]],[1,"Car_Body_Top_color",1622,[[6,1,-6815,[6011,6012],[0],6013]]],[1,"Car_roof__Removable__color",872,[[2,-6816,[6014],[0],6015]]],[1,"kinh_a_2",872,[[2,-6817,[6016],[0],6017]]],[1,"kinh_a_1",872,[[2,-6818,[6018],[0],6019]]],[9,"Arrow",59,[[5,"Quad<ModelComponent>",-6819,[6020],[0],6021]],[1,0,1.252,0],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,0.6,1.3,1],[1,-90,180,0]],[1,"Car_Body_Top_color",1623,[[6,1,-6820,[6022,6023],[0],6024]]],[1,"Car_roof__Removable__color",873,[[2,-6821,[6025],[0],6026]]],[1,"kinh_a_2",873,[[2,-6822,[6027],[0],6028]]],[1,"kinh_a_1",873,[[2,-6823,[6029],[0],6030]]],[1,"Car_Body_Top_color",1624,[[6,1,-6824,[6031,6032],[0],6033]]],[1,"Car_roof__Removable__color",874,[[2,-6825,[6034],[0],6035]]],[1,"kinh_a_2",874,[[2,-6826,[6036],[0],6037]]],[1,"kinh_a_1",874,[[2,-6827,[6038],[0],6039]]],[1,"Car_Body_Top_color",1625,[[6,1,-6828,[6040,6041],[0],6042]]],[1,"Car_roof__Removable__color",875,[[2,-6829,[6043],[0],6044]]],[1,"kinh_a_2",875,[[2,-6830,[6045],[0],6046]]],[1,"kinh_a_1",875,[[2,-6831,[6047],[0],6048]]],[1,"Car_Body_Top_color",1626,[[6,1,-6832,[6049,6050],[0],6051]]],[1,"Car_roof__Removable__color",876,[[2,-6833,[6052],[0],6053]]],[1,"kinh_a_2",876,[[2,-6834,[6054],[0],6055]]],[1,"kinh_a_1",876,[[2,-6835,[6056],[0],6057]]],[1,"Car_Body_Top_color",1627,[[6,1,-6836,[6058,6059],[0],6060]]],[1,"Car_roof__Removable__color",877,[[2,-6837,[6061],[0],6062]]],[1,"kinh_a_2",877,[[2,-6838,[6063],[0],6064]]],[1,"kinh_a_1",877,[[2,-6839,[6065],[0],6066]]],[1,"Car_Body_Top_color",1628,[[6,1,-6840,[6067,6068],[0],6069]]],[1,"Car_roof__Removable__color",878,[[2,-6841,[6070],[0],6071]]],[1,"kinh_a_2",878,[[2,-6842,[6072],[0],6073]]],[1,"kinh_a_1",878,[[2,-6843,[6074],[0],6075]]],[186,"310",40,"",false,879],[131,"Responsive","6c9jsvXYpGLZWxiAWG3vQs",86,[[187,-6844,882]]],[56,"BgSound",76,[-6845]],[188,true,false,0.6,4230],[56,"clickSound",76,[-6846]],[60,false,4232],[56,"carExit",76,[-6847]],[60,false,4234],[56,"carMoveToPlace",76,[-6848]],[60,false,4236],[56,"Happy",76,[-6849]],[60,false,4238],[56,"Impact",76,[-6850]],[60,false,4240],[56,"LoadCustomer",76,[-6851]],[60,false,4242],[56,"unlockHiddenCarSound",76,[-6852]],[60,false{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[69,50]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"lineWidth":30},"baseColor",8,[4,4279191041]],[{},"mainColor",8,[4,4278239311],"shadeColor1",8,[4,4280710912],"shadeColor2",8,[4,4278214439],"specular",8,[4,1278017409],"emissive",8,[4,4279111182]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[87,"builtin-toon",[{"hash":858575070,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":145721314,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":4,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) out vec3 v_tangent;\n  layout(location = 5) out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) in vec3 v_tangent;\n  layout(location = 5) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin vec3 v_normal;\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":226,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":69}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":3239663869,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":187,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":69}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true,"USE_BASE_COLOR_MAP":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{"lineWidth":20},"baseColor",8,[4,4294967295],"baseColorMap",6,0],[{},"mainColor",8,[4,4283453520],"shadeColor2",8,[4,4282992969],"specular",8,[4,1280002891],"emissive",8,[4,4284111450],"mainTexture",6,1],{},{}],11,11,0,0]]],0,0,[0,0,0],[19,8,7],[52,52,38]],[[{"name":"icon","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[146]],[[[105,[{},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}]]],0,0,[0],[7],[37]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_BATCHING":true,"USE_LIGHTMAP":true},{},{}],[[[{"roughness":0.25,"metallic":0},"mainColor",8,[4,4284332392]],{},{}],11,0,0]]],0,0,[0],[7],[37]],[[[83,"VFX_Impact2"],[139,"VFX_Impact2",[-3,-4,-5],[-2],[24,"d2mwmZkD9FNrAfZAW7A39x",-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.8,1.8,1.8],[1,90,0,0]],[104,"Sparks",1,[-6],[24,"5dBO7XUvdEorfCuxDdP1+x",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[76,1,false,false,2,[34,"0fqIWjYRtG3LHWYIYK0Rq2"],[0],[41],[42,3,0.6,1],[17],[17],[42,3,2,4],[17],[17],[88,3,6.283185307179586],[17],[42,3,0.2,0.4],[35,0.7],[17],[17],[[82,[35,10]]],[68,true,[67,1,[77,[[44,255,0.6495535714285714],[44,0,1]]]]],[107,true,3,0.4,0.5,[35,1]],[78,true,[43,1,[45,[0,1],[[89,2,2.0096618357487923,1,2.0096618357487923,1],[90,2,1,-0.030092592592593087,1,-0.030092592592593087,1]]]],[17],[17],[17]],[69,[17],[17],[17],[35,1]],[79,[17],[17],[17]],[112,true,0.3,[17],[17],[17],[35,1]],[80,[17],[17],[17]],[113,true,2,2,0.2,[43,1,[45,[0,1],[[110,1,1,1,1],[111,1,1,1,1,1]]]],[42,3,1,4]],[70,[35,1],[17],[41],[41],-7],[81,1]],[104,"Ring",1,[-8],[24,"274j8r0kxMyqZhDWvazX08",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[76,1,false,false,4,[34,"6e6HRd7UhOF5zSoMGfnxN6"],[2],[41],[35,3.5],[17],[17],[17],[17],[17],[17],[17],[35,0.2],[17],[17],[17],[[82,[35,1]]],[68,true,[67,1,[77,[[44,255,0.6316964285714286],[44,0,1]]]]],[108,0,[35,1]],[78,true,[43,1,[45,[0,1],[[89,2,2.3688888888888893,1,2.3688888888888893,1],[90,2,1,-0.08024691358024666,1,-0.08024691358024666,1]]]],[17],[17],[17]],[69,[17],[17],[17],[35,1]],[79,[17],[17],[17]],[91,[17],[17],[17],[17]],[80,[17],[17],[17]],[92,[43,1,[45,[0,1],[[50,2,1],[50,2,1]]]],[17]],[70,[35,1],[17],[41],[41],-9],[81,3]],[135,"bounceAnim",1,[-10],[24,"74OxnoLwVIgrrZd/FTKWSu",1,0],[1,0,-1.356,-0.347],[3,0.7071067811865475,0,0,0.7071067811865476],[1,2,2,2],[1,90,0,0]],[76,1,false,false,6,[34,"93vMKXHE9HZao64ymHH4w4"],[4],[41],[35,3.5],[17],[17],[17],[17],[17],[17],[17],[35,0.2],[17],[17],[17],[[82,[35,1]]],[68,true,[67,1,[77,[[44,255,0.6316964285714286],[44,0,1]]]]],[108,0,[35,1]],[78,true,[43,1,[45,[0,1],[[89,2,2.3688888888888893,1,2.3688888888888893,1],[90,2,1,-0.08024691358024666,1,-0.08024691358024666,1]]]],[17],[17],[17]],[69,[17],[17],[17],[35,1]],[79,[17],[17],[17]],[91,[17],[17],[17],[17]],[80,[17],[17],[17]],[92,[43,1,[45,[0,1],[[50,2,1],[50,2,1]]]],[17]],[70,[35,1],[17],[41],[41],-11],[81,5]],[76,0.35,false,false,1,[34,"67O3V/AbtH0rc1IZ4zG1CM"],[6],[148,[4,4278247679]],[42,3,0.15,0.25],[17],[17],[42,3,2,5],[17],[17],[17],[17],[42,3,0.15,0.25],[17],[17],[17],[[82,[35,12]]],[68,true,[67,1,[77,[[44,255,0.5379464285714286],[44,0,0.9977678571428572]]]]],[107,true,3,0.8,0,[35,1]],[78,true,[43,1,[45,[0,0.7512820512820513,1],[[50,2,1],[50,2,1],[109,2,-2.0526315789473664,-2.0526315789473664]]]],[17],[17],[17]],[69,[17],[17],[17],[35,1]],[79,[17],[17],[17]],[112,true,0.15,[17],[17],[17],[17]],[80,[17],[17],[17]],[92,[43,1,[45,[0,1],[[50,2,1],[50,2,1]]]],[17]],[70,[35,1],[17],[41],[41],-12],[157,1,0.2,2,7]]],0,[0,4,1,0,-1,8,0,-1,2,0,-2,4,0,-3,6,0,-1,3,0,13,3,0,-1,5,0,13,5,0,-1,7,0,13,7,0,13,8,0,12,1,12],[0,0,0,0,0,0,0,0],[-1,14,-1,14,-1,14,-1,14],[147,49,75,69,75,69,148,71]],[[{"name":"box chat","rect":{"x":0,"y":0,"width":878,"height":607},"offset":{"x":0,"y":0},"originalSize":{"width":878,"height":607},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[149]],[[[189,"Montserrat-Bold","Montserrat-Bold.ttf"],-1],0,0,[],[],[]],[[[58,"Happy",".mp3",1.619592],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,7],[49,50]],[[{"name":"2","rect":{"x":0,"y":0,"width":442,"height":148},"offset":{"x":0,"y":0},"originalSize":{"width":442,"height":148},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[150]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[15],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[87,"builtin-particle",[{"hash":2554907268,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1720952533,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1759026248,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3775475229,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":52,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[144,[{}],[{}]]],0,0,[0],[7],[37]],[[{"name":"text","rect":{"x":0,"y":0,"width":1058,"height":167},"offset":{"x":0,"y":0},"originalSize":{"width":1058,"height":167},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[10],[151]],[[[58,"BGSound",".mp3",15.098776],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_LIGHTMAP":true},{},{}],[[[{},"mainColor",8,[4,4289045927]],{},{}],11,0,0]]],0,0,[0],[7],[37]],[[[58,"Fullfil-Happy",".mp3",0.653061],-1],0,0,[],[],[]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[{"lineWidth":30},[{"shadowCover":0.493},"mainColor",8,[4,4281677109],"shadeColor1",8,[4,4278190080],"shadeColor2",8,[4,4278190080],"specular",8,[4,1278555445],"emissive",8,[4,4281677109]],{},{}],0,11,0,0]]],0,0,[0],[7],[38]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true},{},{},{}],[[[{"lineWidth":30},"baseColor",8,[4,4289559808]],[{},"mainColor",8,[4,4294967084],"shadeColor1",8,[4,4291258369],"shadeColor2",8,[4,4293689372],"specular",8,[4,1291845543],"emissive",8,[4,4279176975]],{},{}],11,11,0,0]]],0,0,[0],[7],[38]],[[[40,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true,"USE_BASE_COLOR_MAP":true},{"USE_BASE_COLOR_MAP":true},{},{}],[[[{"lineWidth":20},"baseColor",8,[4,4294967295],"baseColorMap",6,0],[{},"mainColor",8,[4,4294967295],"mainTexture",6,1],{},{}],11,11,0,0]]],0,0,[0,0,0],[19,8,7],[52,52,38]],[[[58,"clickSound",".mp3",0.156735],-1],0,0,[],[],[]],[[[58,"loadCustomer",".mp3",0.757551],-1],0,0,[],[],[]]]]
