{"version":3,"sources":["file:///D:/CocosProjects/Amobear/CarJam/assets/Scripts/Customer/CustomerController.ts"],"names":["_decorator","Component","easing","instantiate","math","Node","Prefab","SkeletalAnimation","tween","Vec3","GameInfo","CustomerBehavior","ccclass","property","CustomerController","start","initQueue","currentOption","initializeColorList","createCustomer","customerQueue","position","currentQueue","colorList","i","push","shuffleArray","array","length","j","Math","floor","random","startPos","queueIndex","customerNode","customer","customerBehavior","getComponent","getCustomerColorID","customerColorID","customerID","CurrentIndexCustomer","setPosition","parent","node","currentCustomers","moveCustomerToNext","randomRangeInt","newArrColorID","getRandomValueFromArray","pop","arr","randomIndex","currentIndex","nextIndex","nextPosition","isReady","to","eulerAngles","rotate","smooth","call","play","clearFixMoveCustomer","flag","update","dt","isLose","isWin","timer","interval","firstCumtomer","firstCustomerColorID","result","carStops","find","stop","colorID","goalPoint","id","goalPos","posStops","eulerAngle","moveToGoal","index","queue","splice","maxIndex","forEach","scheduleOnce"],"mappings":"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","sourcesContent":["import { _decorator, Component, easing, game, instantiate, log, math, Node, Prefab, SkeletalAnimation, tween, Vec3 } from 'cc';\nimport { GameInfo } from '../Const/GameInfo';\nimport * as Interface from \"../Const/interface\";\nimport { CustomerBehavior } from './CustomerBehavior';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('CustomerController')\nexport class CustomerController extends Component {\n\n    @property(Prefab)\n    customer: Prefab = null;\n\n    @property(Node)\n    spawnPos: Node = null;\n\n    @property([Node])\n    posStops: Node[] = [];\n\n    CurrentIndexCustomer: number = 1;\n\n    flag: boolean = false;\n\n    randomFirstGame: number = 5;\n\n    private colorList: number[] = [];\n\n\n    private timer = 0;\n    private interval = 0.1;\n\n\n    protected start(): void {\n        this.initQueue();\n\n        if (GameInfo.currentOption === 9) {\n            this.initializeColorList();\n        }\n\n        this.createCustomer(GameInfo.customerQueue[0].position, 0);\n    }\n\n\n    private initQueue(): void {\n        GameInfo.currentQueue = 333;\n\n        if (GameInfo.currentOption === 9) GameInfo.currentQueue = 30;\n    }\n\n\n    private initializeColorList(): void {\n        this.colorList = [];\n        for (let i = 0; i < 10; i++) {\n            this.colorList.push(0, 1, 3);\n        }\n        this.colorList = this.shuffleArray(this.colorList);\n    }\n\n\n    private shuffleArray(array: number[]): number[] {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n\n    private createCustomer(startPos: Vec3, queueIndex: number): void {\n        const customerNode = instantiate(this.customer);\n        const customerBehavior = customerNode.getComponent(CustomerBehavior);\n\n        const random = this.getCustomerColorID();\n\n        customerBehavior.customerColorID = random;\n        customerBehavior.customerID = this.CurrentIndexCustomer;\n\n        // log(\"curent customer:\", this.CurrentIndexCustomer);\n\n        this.CurrentIndexCustomer += 1;\n\n        GameInfo.currentQueue -= 1;\n\n        // Đặt vị trí và thuộc tính ban đầu\n        customerNode.setPosition(startPos);\n        customerNode.parent = this.node;\n\n        GameInfo.currentCustomers.push(customerNode);\n\n        // Bắt đầu di chuyển khách hàng\n        this.moveCustomerToNext(customerNode, queueIndex);\n    }\n\n\n    private getCustomerColorID(): number {\n        // spawn in Red color in first step\n        if (this.CurrentIndexCustomer === 1\n            || this.CurrentIndexCustomer === 2\n            || this.CurrentIndexCustomer === 3)\n            return 5;\n\n        // just spawn 6 color in option 6 (dont set blue_light car yet)\n        if (GameInfo.currentOption === 6) {\n            if (this.CurrentIndexCustomer >= 60) return math.randomRangeInt(0, 4);\n            return math.randomRangeInt(0, 7);\n            // use for forced user lose\n        }\n\n        // full color in option 7\n        else if (GameInfo.currentOption === 7) {\n            return math.randomRangeInt(0, 8);\n        }\n\n        // if current option = 8. just spawn 5 color;\n        else if (GameInfo.currentOption === 8) {\n            let newArrColorID = [7, 2, 5, 1, 0];\n\n            // forced player lose;\n            if (this.CurrentIndexCustomer >= 60) {\n                newArrColorID = [7, 2, 1];\n            }\n\n            return this.getRandomValueFromArray(newArrColorID);\n        }\n\n        // if current option = 9. just spawn 3 color;\n        if (GameInfo.currentOption === 9) {\n            return this.colorList.pop();\n        }\n    }\n\n\n    private getRandomValueFromArray(arr: number[]): number {\n        const randomIndex = Math.floor(Math.random() * arr.length);\n        return arr[randomIndex];\n    }\n\n\n    private moveCustomerToNext(customer: Node, currentIndex: number): void {\n        const nextIndex = currentIndex + 1;\n\n        // // Kiểm tra nếu còn vị trí tiếp theo\n        const nextPosition = GameInfo.customerQueue[nextIndex];\n\n        // // Chỉ di chuyển nếu vị trí tiếp theo trống\n        if (nextPosition && !nextPosition.isReady) {\n            tween(customer)\n                .to(0.1, { position: nextPosition.position, eulerAngles: new Vec3(0, nextPosition.rotate, 0) }, { easing: easing.smooth })\n                .call(() => {\n                    // Cập nhật trạng thái vị trí\n                    GameInfo.customerQueue[currentIndex].isReady = false;\n\n                    // Tiếp tục di chuyển đến vị trí tiếp theo\n                    this.moveCustomerToNext(customer, nextIndex);\n\n                    const customerBehavior = customer.getComponent(CustomerBehavior);\n\n                    if (!GameInfo.customerQueue[GameInfo.customerQueue.length - 1].isReady && customerBehavior.customerID === 1) {\n                        this.createCustomer(GameInfo.customerQueue[0].position, 0)\n                    }\n                })\n                .start();\n        }\n        else {\n            // Nếu khách hàng đến vị trí cuối cùng\n            customer.getComponent(SkeletalAnimation).play(\"idle\");\n            GameInfo.customerQueue[currentIndex].isReady = true;\n        }\n    }\n\n\n    private clearFixMoveCustomer(customer: Node, currentIndex: number): void {\n        const nextIndex = currentIndex + 1;\n\n        // // Kiểm tra nếu còn vị trí tiếp theo\n        const nextPosition = GameInfo.customerQueue[nextIndex];\n\n        // // Chỉ di chuyển nếu vị trí tiếp theo trống\n        if (nextPosition && !nextPosition.isReady) {\n            tween(customer)\n                .to(0.1, { position: nextPosition.position, eulerAngles: new Vec3(0, nextPosition.rotate, 0) }, { easing: easing.smooth })\n                .call(() => {\n                    // Cập nhật trạng thái vị trí\n                    GameInfo.customerQueue[nextIndex].isReady = true;\n                    customer.getComponent(SkeletalAnimation).play(\"idle\");\n                    this.flag = false;\n                })\n                .start();\n        }\n    }\n\n\n    protected update(dt: number): void {\n        if (this.flag || GameInfo.isLose || GameInfo.isWin) return;\n\n        this.timer += dt;\n        if (this.timer >= this.interval) {\n            this.timer = 0;\n\n\n            let firstCumtomer = GameInfo.currentCustomers[0].getComponent(CustomerBehavior);\n            let firstCustomerColorID = firstCumtomer.customerColorID;\n            let result = GameInfo.carStops.find(stop => stop.isReady === true && stop.colorID === firstCustomerColorID);\n\n            if (result) {\n                this.flag = true;\n\n                firstCumtomer.goalPoint = result.id - 1;\n                firstCumtomer.goalPos = this.posStops[result.id - 1].position;\n\n                if (result.id - 1 > 3) firstCumtomer.eulerAngle = -180;\n\n                firstCumtomer.moveToGoal();\n                GameInfo.customerQueue[15].isReady = false;\n\n                // assign false to all queue\n                for (let index = 0; index < GameInfo.customerQueue.length; index++) {\n                    const queue = GameInfo.customerQueue[index];\n                    queue.isReady = false;\n                };\n\n                GameInfo.currentCustomers.splice(0, 1);\n\n                this.clearFixMoveCustomer(GameInfo.currentCustomers[0], 14);\n\n                const maxIndex = 14;\n                GameInfo.currentCustomers.forEach((customer, index) => {\n                    const currentIndex = maxIndex - index // Tính chỉ số ngược từ 14 về 0\n                    this.clearFixMoveCustomer(customer, currentIndex);\n                });\n\n                if (GameInfo.currentQueue !== 0) this.createCustomer(GameInfo.customerQueue[0].position, 0);\n                else this.scheduleOnce(() => {\n                    GameInfo.isWin = true;\n                }, 2.5)\n            }\n        }\n\n\n    }\n}\n\n\n"]}