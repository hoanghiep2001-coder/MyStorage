{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/Billiard/assets/Ops/Op13/Scripts/GamePlay/BallRandom.ts"],"names":["_decorator","Component","Material","MeshRenderer","Node","Utility","Ball","ccclass","property","MapMaterialNode","Number","BallRandom","start","meshBall8","node","parent","getComponent","Init","map","index","ballUI","randomIndexSmallMaterialBall","RandomRangeInteger","smallBallMaterial","length","randomIndexBigMaterialBall","bigBallMaterial","materialSmall","materialBig","x","RandomRangeFloat","meshBall11","setMaterial","proPerMeshBall11","GetProper","meshBall15","proPerMeshBall15","splice","mergedArrayMaterial","concat","shuffleArray","i","randomIndexBall","meshBall","ball","prop","mat","material","array","j","Math","floor","random"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, log, Material, MeshRenderer, Node, random, utils } from 'cc';\nimport Utility from '../Utility3D/Utility';\nimport { Ball } from './Ball';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('MapMaterialNode')\nclass MapMaterialNode {\n    @property(Material)\n    material: Material = null;\n\n    @property(Node)\n    ballUI: Node = null;\n\n    @property(Number)\n    index: number = 0;\n}\n\n@ccclass('BallRandom')\nexport class BallRandom extends Component {\n\n    @property(Material)\n    smallBallMaterial: Material[] = [];\n\n    @property(Material)\n    bigBallMaterial: Material[] = [];\n\n    @property(MeshRenderer)\n    meshBall8: MeshRenderer = null;\n\n    @property(MeshRenderer)\n    meshBall11: MeshRenderer = null;\n\n    @property(MeshRenderer)\n    meshBall15: MeshRenderer = null;\n\n    @property(MeshRenderer)\n    meshBall: MeshRenderer[] = [];\n\n    @property(MapMaterialNode)\n    map: MapMaterialNode[] = [];\n\n    \n    start() {\n        this.meshBall8.node.parent.getComponent(Ball).Init(this.map[7].index, this.map[7].ballUI);\n        var randomIndexSmallMaterialBall = Utility.RandomRangeInteger(0, this.smallBallMaterial.length - 1);\n        var randomIndexBigMaterialBall = Utility.RandomRangeInteger(0, this.bigBallMaterial.length - 1);\n\n        var materialSmall = this.smallBallMaterial[randomIndexSmallMaterialBall];\n        var materialBig = this.bigBallMaterial[randomIndexBigMaterialBall];\n        var x = Utility.RandomRangeFloat(0, 10);\n        if (x % 2 == 0) {\n\n\n            this.meshBall11.setMaterial(materialSmall, 0);\n            var proPerMeshBall11 = this.GetProper(materialSmall);\n            this.meshBall11.node.parent.getComponent(Ball).Init(proPerMeshBall11.index, proPerMeshBall11.ballUI);\n\n\n            this.meshBall15.setMaterial(materialBig, 0);\n            var proPerMeshBall15 = this.GetProper(materialBig);\n            this.meshBall15.node.parent.getComponent(Ball).Init(proPerMeshBall15.index, proPerMeshBall15.ballUI);\n\n        } else {\n\n            this.meshBall11.setMaterial(materialBig, 0);\n            var proPerMeshBall11 = this.GetProper(materialBig);\n            this.meshBall11.node.parent.getComponent(Ball).Init(proPerMeshBall11.index, proPerMeshBall11.ballUI);\n\n            this.meshBall15.setMaterial(materialSmall, 0);\n            var proPerMeshBall15 = this.GetProper(materialSmall);\n            this.meshBall15.node.parent.getComponent(Ball).Init(proPerMeshBall15.index, proPerMeshBall15.ballUI);\n        }\n\n\n        this.bigBallMaterial.splice(randomIndexBigMaterialBall, 1);\n        this.smallBallMaterial.splice(randomIndexSmallMaterialBall, 1);\n\n        let mergedArrayMaterial: Material[] = this.smallBallMaterial.concat(this.bigBallMaterial);\n        mergedArrayMaterial = this.shuffleArray(mergedArrayMaterial);\n\n\n        for (let i = 0; i < mergedArrayMaterial.length; i++) {\n            var randomIndexBall = Utility.RandomRangeInteger(0, this.meshBall.length - 1);\n            var ball = this.meshBall[randomIndexBall];\n            ball.setMaterial(mergedArrayMaterial[i], 0);\n\n            var prop = this.GetProper(mergedArrayMaterial[i]);\n            ball.node.parent.getComponent(Ball).Init(prop.index, prop.ballUI);\n            this.meshBall.splice(randomIndexBall, 1);\n        }\n        // [3]\n    }\n\n\n    GetProper(mat: Material) {\n        for (let i = 0; i < this.map.length; i++) {\n            if (mat == this.map[i].material) {\n                return this.map[i];\n            }\n        }\n    }\n\n\n    shuffleArray(array: any[]): any[] {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]]; // Hoán đổi vị trí của phần tử\n        }\n        return array;\n    }\n}\n\n"]}