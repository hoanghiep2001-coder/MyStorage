{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/Billiard/assets/Ops/Op12/Scripts/GamePlay/BallRandom.ts"],"names":["_decorator","Component","Material","Node","ccclass","property","MapMaterialNode","Number","BallRandom","start"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAgBC,MAAAA,Q,OAAAA,Q;AAAwBC,MAAAA,I,OAAAA,I;;;;;;;OAOvD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;AAIxBM,MAAAA,e,WADLF,OAAO,CAAC,iBAAD,C,UAEHC,QAAQ,CAACH,QAAD,C,UAGRG,QAAQ,CAACF,IAAD,C,UAGRE,QAAQ,CAACE,MAAD,C,oCARb,MACMD,eADN,CACsB;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA,O;;;;;iBAEG,I;;;;;;;iBAGN,I;;;;;;;iBAGC,C;;;;4BAIPE,U,YADZJ,OAAO,CAAC,YAAD,C,kBAAR,MACaI,UADb,SACgCP,SADhC,CAC0C;AAEtC;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGAQ,QAAAA,KAAK,GAAG,CAEJ;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,SA/EqC,CAkFtC;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjGsC,O","sourcesContent":["\nimport { _decorator, Component, log, Material, MeshRenderer, Node, random, utils } from 'cc';\nimport Utility from '../Utility3D/Utility';\nimport { Ball } from './Ball';\nimport EventManager from '../Utility3D/Observer/EventManager';\nimport Global from '../Utility3D/Global';\nimport { GameManager } from '../Utility3D/GameManager';\nimport { SoundManager } from '../Utility3D/SoundManager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('MapMaterialNode')\nclass MapMaterialNode {\n    @property(Material)\n    material: Material = null;\n\n    @property(Node)\n    ballUI: Node = null;\n\n    @property(Number)\n    index: number = 0;\n}\n\n@ccclass('BallRandom')\nexport class BallRandom extends Component {\n\n    // @property(Material)\n    // smallBallMaterial: Material[] = [];\n\n    // @property(Material)\n    // bigBallMaterial: Material[] = [];\n\n    // @property(MeshRenderer)\n    // meshBall8: MeshRenderer = null;\n\n    // @property(MeshRenderer)\n    // meshBall11: MeshRenderer = null;\n\n    // @property(MeshRenderer)\n    // meshBall15: MeshRenderer = null;\n\n    // @property(MeshRenderer)\n    // meshBall: MeshRenderer[] = [];\n\n    // @property(MapMaterialNode)\n    // map: MapMaterialNode[] = [];\n\n    \n    start() {\n\n        // SoundManager.Instance(SoundManager).PlaySound(\"HitPocket\");\n\n        // EventManager.instance.emit(Global.SpawnPotedBall, 3);\n\n        // GameManager.Instance(GameManager).ActiveTextPraise();\n        // this.meshBall8.node.parent.getComponent(Ball).Init(this.map[7].index, this.map[7].ballUI);\n        // var randomIndexSmallMaterialBall = Utility.RandomRangeInteger(0, this.smallBallMaterial.length - 1);\n        // var randomIndexBigMaterialBall = Utility.RandomRangeInteger(0, this.bigBallMaterial.length - 1);\n\n        // var materialSmall = this.smallBallMaterial[randomIndexSmallMaterialBall];\n        // var materialBig = this.bigBallMaterial[randomIndexBigMaterialBall];\n        // var x = Utility.RandomRangeFloat(0, 10);\n        // if (x % 2 == 0) {\n\n\n        //     this.meshBall11.setMaterial(materialSmall, 0);\n        //     var proPerMeshBall11 = this.GetProper(materialSmall);\n        //     this.meshBall11.node.parent.getComponent(Ball).Init(proPerMeshBall11.index, proPerMeshBall11.ballUI);\n\n\n        //     this.meshBall15.setMaterial(materialBig, 0);\n        //     var proPerMeshBall15 = this.GetProper(materialBig);\n        //     this.meshBall15.node.parent.getComponent(Ball).Init(proPerMeshBall15.index, proPerMeshBall15.ballUI);\n\n        // } else {\n\n        //     this.meshBall11.setMaterial(materialBig, 0);\n        //     var proPerMeshBall11 = this.GetProper(materialBig);\n        //     this.meshBall11.node.parent.getComponent(Ball).Init(proPerMeshBall11.index, proPerMeshBall11.ballUI);\n\n        //     this.meshBall15.setMaterial(materialSmall, 0);\n        //     var proPerMeshBall15 = this.GetProper(materialSmall);\n        //     this.meshBall15.node.parent.getComponent(Ball).Init(proPerMeshBall15.index, proPerMeshBall15.ballUI);\n        // }\n\n\n        // this.bigBallMaterial.splice(randomIndexBigMaterialBall, 1);\n        // this.smallBallMaterial.splice(randomIndexSmallMaterialBall, 1);\n\n        // let mergedArrayMaterial: Material[] = this.smallBallMaterial.concat(this.bigBallMaterial);\n        // mergedArrayMaterial = this.shuffleArray(mergedArrayMaterial);\n\n\n        // for (let i = 0; i < mergedArrayMaterial.length; i++) {\n        //     var randomIndexBall = Utility.RandomRangeInteger(0, this.meshBall.length - 1);\n        //     var ball = this.meshBall[randomIndexBall];\n        //     ball.setMaterial(mergedArrayMaterial[i], 0);\n\n        //     var prop = this.GetProper(mergedArrayMaterial[i]);\n        //     ball.node.parent.getComponent(Ball).Init(prop.index, prop.ballUI);\n        //     this.meshBall.splice(randomIndexBall, 1);\n        // }\n        // [3]\n    }\n\n\n    // GetProper(mat: Material) {\n    //     for (let i = 0; i < this.map.length; i++) {\n    //         if (mat == this.map[i].material) {\n    //             return this.map[i];\n    //         }\n    //     }\n    // }\n\n\n    // shuffleArray(array: any[]): any[] {\n    //     for (let i = array.length - 1; i > 0; i--) {\n    //         const j = Math.floor(Math.random() * (i + 1));\n    //         [array[i], array[j]] = [array[j], array[i]]; // Hoán đổi vị trí của phần tử\n    //     }\n    //     return array;\n    // }\n}\n\n"]}