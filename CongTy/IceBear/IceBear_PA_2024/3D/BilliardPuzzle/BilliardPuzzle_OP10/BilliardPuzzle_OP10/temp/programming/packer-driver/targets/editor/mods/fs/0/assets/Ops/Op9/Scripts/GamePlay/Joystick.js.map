{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/BilliardPuzzle_Op10/assets/Ops/Op9/Scripts/GamePlay/Joystick.ts"],"names":["_decorator","Camera","Component","screen","Node","Quat","Vec2","Vec3","Global","SoundManager","Constants","ccclass","property","Joystick","ZERO","start","node","on","EventType","TOUCH_START","onMouseDown","TOUCH_MOVE","onMouseMove","TOUCH_CANCEL","onMouseUp","TOUCH_END","event","touchPowerBar","guide","active","isRotating","startPos","getLocation","unscheduleAllCallbacks","boolCanPlaySound","endGame","ironSource","SoundState","Instance","adjustAngle","play","scheduleOnce","direction1","subtract","vectorOrigin","currentPos","direction2","angle1","Math","atan2","y","x","angle2","angleBetween","PI","rotateNodeAroundY","targetNode","angle","axis","rotationQuat","fromAxisAngle","rotation","clone","multiply","update","dt","windowSize","width","height"],"mappings":"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","sourcesContent":["\nimport { _decorator, Camera, Canvas, Component, Director, EventMouse, EventTouch, game, screen, Game, log, macro, Mat4, math, misc, Node, Quat, UITransform, Vec2, Vec3, view } from 'cc';\nimport Global from '../Utility3D/Global';\nimport { SoundManager } from '../Utility3D/SoundManager';\nimport { Constants } from '../Utility3D/Constant';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = Joystick\n * DateTime = Wed May 22 2024 14:20:42 GMT+0700 (Indochina Time)\n * Author = PhongDNRocket123\n * FileBasename = Joystick.ts\n * FileBasenameNoExtension = Joystick\n * URL = db://assets/Scripts/GamePlay/Joystick.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n\n@ccclass('Joystick')\nexport class Joystick extends Component {\n\n    @property(Node)\n    targetNode: Node = null!;\n\n    @property(Node)\n    ball: Node = null!;\n\n    @property(Camera)\n    mainCam: Camera = null!;\n\n    @property(Node)\n    guide: Node = null;\n\n    startPos: Vec2 = Vec2.ZERO;\n    private isRotating: boolean = false;\n    speedRotation: number = 1;\n\n\n    direction1: Vec2 = Vec2.ZERO;\n    direction2: Vec2 = Vec2.ZERO;\n\n    mag1: number = 0;\n    mag2: number = 0;\n    start() {\n        this.node.on(Node.EventType.TOUCH_START, this.onMouseDown, this);\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onMouseMove, this);\n        this.node.on(Node.EventType.TOUCH_CANCEL, this.onMouseUp, this);\n        this.node.on(Node.EventType.TOUCH_END, this.onMouseUp, this);\n\n\n    }\n\n    boolFirstMove: boolean = false;\n\n\n    onMouseDown(event: EventTouch) {\n        if (Global.touchPowerBar) return;\n        this.guide.active = false\n        this.isRotating = true;\n        this.startPos = event.getLocation();\n    }\n\n    onMouseUp() {\n        this.isRotating = false;\n        this.unscheduleAllCallbacks();\n        this.boolCanPlaySound = true;\n    }\n    boolCanPlaySound: boolean = true;\n\n\n    onMouseMove(event: EventTouch) {\n        if (Global.endGame) return;\n\n        if (Global.touchPowerBar) return;\n        if (this.isRotating) {\n            while (this.boolCanPlaySound) {\n                if (Constants.ironSource.SoundState) {\n                    SoundManager.Instance(SoundManager).adjustAngle.play();\n                }\n                this.boolCanPlaySound = false;\n                this.scheduleOnce(() => {\n                    this.boolCanPlaySound = true;\n                }, 0.5);\n            }\n\n            this.direction1 = Vec2.subtract(new Vec2(), this.startPos, this.vectorOrigin);\n\n            let currentPos = event.getLocation();\n            this.direction2 = Vec2.subtract(new Vec2(), currentPos, this.vectorOrigin);\n            //log(this.direction2);\n\n            let angle1 = Math.atan2(this.direction1.y, this.direction1.x);\n            let angle2 = Math.atan2(this.direction2.y, this.direction2.x);\n    \n            let angleBetween = angle2 - angle1;\n    \n            if (angleBetween > Math.PI) {\n                angleBetween -= 2 * Math.PI;\n            } else if (angleBetween < -Math.PI) {\n                angleBetween += 2 * Math.PI;\n            }\n         \n            this.rotateNodeAroundY(this.targetNode, angleBetween);\n            this.startPos = currentPos;\n        }\n\n    }\n\n    // Phương thức xoay node quanh trục Y\n    rotateNodeAroundY(node: Node, angle: number) {\n        let axis = new Vec3(0, 1, 0); // Trục Y\n\n        // Tính toán ma trận quay từ trục và góc xoay\n        let rotationQuat = new Quat();\n        Quat.fromAxisAngle(rotationQuat, axis, angle);\n\n        // Áp dụng ma trận quay vào node\n        let rotation = node.rotation.clone();\n        Quat.multiply(rotation, rotation, rotationQuat);\n        node.rotation = rotation;\n        //   node.rotate(rotationQuat, Node.NodeSpace.WORLD);\n    }\n\n\n    vectorOrigin: Vec2 = Vec2.ZERO;\n    protected update(dt: number): void {\n        this.vectorOrigin = new Vec2(screen.windowSize.width / 2, screen.windowSize.height / 2);\n        //log(this.vectorOrigin);\n    }\n\n}\n"]}