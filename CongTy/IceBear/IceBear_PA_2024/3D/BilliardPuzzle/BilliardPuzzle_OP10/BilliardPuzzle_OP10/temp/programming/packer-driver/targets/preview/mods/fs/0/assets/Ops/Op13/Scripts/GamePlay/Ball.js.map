{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/Billiard/assets/Ops/Op13/Scripts/GamePlay/Ball.ts"],"names":["_decorator","Component","Node","RigidBody","SphereCollider","tween","Vec3","EventManager","Global","GameManager","SoundManager","ccclass","property","Ball","ZERO","onEnable","prePos","node","getPosition","instance","on","ActiveRb","ResetGame","ResetBall","rb","useCCD","collider","getComponent","onTriggerEnter","onCollisionEnter","start","Init","index","ballUI","indexBall","type","Type","DYNAMIC","linearFactor","angularFactor","angularDamping","linearDamping","useGravity","event","otherCollider","getGroup","Instance","PlaySound","otherTrigger","enabled","RollIOnHole","hole","boolOnHole","clearVelocity","to","position","getWorldPosition","call","active","emit","SpawnPotedBall","ActiveTextPraise","firstShoot","setWorldPosition","setRotationFromEuler","KINEMATIC","update","dt","CalculateShadow","shadow","setWorldRotationFromEuler"],"mappings":"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","sourcesContent":["\nimport { _decorator, Collider, Component, Director, game, ICollisionEvent, ITriggerEvent, Layers, log, math, Node, physics, RigidBody, SphereCollider, tween, Vec3 } from 'cc';\nimport EventManager from '../Utility3D/Observer/EventManager';\nimport Global from '../Utility3D/Global';\nimport { GameManager } from '../Utility3D/GameManager';\nimport { SoundManager } from '../Utility3D/SoundManager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('Ball')\nexport class Ball extends Component {\n\n    @property(RigidBody)\n    rb: RigidBody = null;\n\n    @property(Node)\n    shadow: Node = null;\n\n    collider: Collider = null;\n\n    ballUI: Node = null;\n\n    indexBall: number = null;\n\n    prePos: Vec3 = Vec3.ZERO;\n\n\n    protected onEnable(): void {\n        this.prePos = this.node.getPosition();\n        EventManager.instance.on(Global.ActiveRb, this.ActiveRb, this);\n        EventManager.instance.on(Global.ResetGame, this.ResetBall, this);\n        this.rb.useCCD = true;\n        this.collider = this.node.getComponent(SphereCollider);\n        this.collider.on('onTriggerEnter', this.onTriggerEnter, this);\n        this.collider.on('onCollisionEnter', this.onCollisionEnter, this);\n    }\n\n\n    protected start(): void {\n\n    }\n\n\n    Init(index: number, ballUI: Node) {\n        this.indexBall = index;\n        this.ballUI = ballUI;\n    }\n\n\n    ActiveRb() {\n        this.rb.type = RigidBody.Type.DYNAMIC;\n        this.rb.useCCD = true;\n        this.rb.linearFactor = new Vec3(1, 1, 1);\n        this.rb.angularFactor = new Vec3(1, 1, 1);\n        this.rb.angularDamping = 0.7;\n        this.rb.linearDamping = 0.2;\n        this.rb.useGravity = true;\n    }\n\n\n    protected onCollisionEnter(event: ICollisionEvent) {\n        const otherCollider = event.otherCollider;\n        if (event.type === 'onCollisionEnter') {\n            //this.rb.clearForces();\n            if (otherCollider.getGroup() === 2) {\n                SoundManager.Instance(SoundManager).PlaySound(\"HitBall\");\n                // log(\"clear force\");\n                // this.rb.clearForces();\n            }\n            if (otherCollider.getGroup() === 8) {\n                //   SoundManager.Instance(SoundManager).PlaySound(\"HitEdge\");\n                //   log(\"clear force\");\n                //this.rb.clearForces();\n            }\n            //  log(\"clear force\");\n        }\n    }\n\n\n    protected onTriggerEnter(event: ITriggerEvent) {\n        const otherTrigger = event.otherCollider;\n\n        if (event.type === 'onTriggerEnter') {\n            //    log(this.node.name + \" trigger \" + otherTrigger.node.name);\n            if (otherTrigger.getGroup() === 8) {\n\n                SoundManager.Instance(SoundManager).PlaySound(\"HitPocket\");\n\n                this.rb.enabled = false;\n                this.RollIOnHole(otherTrigger.node);\n\n            }\n        }\n    }\n\n    boolOnHole: boolean = false;\n    RollIOnHole(hole: Node) {\n        if (this.boolOnHole) return;\n        this.boolOnHole = true;\n        this.rb.clearVelocity();\n        tween(this.node).\n            to(0.08, { position: hole.getWorldPosition() })\n            .call(() => {\n                this.collider.enabled = false;\n                if (this.ballUI) {\n                    this.ballUI.active = false;\n                }\n                this.node.active = false;\n                //   \n                EventManager.instance.emit(Global.SpawnPotedBall, this.indexBall);\n                GameManager.Instance(GameManager).ActiveTextPraise();\n            })\n            .start();\n    }\n\n\n    public ResetBall() {\n        if (this.boolOnHole) return;\n        if (Global.firstShoot) return;\n        this.node.setWorldPosition(this.prePos);\n        this.node.setRotationFromEuler(90, 90, 0);\n        this.rb.type = RigidBody.Type.KINEMATIC;\n        this.rb.useGravity = false;\n        this.rb.enabled = true;\n        this.collider.enabled = true;\n\n    }\n\n    protected update(dt: number): void {\n        this.CalculateShadow();\n    }\n    CalculateShadow() {\n        this.shadow.setWorldRotationFromEuler(-90, 0, 0);\n    }\n\n\n}\n\n\n"]}