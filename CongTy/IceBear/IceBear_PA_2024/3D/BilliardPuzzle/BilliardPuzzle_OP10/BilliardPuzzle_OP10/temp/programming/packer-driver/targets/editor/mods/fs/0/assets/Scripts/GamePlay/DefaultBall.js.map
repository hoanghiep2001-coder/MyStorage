{"version":3,"sources":["file:///D:/PA/IceBear_PA_2024/3D/BilliardPuzzle/BilliardPuzzle_OP10/BilliardPuzzle_OP10/assets/Scripts/GamePlay/DefaultBall.ts"],"names":["_decorator","log","SphereCollider","Vec3","Ball","EventManager","Global","SoundManager","ccclass","property","DefaultBall","ZERO","onEnable","prePos","node","getPosition","lastPos","instance","on","ActiveRb","ResetGame","ResetThisBall","rb","useCCD","collider","getComponent","onCollisionEnter","onTriggerEnter","event","otherTrigger","otherCollider","type","getGroup","emit","active","isDefaultBallFall","enabled","scheduleOnce","checkMoving","linearVelocity","getLinearVelocity","length","update","dt","CalculateShadow","Instance","PlaySound","clearForces","setPosition","ResetBall"],"mappings":"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","sourcesContent":["import { _decorator, Collider, Component, ICollisionEvent, ITriggerEvent, log, Node, RigidBody, SphereCollider, Vec3 } from 'cc';\nimport { Ball } from './Ball';\nimport EventManager from '../Utility3D/Observer/EventManager';\nimport Global from '../Utility3D/Global';\nimport { SoundManager } from '../Utility3D/SoundManager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('DefaultBall')\nexport class DefaultBall extends Ball {\n\n    prePos: Vec3 = Vec3.ZERO;\n    lastPos: Vec3 = Vec3.ZERO;\n\n    // rb: RigidBody = null;\n\n\n    protected onEnable(): void {\n        this.prePos = this.node.getPosition();\n        // log(this.prePos);\n        this.lastPos = this.prePos;\n        EventManager.instance.on(Global.ActiveRb, this.ActiveRb, this);\n        EventManager.instance.on(Global.ResetGame, this.ResetThisBall, this);\n        this.prePos = this.node.getPosition();\n        this.rb.useCCD = true;\n        this.collider = this.node.getComponent(SphereCollider);\n        this.collider.on('onCollisionEnter', this.onCollisionEnter, this);\n        this.collider.on('onTriggerEnter', this.onTriggerEnter, this);\n    }\n\n\n    protected onTriggerEnter(event: ITriggerEvent) {\n        const otherTrigger = event.otherCollider;\n\n        if (event.type === 'onTriggerEnter') {\n\n            if (otherTrigger.getGroup() === 32) {\n                EventManager.instance.emit(Global.ActiveRb);\n                otherTrigger.node.active = false;\n            }\n\n\n            if (otherTrigger.getGroup() === 8) {\n                Global.isDefaultBallFall = true;\n\n                this.node.active = false;\n                this.collider.enabled = false;\n                this.scheduleOnce(() => {\n                    EventManager.instance.emit(Global.ResetGame);\n                }, 0.25);\n            }\n        }\n    }\n\n\n    checkMoving() {\n         let linearVelocity: Vec3 = new Vec3();\n        this.rb.getLinearVelocity(linearVelocity);\n\n        // if (this.lastPos.clone().subtract(this.node.position.clone()).normalize().length() > 0) {\n        //     this.lastPos = this.node.getPosition();\n        //     return true;\n        // }\n        // return false;\n\n        if (linearVelocity.length() > 0) {\n            log(\"moving\")\n            return true;\n        }\n        return false;\n    }\n\n\n    protected update(dt: number): void {\n        this.CalculateShadow();\n    }\n\n\n    protected onCollisionEnter(event: ICollisionEvent) {\n        const otherCollider = event.otherCollider;\n        if (event.type === 'onCollisionEnter') {\n            //this.rb.clearForces();\n            if (otherCollider.getGroup() === 2) {\n                SoundManager.Instance(SoundManager).PlaySound(\"HitBall\");\n                this.rb.clearForces();\n            }\n            if (otherCollider.getGroup() === 8) {\n                SoundManager.Instance(SoundManager).PlaySound(\"HitEdge\");\n            }\n        }\n    }\n\n\n    ResetThisBall(): void {\n        this.node.setPosition(this.prePos);\n        this.node.active = true;\n        this.collider.enabled = true;\n    }\n\n\n    public ResetBall(): void {\n\n    }\n\n}\n\n\n"]}