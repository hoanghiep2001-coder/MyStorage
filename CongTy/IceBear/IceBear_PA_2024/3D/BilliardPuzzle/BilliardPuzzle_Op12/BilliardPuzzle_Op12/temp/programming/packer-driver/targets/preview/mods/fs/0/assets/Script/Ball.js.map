{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/BilliardPuzzle_OP9/assets/Script/Ball.ts"],"names":["_decorator","Component","Node","AudioClip","AudioSource","Main","ccclass","property","Ball","FixedPositionX","pos","node","position","setPosition","x","z","StartAudioId","audioId","addComponent","clip","loop","play","start","update"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAA4CC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;;AAE9EC,MAAAA,I,iBAAAA,I;;;;;;;OADH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;sBAGjBQ,I,WADZF,OAAO,CAAC,MAAD,C,UAEHC,QAAQ;AAAA;AAAA,uB,UAGRA,QAAQ,CAACL,IAAD,C,UAGRK,QAAQ,CAACL,IAAD,C,UAGRK,QAAQ,CAACL,IAAD,C,UAGRK,QAAQ,CAACL,IAAD,C,UAKRK,QAAQ,CAACJ,SAAD,C,UAGRI,QAAQ,CAACJ,SAAD,C,UAGRI,QAAQ,CAACJ,SAAD,C,oCAzBb,MACaK,IADb,SAC0BP,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,2CA2BjB,IA3BiB;AAAA;;AA6BhCQ,QAAAA,cAAc,GAAG;AACb,cAAMC,GAAG,GAAG,KAAKC,IAAL,CAAUC,QAAtB;AACA,eAAKD,IAAL,CAAUE,WAAV,CAAsBH,GAAG,CAACI,CAA1B,EAA6B,CAA7B,EAAgCJ,GAAG,CAACK,CAApC;AACH;;AAEDC,QAAAA,YAAY,CAACC,OAAD,EAAU;AAClB,eAAKA,OAAL,GAAe,KAAKN,IAAL,CAAUO,YAAV,CAAuBd,WAAvB,CAAf;AACA,eAAKa,OAAL,CAAaE,IAAb,GAAoBF,OAApB;AACA,eAAKA,OAAL,CAAaG,IAAb,GAAoB,KAApB;AACA,eAAKH,OAAL,CAAaI,IAAb;AACH;;AAEDC,QAAAA,KAAK,GAAG,CACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACH,SAhE+B,CAkEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,QAAAA,MAAM,GAAG;AACL,eAAKd,cAAL;AACH;;AA3F+B,O;;;;;;;;;;iBAKlB,I;;;;;;;iBAGI,I;;;;;;;iBAGF,I;;;;;;;iBAGC,I;;;;;;;iBAKiB,I;;;;;;;iBAGH,I;;;;;;;iBAGE,I","sourcesContent":["\nimport { _decorator, Component, Node, Collider, ICollisionEvent, Animation, AudioClip, AudioSource } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { Main } from \"./Main\";\n@ccclass('Ball')\nexport class Ball extends Component {\n    @property(Main)\n    Main: Main;\n\n    @property(Node)\n    Bling: Node = null;\n\n    @property(Node)\n    Round_Red: Node = null;\n\n    @property(Node)\n    Gr_Hole: Node = null;\n\n    @property(Node)\n    Ef_combo: Node = null;\n\n    // \n\n    @property(AudioClip)\n    Collider_Table_Audio: AudioClip = null;\n\n    @property(AudioClip)\n    Collider_01_Audio: AudioClip = null;\n\n    @property(AudioClip)\n    Collider_Ball_Audio: AudioClip = null;\n\n    audioId: any = null;\n    \n    FixedPositionX() {\n        const pos = this.node.position;\n        this.node.setPosition(pos.x, 0, pos.z);\n    }\n\n    StartAudioId(audioId) {\n        this.audioId = this.node.addComponent(AudioSource);\n        this.audioId.clip = audioId;\n        this.audioId.loop = false;\n        this.audioId.play();\n    }\n\n    start() {\n        // let myCollider = this.node.getComponent(Collider);\n        // myCollider.on(\"onCollisionEnter\", (target: ICollisionEvent) => {\n        //     const isPhysic = target.otherCollider.node;\n        //     if (isPhysic._name.indexOf('hole') != -1) {\n        //         if (this.node._name == 'Ball_09') {\n        //             this.StartAudioId(this.Win_Audio);\n        //             this.activeHole(isPhysic._name);\n        //         } else {\n        //             this.activeRoundRedHole(isPhysic._name);\n        //         }\n        //         console.log(isPhysic._name);\n        //         this.node.active = false;\n        //     }\n\n        //     if (isPhysic._name.indexOf('collider_table') != -1) {\n        //         this.StartAudioId(this.Collider_Table_Audio);\n        //     }\n\n        //     if (isPhysic._name.indexOf('Ball_09') != -1) {\n        //         this.StartAudioId(this.Collider_01_Audio);\n        //     }\n        // })\n    }\n\n    // activeHole(key) {\n    //     this.StartAudioId(this.Main.StartAudioId(this.Main.Win_Audio));\n    //     this.Gr_Hole._children.forEach(element => {\n    //         if (element._name == key) {\n    //             this.Ef_combo.active = true;\n    //             this.Bling.setPosition(element.getPosition());\n    //             this.Bling.active = true;\n    //             this.Main.flagStatusBall_09 = true;\n    //             this.Bling.getComponent(Animation).play();\n    //         }\n    //     });\n    // }\n    // activeRoundRedHole(key) {\n    //     this.StartAudioId(this.Main.StartAudioId(this.Main.Lose_Audio));\n    //     this.Gr_Hole._children.forEach(element => {\n    //         if (element._name == key) {\n    //             this.Round_Red.setPosition(element.getPosition());\n    //             this.Round_Red.active = true;\n    //             this.Main.flagStatusBall_00 = true;\n    //             this.Bling.getComponent(Animation).play();\n    //         }\n    //     });\n    // }\n    update() {\n        this.FixedPositionX();\n    }\n\n}\n"]}