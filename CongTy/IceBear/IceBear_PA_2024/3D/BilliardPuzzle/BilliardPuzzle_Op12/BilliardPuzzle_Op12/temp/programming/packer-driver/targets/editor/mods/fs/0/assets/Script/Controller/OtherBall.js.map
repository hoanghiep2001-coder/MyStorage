{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/BilliardPuzzle_Op12/assets/Script/Controller/OtherBall.ts"],"names":["_decorator","Collider","Component","AudioManager","Constants","ccclass","property","OtherBall","start","myCollider","node","getComponent","on","target","isPhysic","otherCollider","name","indexOf","isWin","playSound","SoundTrack","inHoleSound","activeHole","scoreCount","active","collideWallSound","collideBallSound","key","GoalSound"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,S,OAAAA,S;;AACtBC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;2BAIjBO,S,WADZF,OAAO,CAAC,WAAD,C,UAGHC,QAAQ;AAAA;AAAA,uC,oCAHb,MACaC,SADb,SAC+BL,SAD/B,CACyC;AAAA;AAAA;;AAAA;AAAA;;AAK3BM,QAAAA,KAAK,GAAS;AACpB,cAAIC,UAAU,GAAG,KAAKC,IAAL,CAAUC,YAAV,CAAuBV,QAAvB,CAAjB;AACAQ,UAAAA,UAAU,CAACG,EAAX,CAAc,kBAAd,EAAmCC,MAAD,IAA6B;AAC3D,kBAAMC,QAAQ,GAAGD,MAAM,CAACE,aAAP,CAAqBL,IAAtC;;AACA,gBAAII,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,MAAtB,KAAiC,CAAC,CAAtC,EAAyC;AACrC;AAAA;AAAA,0CAAUC,KAAV,GAAkB,IAAlB;AACA,mBAAKf,YAAL,CAAkBgB,SAAlB,CAA4B;AAAA;AAAA,0CAAUC,UAAV,CAAqBC,WAAjD;AACA,mBAAKC,UAAL,CAAgBR,QAAQ,CAACE,IAAzB;AACA;AAAA;AAAA,0CAAUO,UAAV,IAAwB,CAAxB;AACA,mBAAKb,IAAL,CAAUc,MAAV,GAAmB,KAAnB;AACH;;AAED,gBAAIV,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,gBAAtB,KAA2C,CAAC,CAAhD,EAAmD;AAC/C,mBAAKd,YAAL,CAAkBgB,SAAlB,CAA4B;AAAA;AAAA,0CAAUC,UAAV,CAAqBK,gBAAjD;AACH;;AAED,gBAAIX,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,MAAtB,KAAiC,CAAC,CAAtC,EAAyC;AACrC,mBAAKd,YAAL,CAAkBgB,SAAlB,CAA4B;AAAA;AAAA,0CAAUC,UAAV,CAAqBM,gBAAjD;AACH;AACJ,WAjBD;AAkBH;;AAEOJ,QAAAA,UAAU,CAACK,GAAD,EAAM;AACpB,eAAKxB,YAAL,CAAkBgB,SAAlB,CAA4B;AAAA;AAAA,sCAAUC,UAAV,CAAqBQ,SAAjD,EADoB,CAEpB;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACH;;AAtCoC,O;;;;;iBAGR,I","sourcesContent":["\nimport { _decorator, Collider, Component, ICollisionEvent, Node } from 'cc';\nimport { AudioManager } from '../Plugin/AudioManager';\nimport { Constants } from '../Data/Constant';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('OtherBall')\nexport class OtherBall extends Component {\n\n    @property(AudioManager)\n    AudioManager: AudioManager = null;\n\n    protected start(): void {\n        let myCollider = this.node.getComponent(Collider);\n        myCollider.on(\"onCollisionEnter\", (target: ICollisionEvent) => {\n            const isPhysic = target.otherCollider.node;\n            if (isPhysic.name.indexOf('hole') != -1) {\n                Constants.isWin = true;\n                this.AudioManager.playSound(Constants.SoundTrack.inHoleSound)\n                this.activeHole(isPhysic.name);\n                Constants.scoreCount += 1;\n                this.node.active = false;\n            }\n\n            if (isPhysic.name.indexOf('collider_table') != -1) {\n                this.AudioManager.playSound(Constants.SoundTrack.collideWallSound)\n            }\n\n            if (isPhysic.name.indexOf('Ball') != -1) {\n                this.AudioManager.playSound(Constants.SoundTrack.collideBallSound)\n            }\n        })\n    }\n\n    private activeHole(key) {\n        this.AudioManager.playSound(Constants.SoundTrack.GoalSound)\n        // this.Gr_Hole._children.forEach(element => {\n            // if (element._name == key) {\n            //     this.Ef_combo.active = true;\n            //     this.Bling.setPosition(element.getPosition());\n            //     this.Bling.active = true;\n            //     this.Main.flagStatusBall_09 = true;\n            //     this.Bling.getComponent(Animation).play();\n            // }\n        // });\n    }\n}\n\n"]}