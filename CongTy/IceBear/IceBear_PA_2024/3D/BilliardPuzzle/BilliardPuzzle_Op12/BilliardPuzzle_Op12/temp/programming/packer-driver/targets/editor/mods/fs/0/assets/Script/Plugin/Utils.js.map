{"version":3,"sources":["file:///D:/PA_2024/3D/BilliardPuzzle/BilliardPuzzle_Op12/assets/Script/Plugin/Utils.ts"],"names":["Utils","TouchArea","GamePlay"],"mappings":";;;iBAsFaA,K;;;;;;;;;;;;;;;AAlFb;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGMC,MAAAA,S,GAAY,CACd;AACA;AAFc,O;AAIZC,MAAAA,Q,GAAW,CACb;AACA;AAFa,O;;uBAMJF,K,GAAN,MAAMA,KAAN,CAAY,E;;sBAANA,K,eAEUC,S;;sBAFVD,K,cAGSE,Q","sourcesContent":["import { UITransform, Vec3, tween } from \"cc\";\r\nimport { Constants } from \"../Data/Constant\";\r\n\r\n\r\n// const checkMergeFirstStep = (): void => {\r\n//     for (let i = 0; i < Constants.points_1.length; i++) {\r\n//         let currentNode = Constants.points_1[i];\r\n//         let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n//         let pointBdx = Constants.point.getComponent(UITransform).getBoundingBox();\r\n//         if (nodeBdx.intersects(pointBdx)) {\r\n\r\n//             if (Constants.isMergeStep1States[i]) {\r\n//                 break;\r\n//             }\r\n\r\n//             Constants.isMergeStep1States[i] = true;\r\n//             Constants.dino_lines[i].active = true;\r\n\r\n//             if (Constants.isMergeStep1States.every(state => state === true)) {\r\n//                 Constants.isDoneMergeStep1 = true;\r\n//             }\r\n//             break;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// const checkMergeSecondStep = (): void => {\r\n//     for (let i = 0; i < Constants.points_2.length; i++) {\r\n//         let currentNode = Constants.points_2[i];\r\n//         let nodeBdx = currentNode.getComponent(UITransform).getBoundingBox();\r\n//         let pointBdx = Constants.point.getComponent(UITransform).getBoundingBox();\r\n//         if (nodeBdx.intersects(pointBdx)) {\r\n\r\n//             if (Constants.isMergeStep2States[i]) {\r\n//                 break;\r\n//             }\r\n\r\n//             Constants.isMergeStep2States[i] = true;\r\n//             Constants.dino_lines_2[i].active = true;\r\n\r\n//             if (Constants.isMergeStep2States.every(state => state === true)) {\r\n//                 Constants.isDoneMergeStep2 = true;\r\n//             }\r\n//             break;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// const mergeDinoStep1 = (dino): void => {\r\n//     tween(dino)\r\n//         .to(0.4, {\r\n//             position: new Vec3(-1.1, -15.535, 9.208),\r\n//             scale: new Vec3(0, 0, 0)\r\n//         })\r\n//         .call(() => {\r\n//             dino.active = false;\r\n//         })\r\n//         .start();\r\n// }\r\n\r\n\r\n// const mergeDinoStep2 = (dino): void => {\r\n//     tween(dino)\r\n//         .to(0.4, {\r\n//             position: new Vec3(1.582, -15.535, 9.208),\r\n//             scale: new Vec3(0, 0, 0)\r\n//         })\r\n//         .call(() => {\r\n//             dino.active = false;\r\n//         })\r\n//         .start();\r\n// }\r\n\r\n\r\nconst TouchArea = {\r\n    // checkMergeFirstStep: checkMergeFirstStep,\r\n    // checkMergeSecondStep: checkMergeSecondStep,\r\n}\r\nconst GamePlay = {\r\n    // mergeDinoStep1: mergeDinoStep1,\r\n    // mergeDinoStep2: mergeDinoStep2,\r\n}\r\n\r\n\r\nexport class Utils {\r\n\r\n    static TouchArea = TouchArea;\r\n    static GamePlay = GamePlay;\r\n}\r\n\r\n"]}