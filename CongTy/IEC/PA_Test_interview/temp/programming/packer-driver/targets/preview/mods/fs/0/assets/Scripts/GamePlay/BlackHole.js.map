{"version":3,"sources":["file:///C:/Users/PC%20GM/Desktop/Jobs/WinterWolf_IEC/PA_Test_interview/assets/Scripts/GamePlay/BlackHole.ts"],"names":["_decorator","Collider","Component","easing","log","RigidBody","tween","Vec3","GameInfo","ccclass","property","BlackHole","start","initRigidbody","registerPhysics","rigidbody","getComponent","collider","on","e","otherCollider","node","name","includes","setGroup","bonceAnim","isActiveBounceAnim","scheduleCallback","schedule","bounceTimes","unschedule","speed","currentScale","getScale","scaleUpNumber","newScale","x","y","z","tweenBounceAnim","to","scale","elasticOut","move","radian","moveDirection","Math","sin","cos","normalize","multiplyScalar","deltaTime","pos","setPosition","position","add","update","dt","isTouching","thisWorldPos","worldPosition"],"mappings":"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","sourcesContent":["\nimport { _decorator, Collider, Component, easing, ERigidBodyType, ICollisionEvent, log, Node, RigidBody, tween, Tween, Vec3 } from 'cc';\nimport { GameInfo } from '../CONST/GameInfo';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = BlackHole\n * DateTime = Wed Jan 01 2025 12:13:12 GMT+0700 (Indochina Time)\n * Author = hoanghiep2001\n * FileBasename = BlackHole.ts\n * FileBasenameNoExtension = BlackHole\n * URL = db://assets/Scripts/GamePlay/BlackHole.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n\n@ccclass('BlackHole')\nexport class BlackHole extends Component {\n\n\n    speed: number = 8;\n    deltaTime: number = 0.01;\n    radian: number = null;\n    thisWorldPos: Vec3 = new Vec3();\n\n    rigidbody: RigidBody = null;\n    collider: Collider = null;\n\n    isActiveBounceAnim: boolean = false;\n    scheduleCallback: void = null;\n    bounceTimes: number = 0;\n    tweenBounceAnim: Tween<Node> = null;\n\n\n    protected start(): void {\n        this.initRigidbody();\n        this.registerPhysics();\n    }\n\n\n    private initRigidbody(): void {\n        this.rigidbody = this.getComponent(RigidBody);\n        this.collider = this.getComponent(Collider);\n    }\n\n\n    private registerPhysics(): void {\n        this.collider.on(\"onCollisionEnter\", (e: ICollisionEvent) => {\n\n            if (e.otherCollider.node.name.includes(\"Capsule\")\n                || e.otherCollider.node.name.includes(\"Cube\")\n                || e.otherCollider.node.name.includes(\"Cylinder\")\n            ) {\n                log(e.otherCollider.node.name)\n                e.otherCollider.getComponent(RigidBody).setGroup(0);\n\n                // tween(e.otherCollider.node)\n                // .to(0.1, {worldPosition: this.thisWorldPos}, {easing: easing.smooth})\n                // .start()\n                \n                // e.otherCollider.getComponent(RigidBody).type = ERigidBodyType.DYNAMIC;\n\n                // this.scheduleOnce(() => {\n                //     log(\"destroy\")\n                //     this.node.active = false;\n                //     this.node.destroy();\n                // }, 1);\n            }\n        })\n\n        // this.collider.on(\"onCollisionExit\", (e: ICollisionEvent) => {\n\n        //     if (e.otherCollider.node.name.includes(\"Capsule\")\n        //         || e.otherCollider.node.name.includes(\"Cube\")\n        //         || e.otherCollider.node.name.includes(\"Cylinder\")\n        //     ) {\n        //         e.otherCollider.getComponent(RigidBody).group = 2;   \n        //         e.otherCollider.getComponent(RigidBody).type = ERigidBodyType.STATIC;             \n\n        //     }\n        // })\n    }\n\n\n    public bonceAnim(): void {\n        if(this.isActiveBounceAnim) return;\n\n        this.scheduleCallback = this.schedule(() => {\n            this.isActiveBounceAnim = true;\n\n            if (this.bounceTimes >= 4) {\n                this.unschedule(this.scheduleCallback);\n                return\n            }\n\n            this.bounceTimes += 1;\n            this.speed += 1;\n\n            const currentScale = this.node.getScale(),\n                scaleUpNumber = 0.36,\n             newScale = new Vec3(currentScale.x + scaleUpNumber, currentScale.y + scaleUpNumber, currentScale.z + scaleUpNumber)\n\n            this.tweenBounceAnim = tween(this.node)\n                .to(0.2, { scale: newScale }, { easing: easing.elasticOut })\n                .start();\n        }, 3);\n    }\n\n\n    public move(radian: number): void {\n        const moveDirection = new Vec3(Math.sin(radian), 0, Math.cos(radian));\n        moveDirection.normalize();\n        moveDirection.multiplyScalar(this.speed * this.deltaTime);\n\n        let pos = new Vec3(moveDirection.x, 0, moveDirection.z)\n\n        this.node.setPosition(this.node.position.add(pos));\n    }\n\n\n    protected update(dt: number): void {\n        GameInfo.isTouching && this.move(this.radian);\n        this.thisWorldPos = this.node.worldPosition;\n\n    }\n}\n\n"]}