{"version":3,"sources":["assets\\src\\tetris\\TetrisBoard.ts"],"names":[],"mappings":";;;;;;AAAA,6CAAsC;AAGhC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA2B,yBAAY;IAAvC;QAAA,qEAwRC;QArRW,aAAO,GAAW,CAAC,CAAC;QAEpB,iBAAW,GAAc,IAAI,CAAC;QAE9B,eAAS,GAAW,CAAC,CAAC;QAGtB,aAAO,GAAY,KAAK,CAAC;QACzB,cAAQ,GAAW,CAAC,CAAC;QACrB,aAAO,GAAW,CAAC,CAAC;QACpB,eAAS,GAAW,CAAC,CAAC;QAGtB,YAAM,GAAG;YACb,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAChB,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,CAAC;SACX,CAAC;QACM,eAAS,GAAW,GAAG,CAAC;;IAmQpC,CAAC;IAhQG,sBAAM,GAAN;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAChD,wDAAwD;QACxD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,SAAS,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC9B,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gBACjC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAClC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;gBACvD,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,YAAY,CAAC,mBAAK,CAAC,CAAC;aACvD;SACJ;IACL,CAAC;IAED,oBAAI,GAAJ,UAAK,WAAwB;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED,qBAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,oBAAI,GAAJ;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAEO,qBAAK,GAAb;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aAC9B;SACJ;IACL,CAAC;IAEO,4BAAY,GAApB,UAAqB,CAAS,EAAE,CAAS;QACrC,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,OAAO,CAAC,EAAE,EAAE;YACR,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,0BAAU,GAAlB,UAAmB,MAAkB,EAAE,MAAe;QAAtD,iBAQC;QAPG,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;YAClB,GAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,KAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;iBACpD;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oBAAI,GAAZ;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,2BAAW,GAAX;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;YAClD,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,0CAA0C;YAC1C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7C,yBAAyB;SAC5B;QACD,IAAG,IAAI,CAAC,MAAM,EAAE,GAAC,IAAI,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACxB;aAAI;YACD,IAAM,MAAM,GAAG,UAAU,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED,0BAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QACpB,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,0BAAU,GAAV,UAAW,MAAc;QACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;QAC5B,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;SAC/B;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,4BAAY,GAAZ,UAAa,GAAW;QACpB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,OAAO,EAAE,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC;YAC5B,MAAM,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;gBACxB,OAAO;aACV;SACJ;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,0BAAU,GAAV;QACI,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,KAAK,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACxB,SAAS,KAAK,CAAC;iBAClB;aACJ;YACD,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,EAAE,CAAC;YAEJ,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,QAAQ,GAAG,EAAE,CAAC;YACnC,QAAQ,IAAI,CAAC,CAAC;SACjB;IACL,CAAC;IAED,uBAAO,GAAP;QACI,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;oBACb,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACzC,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,qBAAK,GAAL;QAAA,iBAQC;QAPG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;YAC9B,GAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,CAAC;gBACjB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACb,KAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iBACpE;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAM,GAAN,UAAO,MAAkB,EAAE,GAAW;;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,KAGI;oBACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACf,EALD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAA,EACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAA,CAIV;aACT;SACJ;QAED,IAAI,GAAG,GAAG,CAAC,EAAE;YACT,MAAM,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,OAAO,EAAE,EAAb,CAAa,CAAC,CAAC;SACxC;aAAM;YACH,MAAM,CAAC,OAAO,EAAE,CAAC;SACpB;IACL,CAAC;IAEO,2BAAW,GAAnB,UAAoB,IAAY;QAC5B,IAAI,IAAI,KAAK,GAAG,EAAE;YACd,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACf,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,CAAC;gBACN,CAAC,CAAC,EAAE,CAAC,CAAC;aACT,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACZ,CAAC;SACL;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACP,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACP,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aACV,CAAA;SACJ;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACrB,OAAO;gBACH,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;gBACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aAClB,CAAC,OAAO,EAAE,CAAC;SACf;IACL,CAAC;IAED,sBAAM,GAAN,UAAO,EAAU;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;aACrB;SACJ;IACL,CAAC;IAnRD;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;0CACO;IAE5B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;8CACkB;IAEtC;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CACW;IAPrB,KAAK;QADjB,OAAO;OACK,KAAK,CAwRjB;IAAD,YAAC;CAxRD,AAwRC,CAxR0B,EAAE,CAAC,SAAS,GAwRtC;AAxRY,sBAAK","file":"","sourceRoot":"/","sourcesContent":["import { Piece } from \"./TetrisPiece\";\r\nimport { TetrisScene } from \"./TetrisScene\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class Board extends cc.Component {\r\n\r\n    @property(cc.Integer)\r\n    private colsNum: number = 0;\r\n    @property(cc.Prefab)\r\n    private piecePrefab: cc.Prefab = null;\r\n    @property(cc.Float)\r\n    private frameTime: number = 1;\r\n\r\n    private tetrisScene: TetrisScene;\r\n    private isStart: boolean = false;\r\n    private pastTime: number = 0;\r\n    private rowsNum: number = 0;\r\n    private gridWidth: number = 0;\r\n    private pieceMap: Piece[][];\r\n    private arena: number[][];\r\n    private player = {\r\n        pos: cc.v2(0, 0),\r\n        matrix: null,\r\n        score: 0,\r\n    };\r\n    private nextBlock: string = \"囧\";\r\n\r\n\r\n    onLoad() {\r\n        this.gridWidth = this.node.width / this.colsNum;\r\n        // this.rowsNum = this.node.height / this.gridWidth | 0;\r\n        this.rowsNum = cc.winSize.height / this.gridWidth | 0;\r\n        this.pieceMap = [];\r\n        for (let y = 0; y < this.rowsNum; y++) {\r\n            this.pieceMap[y] = [];\r\n            for (let x = 0; x < this.colsNum; x++) {\r\n                let pieceNode = cc.instantiate(this.piecePrefab);\r\n                this.node.addChild(pieceNode);\r\n                pieceNode.width = this.gridWidth;\r\n                pieceNode.height = this.gridWidth;\r\n                pieceNode.x = x * this.gridWidth + pieceNode.width / 2;\r\n                pieceNode.y = y * this.gridWidth + pieceNode.height / 2;\r\n                this.pieceMap[y][x] = pieceNode.getComponent(Piece);\r\n            }\r\n        }\r\n    }\r\n\r\n    init(tetrisScene: TetrisScene) {\r\n        this.tetrisScene = tetrisScene;\r\n    }\r\n\r\n    reset() {\r\n        this.arena = this.createMatrix(this.colsNum, this.rowsNum);\r\n        this.playerReset();\r\n        this.clear();\r\n        this.draw();\r\n        this.isStart = true;\r\n    }\r\n\r\n    stop() {\r\n        this.isStart = false;\r\n    }\r\n\r\n    private clear() {\r\n        for (let y = 0; y < this.rowsNum; y++) {\r\n            for (let x = 0; x < this.colsNum; x++) {\r\n                this.pieceMap[y][x].hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    private createMatrix(w: number, h: number) {\r\n        const matrix = [];\r\n        while (h--) {\r\n            matrix.push(new Array(w).fill(0));\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    private drawMatrix(matrix: number[][], offset: cc.Vec2) {\r\n        matrix.forEach((row, y) => {\r\n            row.forEach((value, x) => {\r\n                if (value !== 0) {\r\n                    this.pieceMap[y + offset.y][x + offset.x].show();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private draw() {\r\n        this.clear();\r\n        this.drawMatrix(this.arena, cc.v2(0, 0));\r\n        this.drawMatrix(this.player.matrix, this.player.pos);\r\n    }\r\n\r\n    playerReset() {\r\n        this.player.matrix = this.createBlock(this.nextBlock);\r\n        this.player.pos.y = this.rowsNum - this.player.matrix.length;\r\n        this.player.pos.x = (this.arena[0].length / 2 | 0) -\r\n        (this.player.matrix[0].length / 2 | 0);\r\n        if (this.collide()) {\r\n            // this.arena.forEach(row => row.fill(0));\r\n            this.tetrisScene.stopGame(this.player.score);\r\n            // this.player.score = 0;\r\n        }\r\n        if(Math.random()<0.01) {\r\n            this.nextBlock = \"囧\";\r\n        }else{\r\n            const blocks = 'TJLOSZIX';\r\n            this.nextBlock = blocks[blocks.length * Math.random() | 0];\r\n        }\r\n        this.tetrisScene.updateHint(this.nextBlock);\r\n    }\r\n\r\n    playerDrop() {\r\n        this.player.pos.y--;\r\n        if (this.collide()) {\r\n            this.player.pos.y++;\r\n            this.merge();\r\n            this.playerReset();\r\n            this.arenaSweep();\r\n            this.tetrisScene.updateScore(this.player.score);\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    playerMove(offset: number) {\r\n        this.player.pos.x += offset;\r\n        if (this.collide()) {\r\n            this.player.pos.x -= offset;\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    playerRotate(dir: number) {\r\n        const pos = this.player.pos.x;\r\n        let offset = 1;\r\n        this.rotate(this.player.matrix, -dir);\r\n        while (this.collide()) {\r\n            this.player.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > this.player.matrix.length) {\r\n                this.rotate(this.player.matrix, dir);\r\n                this.player.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n        this.draw();\r\n    }\r\n\r\n    arenaSweep() {\r\n        let rowCount = 1;\r\n        outer: for (let y = 0; y < this.arena.length - 1; y++) {\r\n            for (let x = 0; x < this.arena[y].length; x++) {\r\n                if (this.arena[y][x] === 0) {\r\n                    continue outer;\r\n                }\r\n            }\r\n            const row = this.arena.splice(y, 1)[0].fill(0);\r\n            this.arena.push(row);\r\n            y--;\r\n\r\n            this.player.score += rowCount * 10;\r\n            rowCount *= 2;\r\n        }\r\n    }\r\n\r\n    collide(): boolean {\r\n        const m = this.player.matrix;\r\n        const o = this.player.pos;\r\n        for (let y = 0; y < m.length; y++) {\r\n            for (let x = 0; x < m[y].length; x++) {\r\n                if (m[y][x] !== 0 &&\r\n                    (this.arena[y + o.y] &&\r\n                        this.arena[y + o.y][x + o.x]) !== 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    merge() {\r\n        this.player.matrix.forEach((row, y) => {\r\n            row.forEach((value, x) => {\r\n                if (value !== 0) {\r\n                    this.arena[y + this.player.pos.y][x + this.player.pos.x] = value;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    rotate(matrix: number[][], dir: number) {\r\n        for (let y = 0; y < matrix.length; y++) {\r\n            for (let x = 0; x < y; x++) {\r\n                [\r\n                    matrix[x][y],\r\n                    matrix[y][x]\r\n                ] = [\r\n                        matrix[y][x],\r\n                        matrix[x][y]\r\n                    ];\r\n            }\r\n        }\r\n\r\n        if (dir > 0) {\r\n            matrix.forEach(row => row.reverse());\r\n        } else {\r\n            matrix.reverse();\r\n        }\r\n    }\r\n\r\n    private createBlock(type: string): number[][] {\r\n        if (type === 'I') {\r\n            return [\r\n                [0, 1, 0, 0],\r\n                [0, 1, 0, 0],\r\n                [0, 1, 0, 0],\r\n                [0, 1, 0, 0],\r\n            ];\r\n        } else if (type === 'L') {\r\n            return [\r\n                [0, 2, 0],\r\n                [0, 2, 0],\r\n                [0, 2, 2],\r\n            ];\r\n        } else if (type === 'J') {\r\n            return [\r\n                [0, 3, 0],\r\n                [0, 3, 0],\r\n                [3, 3, 0],\r\n            ];\r\n        } else if (type === 'O') {\r\n            return [\r\n                [4, 4],\r\n                [4, 4],\r\n            ];\r\n        } else if (type === 'Z') {\r\n            return [\r\n                [5, 5, 0],\r\n                [0, 5, 5],\r\n                [0, 0, 0],\r\n            ];\r\n        } else if (type === 'S') {\r\n            return [\r\n                [0, 6, 6],\r\n                [6, 6, 0],\r\n                [0, 0, 0],\r\n            ];\r\n        } else if (type === 'T') {\r\n            return [\r\n                [0, 7, 0],\r\n                [7, 7, 7],\r\n                [0, 0, 0],\r\n            ];\r\n        } else if( type === 'X') {\r\n            return [\r\n                [1,0,1],\r\n                [0,1,0],\r\n                [1,0,1],\r\n            ]\r\n        } else if (type === '囧') {\r\n            return [\r\n                [1,1,1,1,1,1,1],\r\n                [1,0,1,0,1,0,1],\r\n                [1,1,0,0,0,1,1],\r\n                [1,0,0,0,0,0,1],\r\n                [1,0,1,1,1,0,1],\r\n                [1,0,1,0,1,0,1],\r\n                [1,1,1,1,1,1,1],\r\n            ].reverse();\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.isStart) {\r\n            this.pastTime += dt;\r\n            if (this.pastTime >= this.frameTime) {\r\n                this.playerDrop();\r\n                this.pastTime = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n}"]}