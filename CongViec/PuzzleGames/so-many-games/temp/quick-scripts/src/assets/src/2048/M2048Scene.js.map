{"version":3,"sources":["assets\\src\\2048\\M2048Scene.ts"],"names":[],"mappings":";;;;;;AAAA,2CAA0C;AAC1C,0BAAyB;AACzB,mDAA8C;AAExC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAgC,8BAAY;IAA5C;QAAA,qEA0DC;QAxDW,WAAK,GAAe,IAAI,CAAC;QAE1B,WAAK,GAAU,sBAAK,CAAC,IAAI,CAAC;;IAsDrC,CAAC;IApDG,0BAAK,GAAL;QACI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,8BAAS,GAAT;QACI,IAAI,CAAC,KAAK,GAAG,sBAAK,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,KAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,6BAAQ,GAAR;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QACpC,KAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,EAC1B,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,cAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,KAAK,GAAG,sBAAK,CAAC,IAAI,CAAC;IAC5B,CAAC;IAED,gCAAW,GAAX;QACI,KAAC,CAAC,UAAU,EAAE,CAAC;IACnB,CAAC;IAED,iCAAY,GAAZ;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,gCAAW,GAAX,UAAY,GAAQ;QAChB,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,QAAQ,GAAG,EAAE;YACT,KAAK,oBAAG,CAAC,IAAI;gBACT,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;gBAChC,MAAM;YACV,KAAK,oBAAG,CAAC,KAAK;gBACV,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;gBACjC,MAAM;YACV,KAAK,oBAAG,CAAC,EAAE;gBACP,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBAC9B,MAAM;YACV,KAAK,oBAAG,CAAC,IAAI;gBACT,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;gBAChC,MAAM;YACV;gBACI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACjB,MAAM;SACb;QACD,IAAI,MAAM,EAAE;YACR,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE;gBACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;aACnB;SACJ;IACL,CAAC;IAtDD;QADC,QAAQ,CAAC,uBAAU,CAAC;6CACY;IAFxB,UAAU;QADtB,OAAO;OACK,UAAU,CA0DtB;IAAD,iBAAC;CA1DD,AA0DC,CA1D+B,EAAE,CAAC,SAAS,GA0D3C;AA1DY,gCAAU","file":"","sourceRoot":"/","sourcesContent":["import { M2048Board } from \"./M2048Board\";\r\nimport { G } from \"../G\";\r\nimport { DIR, STATE } from \"./M2048Constants\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class M2048Scene extends cc.Component {\r\n    @property(M2048Board)\r\n    private board: M2048Board = null;\r\n\r\n    public state: STATE = STATE.NONE;\r\n\r\n    start() {\r\n        this.board.init(this);\r\n        this.startGame();\r\n    }\r\n\r\n    startGame() {\r\n        this.state = STATE.START;\r\n        this.board.reset();\r\n        G.gameRoot.showTip(\"四方向手势滑动\");\r\n    }\r\n\r\n    overGame() {\r\n        let max = this.board.getMaxNLabel();\r\n        G.gameRoot.showMaskMessage(max,\r\n            { label: \"OK\", cb: () => { }, target: this });\r\n        this.state = STATE.OVER;\r\n    }\r\n\r\n    onBtnReturn() {\r\n        G.returnHall();\r\n    }\r\n\r\n    onBtnRestart() {\r\n        this.startGame();\r\n    }\r\n\r\n    onBoardSlid(dir: DIR) {\r\n        let isMove = false;\r\n        switch (dir) {\r\n            case DIR.LEFT:\r\n                isMove = this.board.slideLeft();\r\n                break;\r\n            case DIR.RIGHT:\r\n                isMove = this.board.slideRight();\r\n                break;\r\n            case DIR.UP:\r\n                isMove = this.board.slideUp();\r\n                break;\r\n            case DIR.DOWN:\r\n                isMove = this.board.slideDown();\r\n                break;\r\n            default:\r\n                cc.error(\"方向错误\");\r\n                break;\r\n        }\r\n        if (isMove) {\r\n            if (this.board.judgeOver()) {\r\n                this.overGame();\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]}