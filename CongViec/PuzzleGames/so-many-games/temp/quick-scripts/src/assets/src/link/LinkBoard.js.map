{"version":3,"sources":["assets\\src\\link\\LinkBoard.ts"],"names":[],"mappings":";;;;;;AAAA,yCAAoC;AAEpC,iDAA8C;AAExC,IAAA,KAA2C,EAAE,CAAC,UAAU,EAAtD,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,iBAAiB,uBAAkB,CAAC;AAI/D;IAA+B,6BAAY;IAA3C;QAAA,qEAuOC;QApOW,iBAAW,GAAc,IAAI,CAAC;QAE9B,YAAM,GAAW,EAAE,CAAC;QAEpB,cAAQ,GAAW,CAAC,CAAC;QAErB,SAAG,GAAgB,IAAI,CAAC;QAExB,gBAAU,GAAW,CAAC,CAAC;QAEvB,cAAQ,GAAW,CAAC,CAAC;QAErB,eAAS,GAAU,IAAI,CAAC;QAExB,eAAS,GAAc,IAAI,CAAC;;IAsNxC,CAAC;IApNG,0BAAM,GAAN;QACI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpF,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,SAAS,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC9B,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAClE,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAClE,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAChC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACjC,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,iBAAK,CAAC,CAAC;gBAC1C,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBAC5B,UAAU;gBACV,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC7B;SACJ;IACL,CAAC;IAED,wBAAI,GAAJ,UAAK,SAAoB;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,yBAAK,GAAZ;QACI,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAEO,iCAAa,GAArB,UAAsB,KAAY;QAAlC,iBAwBC;QAvBG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YACvC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE;gBAClB,OAAO;aACV;YACD,IAAI,KAAK,CAAC,KAAK,KAAK,2BAAW,CAAC,IAAI,EAAE;gBAClC,IAAI,KAAI,CAAC,SAAS,KAAK,IAAI,EAAE;oBACzB,KAAK,CAAC,QAAQ,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC;oBAClC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;iBAC1B;qBAAM;oBACH,IAAI,KAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;wBAClC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,KAAI,CAAC,QAAQ,EAAE,CAAC;qBACnB;yBAAM;wBACH,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,2BAAW,CAAC,IAAI,CAAC,CAAC;wBAC1C,KAAK,CAAC,QAAQ,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC;wBAClC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;qBAC1B;iBACJ;aACJ;iBAAM,IAAI,KAAK,CAAC,KAAK,KAAK,2BAAW,CAAC,KAAK,EAAE;gBAC1C,KAAK,CAAC,QAAQ,CAAC,2BAAW,CAAC,IAAI,CAAC,CAAC;gBACjC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACzB;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAED,iCAAa,GAAb,UAAc,MAAa,EAAE,MAAa;QACtC,IAAI,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,EAAE;YACvB,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;oBACvC,OAAO,KAAK,CAAA;iBACf;aACJ;YACD,OAAO,IAAI,CAAC;SACf;QACD,IAAI,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,EAAE;YACvB,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;oBACvC,OAAO,KAAK,CAAA;iBACf;aACJ;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,8BAAU,GAAV,UAAW,MAAa,EAAE,MAAa;QACnC,IAAI,EAAS,EAAE,EAAS,CAAC;QACzB,KAAK;QACL,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SACrB;QACD,UAAU;QACV,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;YACnF,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACvB;QACD,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;YACnF,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACvB;QACD,UAAU;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,EAAE;gBAClC,SAAS;aACZ;YACD,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC;mBAC3B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC;mBAC1B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC;mBAC9B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;gBACnC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC3B;SACJ;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,EAAE;gBAClC,SAAS;aACZ;YACD,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC;mBAC3B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC;mBAC1B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC;mBAC9B,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;gBACnC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC3B;SACJ;QACD,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACzB,CAAC;IAEO,wBAAI,GAAZ,UAAa,MAAa,EAAE,MAAa;QACrC,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;YAC7B,OAAO,KAAK,CAAC;SAChB;QACG,IAAA,KAAkB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,EAAhD,IAAI,QAAA,EAAE,OAAO,QAAmC,CAAC;QACtD,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,4BAAQ,GAAhB,UAAiB,IAAa;QAA9B,iBAWC;QAVG,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,GAAG,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QAClB,UAAU,CAAC;YACP,KAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEO,6BAAS,GAAjB;QACI,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAEO,0CAAsB,GAA9B,UAA+B,KAAY;QACvC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QACtF,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IAEO,2BAAO,GAAf;QACI,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YAC1B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACvB;QACD,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACtC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrC;SACJ;QACD,IAAI,EAAE,EAAE,EAAE,CAAC;QACX,IAAI,QAAQ,GAAG,SAAA,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAI,CAAC,CAAA,CAAC;QACtC,IAAI,GAAG,GAAG,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,WAAW;QACrD,IAAI,SAAS,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,YAAY;QACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAChC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACnB,CAAC,CAAC,QAAQ,CAAC,2BAAW,CAAC,IAAI,CAAC,CAAC;aAChC;YACD,IAAI,CAAC,GAAG,GAAG,EAAE;gBACT,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAChC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBACnB,CAAC,CAAC,QAAQ,CAAC,2BAAW,CAAC,IAAI,CAAC,CAAC;iBAChC;aACJ;SACJ;IACL,CAAC;IAEO,6BAAS,GAAjB,UAAkB,GAAe;QAC7B,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;QACvC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,4BAAQ,GAAf;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;oBAChC,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;QACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAlOD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;kDACkB;IAEtC;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;6CACO;IAE5B;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;+CACQ;IAE7B;QADC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC;0CACU;IAEhC;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;iDACU;IAXtB,SAAS;QAFrB,OAAO;QACP,iBAAiB;OACL,SAAS,CAuOrB;IAAD,gBAAC;CAvOD,AAuOC,CAvO8B,EAAE,CAAC,SAAS,GAuO1C;AAvOY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { Piece } from \"./LinkPiece\";\r\nimport { LinkScene } from \"./LinkScene\";\r\nimport { PIECE_STATE } from \"./LinkConstants\";\r\n\r\nconst { ccclass, property, executeInEditMode } = cc._decorator;\r\n\r\n@ccclass\r\n@executeInEditMode\r\nexport class LinkBoard extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    private piecePrefab: cc.Prefab = null;\r\n    @property(cc.Integer)\r\n    private colNum: number = 10;\r\n    @property(cc.Integer)\r\n    private colSpace: number = 5;\r\n    @property(cc.Graphics)\r\n    private pen: cc.Graphics = null;\r\n    @property(cc.Integer)\r\n    private pictureNum: number = 8;\r\n\r\n    private colWidth: number = 0;\r\n    private pieceMap: Array<Array<Piece>>;\r\n    private lastPiece: Piece = null;\r\n\r\n    private linkScene: LinkScene = null;\r\n    \r\n    onLoad() {\r\n        this.colWidth = (this.node.width - this.colSpace * (this.colNum + 1)) / this.colNum;\r\n        this.node.removeAllChildren();\r\n        this.pieceMap = [];\r\n        for (let x = 0; x < this.colNum; x++) {\r\n            this.pieceMap[x] = [];\r\n            for (let y = 0; y < this.colNum; y++) {\r\n                let pieceNode = cc.instantiate(this.piecePrefab);\r\n                this.node.addChild(pieceNode);\r\n                pieceNode.x = x * (this.colWidth + this.colSpace) + this.colSpace;\r\n                pieceNode.y = y * (this.colWidth + this.colSpace) + this.colSpace;\r\n                pieceNode.width = this.colWidth;\r\n                pieceNode.height = this.colWidth;\r\n                let piece = pieceNode.getComponent(Piece);\r\n                this.pieceMap[x][y] = piece;\r\n                // 最外一圈当作墙\r\n                this.pieceMap[x][y].init(x, y, 0);\r\n                this.addTouchEvent(piece);\r\n            }\r\n        }\r\n    }\r\n\r\n    init(linkScene: LinkScene) {\r\n        this.linkScene = linkScene;\r\n    }\r\n    \r\n    public reset() {\r\n        this.shuffle();\r\n    }\r\n\r\n    private addTouchEvent(piece: Piece) {\r\n        piece.node.on(cc.Node.EventType.TOUCH_END, () => {\r\n            if (piece.type === 0) {\r\n                return;\r\n            }\r\n            if (piece.state === PIECE_STATE.IDLE) {\r\n                if (this.lastPiece === null) {\r\n                    piece.setState(PIECE_STATE.PRESS);\r\n                    this.lastPiece = piece;\r\n                } else {\r\n                    if (this.link(this.lastPiece, piece)) {\r\n                        this.lastPiece = null;\r\n                        this.judgeWin();\r\n                    } else {\r\n                        this.lastPiece.setState(PIECE_STATE.IDLE);\r\n                        piece.setState(PIECE_STATE.PRESS);\r\n                        this.lastPiece = piece;\r\n                    }\r\n                }\r\n            } else if (piece.state === PIECE_STATE.PRESS) {\r\n                piece.setState(PIECE_STATE.IDLE);\r\n                this.lastPiece = null;\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    canDirectLink(piece1: Piece, piece2: Piece): boolean {\r\n        if (piece1.x === piece2.x) {\r\n            let minY = Math.min(piece1.y, piece2.y);\r\n            let maxY = Math.max(piece1.y, piece2.y);\r\n            for (let y = minY + 1; y < maxY; y++) {\r\n                if (this.pieceMap[piece1.x][y].type !== 0) {\r\n                    return false\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        if (piece1.y === piece2.y) {\r\n            let minX = Math.min(piece1.x, piece2.x);\r\n            let maxX = Math.max(piece1.x, piece2.x);\r\n            for (let x = minX + 1; x < maxX; x++) {\r\n                if (this.pieceMap[x][piece1.y].type !== 0) {\r\n                    return false\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findCorner(piece1: Piece, piece2: Piece): [boolean, Array<Piece>] {\r\n        let c1: Piece, c2: Piece;\r\n        // 0折\r\n        if (this.canDirectLink(piece1, piece2)) {\r\n            return [true, []];\r\n        }\r\n        // 1折 找一个点\r\n        c1 = this.pieceMap[piece1.x][piece2.y];\r\n        if (c1.type === 0 && this.canDirectLink(c1, piece1) && this.canDirectLink(c1, piece2)) {\r\n            return [true, [c1]];\r\n        }\r\n        c1 = this.pieceMap[piece2.x][piece1.y];\r\n        if (c1.type === 0 && this.canDirectLink(c1, piece1) && this.canDirectLink(c1, piece2)) {\r\n            return [true, [c1]];\r\n        }\r\n        // 2折 找一条线\r\n        for (let x = 0; x < this.colNum; x++) {\r\n            if (x === piece1.x || x === piece2.x) {\r\n                continue;\r\n            }\r\n            c1 = this.pieceMap[x][piece1.y];\r\n            c2 = this.pieceMap[x][piece2.y];\r\n            if (c1.type === 0 && c2.type === 0\r\n                && this.canDirectLink(c1, c2)\r\n                && this.canDirectLink(c1, piece1)\r\n                && this.canDirectLink(c2, piece2)) {\r\n                return [true, [c1, c2]];\r\n            }\r\n        }\r\n        for (let y = 0; y < this.colNum; y++) {\r\n            if (y === piece1.y || y === piece2.y) {\r\n                continue;\r\n            }\r\n            c1 = this.pieceMap[piece1.x][y];\r\n            c2 = this.pieceMap[piece2.x][y];\r\n            if (c1.type === 0 && c2.type === 0\r\n                && this.canDirectLink(c1, c2)\r\n                && this.canDirectLink(c1, piece1)\r\n                && this.canDirectLink(c2, piece2)) {\r\n                return [true, [c1, c2]];\r\n            }\r\n        }\r\n        return [false, null];\r\n    }\r\n\r\n    private link(piece1: Piece, piece2: Piece): boolean {\r\n        if (piece1.type !== piece2.type) {\r\n            return false;\r\n        }\r\n        let [pass, corners] = this.findCorner(piece1, piece2);\r\n        if (pass) {\r\n            this.drawLine([piece1].concat(corners).concat(piece2));\r\n            piece1.setType(0);\r\n            piece2.setType(0);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private drawLine(path: Piece[]) {\r\n        let pos = this.getPieceCenterPosition(path[0]);\r\n        this.pen.moveTo(pos.x, pos.y);\r\n        for (let i = 1; i < path.length; i++) {\r\n            pos = this.getPieceCenterPosition(path[i]);\r\n            this.pen.lineTo(pos.x, pos.y);\r\n        }\r\n        this.pen.stroke();\r\n        setTimeout(() => {\r\n            this.clearLine();\r\n        }, 500);\r\n    }\r\n\r\n    private clearLine() {\r\n        this.pen.clear();\r\n    }\r\n\r\n    private getPieceCenterPosition(piece: Piece): cc.Vec2 {\r\n        let x = piece.x * (this.colWidth + this.colSpace) + this.colSpace + this.colWidth / 2;\r\n        let y = piece.y * (this.colWidth + this.colSpace) + this.colSpace + this.colWidth / 2;\r\n        return cc.v2(x, y);\r\n    }\r\n\r\n    private shuffle() {\r\n        let pictureList = [];\r\n        for (let i = 1; i <= 78; i++) {\r\n            pictureList.push(i);\r\n        }\r\n        let pending = [];\r\n        for (let x = 1; x < this.colNum - 1; x++) {\r\n            for (let y = 1; y < this.colNum - 1; y++) {\r\n                pending.push(this.pieceMap[x][y]);\r\n            }\r\n        }\r\n        let p1, p2;\r\n        let pieceNum = (this.colNum - 2) ** 2;\r\n        let rem = pieceNum / 2 % this.pictureNum; // 余数，重复的几对\r\n        let coupleNum = (pieceNum / 2 - rem) / this.pictureNum; // 相同的图片有多少对\r\n        for (let i = 0; i < this.pictureNum; i++) {\r\n            let picture = this.randomPop(pictureList);\r\n            for (let j = 0; j < coupleNum * 2; j++) {\r\n                let p = this.randomPop(pending);\r\n                p.setType(picture);\r\n                p.setState(PIECE_STATE.IDLE);\r\n            }\r\n            if (i < rem) {\r\n                for(let k = 0; k < 2; k++) {\r\n                    let p = this.randomPop(pending);\r\n                    p.setType(picture);\r\n                    p.setState(PIECE_STATE.IDLE);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private randomPop(arr: Array<any>) {\r\n        let n = Math.random() * arr.length | 0;\r\n        return arr.splice(n, 1)[0];\r\n    }\r\n\r\n    public judgeWin(): boolean {\r\n        for (let x = 0; x < this.colNum; x++) {\r\n            for (let y = 0; y < this.colNum; y++) {\r\n                if (this.pieceMap[x][y].type !== 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        this.linkScene.overGame();\r\n        return true;\r\n    }\r\n\r\n}"]}