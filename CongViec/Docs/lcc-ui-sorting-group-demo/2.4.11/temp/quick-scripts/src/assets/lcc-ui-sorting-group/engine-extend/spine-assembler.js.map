{"version":3,"sources":["assets\\lcc-ui-sorting-group\\engine-extend\\spine-assembler.ts"],"names":[],"mappings":";;;;AACA,aAAa;AACb,IAAM,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;AAEnB,aAAa;AACb,IAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;AAEvB,aAAa;AACb,IAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC;AACnD,aAAa;AACb,IAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,iBAAiB,CAAC;AAEtD,IAAM,UAAU,GAAG,IAAI,CAAC;AACxB,IAAM,cAAc,GAAG,IAAI,CAAC;AAE5B,IAAI,UAAU,GAAG,IAAI,CAAC;AACtB,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,IAAI,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC1C,IAAI,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC1C,IAAI,YAAY,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC5C,IAAI,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAE5C,IAAI,WAAW,GAAG,IAAI,CAAC;AACvB,IAAI,UAAU,GAAG,IAAI,CAAC;AACtB,IAAI,QAAQ,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,CAAC;AACpC,aAAa;AACb,IAAI,CAAC,iBAAiB,EAAE;IACpB,WAAW,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,UAAU,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,QAAQ,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;IAC/B,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;CACjC;AAED,IAAI,mBAAmB,CAAC;AACxB,IAAI,WAAW,CAAC;AAChB,IAAI,eAAe,CAAC;AACpB,IAAI,aAAa,CAAC;AAClB,IAAI,QAAQ,CAAC;AACb,IAAI,WAAW,CAAC;AAChB,IAAI,WAAW,CAAC;AAChB,IAAI,UAAU,CAAC;AACf,IAAI,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,CAAC;AACX,IAAI,aAAa,EAAE,YAAY,CAAC;AAChC,IAAI,aAAa,CAAC;AAClB,IAAI,cAAc,CAAC;AACnB,IAAI,kBAAkB,CAAC;AAEvB,IAAI,iBAAiB,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,kBAAkB,GAAG,CAAC,EAAE,aAAa,GAAG,CAAC,EAClF,WAAW,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC;AACrD,IAAI,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;AAC3B,IAAI,QAAQ,CAAC;AACb,IAAI,UAAU,CAAC;AACf,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAC/C,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACvD,IAAI,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,aAAa,CAAC;AAEhE,SAAS,gBAAgB,CAAE,GAAG,EAAE,SAAS;IACrC,IAAI,GAAG,EAAE,GAAG,CAAC;IACb,QAAQ,SAAS,EAAE;QACf,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ;YACzB,GAAG,GAAG,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9D,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;YACnB,MAAM;QACV,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ;YACzB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;YACzB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACnC,MAAM;QACV,KAAK,KAAK,CAAC,SAAS,CAAC,MAAM;YACvB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;YACnB,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACnC,MAAM;QACV,KAAK,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5B;YACI,GAAG,GAAG,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9D,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACnC,MAAM;KACb;IAED,IAAI,QAAQ,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;IAClC,IAAI,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACvC,IAAI,CAAC,YAAY;QAAE,OAAO,IAAI,CAAC;IAE/B,6CAA6C;IAC7C,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACxD,IAAI,aAAa,GAAG,KAAK,CAAC,cAAc,CAAC;IACzC,IAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ,EAAE;QACX,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;YAC7B,QAAQ,GAAG,YAAY,CAAC;YACxB,aAAa,CAAC,YAAY,GAAG,YAAY,CAAC;SAC7C;aAAM;YACH,QAAQ,GAAG,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAC5D;QAED,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC1C,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QACtC,iBAAiB;QACjB,QAAQ,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAErC,wBAAwB;QACxB,QAAQ,CAAC,QAAQ,CACb,IAAI,EACJ,GAAG,CAAC,cAAc,EAClB,GAAG,EAAE,GAAG,EACR,GAAG,CAAC,cAAc,EAClB,GAAG,EAAE,GAAG,CACX,CAAC;QACF,aAAa,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;KACjC;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED,SAAS,YAAY,CAAE,KAAK;IACxB,iDAAiD;IACjD,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,MAAM,CAAC;IACxB,WAAW,GAAG,mBAAmB,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,EAAE,GAAG,MAAM,GAAG,WAAW,CAAC;IAC1B,EAAE,GAAG,MAAM,GAAG,WAAW,CAAC;IAC1B,EAAE,GAAG,MAAM,GAAG,WAAW,CAAC;IAE1B,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,aAAa,GAAG,CAAC,CAAC,GAAG,IAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,IAAE,EAAE,CAAC,GAAG,CAAC,GAAG,IAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAE/D,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;IACpB,GAAG,GAAG,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,IAAE,EAAE,CAAC,GAAG,CAAC,GAAG,IAAE,CAAC,CAAC,GAAG,GAAG,CAAC;AAClE,CAAC;AAED,SAAS,kBAAkB,CAAE,UAAU;IACnC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,IAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAE,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;AAC9F,CAAC;AAED,aAAa;AACb,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,GAAG,UAAU,aAAa,EAAE,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI;IAEvG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,EACrB,IAAI,GAAG,OAAO,CAAC,MAAM,EACrB,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;IACnC,IAAI,UAAU,CAAC;IAEf,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,MAAM,GAAG,GAAG,CAAC;IACjF,WAAW,GAAG,mBAAmB,CAAA,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,WAAW,CAAC;IACpE,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,WAAW,CAAC;IACpE,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,WAAW,CAAC;IAEpE,WAAW,CAAC,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC;IACrC,WAAW,CAAC,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC;IACrC,WAAW,CAAC,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC;IAErC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;QACxB,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KACtC;SAAM;QACH,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC;QACzC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC;QACzC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC;KAC5C;IACD,UAAU,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE7C,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;QACvB,IAAI,aAAa,EAAE;YACf,KAAK,IAAI,CAAC,GAAG,kBAAkB,EAAE,CAAC,GAAG,kBAAkB,GAAG,iBAAiB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,cAAc,EAAE;gBACrG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxB,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;gBAEpE,IAAI,CAAC,CAAC,CAAC,GAAO,QAAQ,CAAC,CAAC,CAAC,CAAQ,IAAI;gBACrC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAQ,IAAI;gBACrC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAS,IAAI;gBACrC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAS,IAAI;gBACrC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAkB,cAAc;gBACpF,QAAQ,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAM,aAAa;aACtF;SACJ;aAAM;YACH,aAAa,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAChD,YAAY,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAE9C,KAAK,IAAI,CAAC,GAAG,kBAAkB,EAAE,CAAC,GAAG,kBAAkB,GAAG,iBAAiB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,cAAc,EAAE;gBACrG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,aAAa,CAAC,CAAmB,cAAc;gBACnE,QAAQ,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,YAAY,CAAC,CAAC,CAAM,aAAa;aACrE;SACJ;KACJ;SAAM;QACH,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC;QAChD,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC9K,IAAI,eAAe,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAChE,IAAI,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAEhD,kBAAkB;QAClB,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC;QACtC,iBAAiB,GAAG,eAAe,CAAC,MAAM,GAAG,kBAAkB,GAAG,cAAc,CAAC;QAEjF,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;QAC9E,YAAY,GAAG,UAAU,CAAC,YAAY;YACtC,aAAa,GAAG,UAAU,CAAC,YAAY;YACvC,kBAAkB,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;QAChD,IAAI,GAAG,OAAO,CAAC,MAAM;YACrB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;QACtB,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;QAE/B,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;QAEzC,uDAAuD;QACvD,IAAI,aAAa,EAAE;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,MAAM,GAAG,kBAAkB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,kBAAkB,EAAE,MAAM,IAAI,cAAc,EAAE;gBAC/H,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACpC,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChH,OAAO,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACnC,IAAI,QAAQ,EAAE;oBACV,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACpH;qBAAM;oBACH,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC9B;gBACD,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;gBAEpE,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAa,IAAI;gBAC3C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAS,IAAI;gBAC3C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAU,IAAI;gBAC3C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAU,IAAI;gBAC3C,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBACxD,IAAI,QAAQ,EAAE;oBACV,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;iBAC1D;aACJ;SACJ;aAAM;YACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,MAAM,GAAG,kBAAkB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,kBAAkB,EAAE,MAAM,IAAI,cAAc,EAAE;gBAC/H,IAAI,CAAC,MAAM,CAAC,GAAO,eAAe,CAAC,CAAC,CAAC,CAAC,CAAS,IAAI;gBACnD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAK,IAAI;gBACnD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAK,IAAI;gBACnD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAK,IAAI;gBAEnD,aAAa,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,IAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,IAAE,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,IAAE,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3I,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;gBAEtC,IAAI,QAAQ,EAAE;oBACV,YAAY,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,IAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,IAAE,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,IAAE,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC5I,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;iBACxC;aACJ;SACJ;KACJ;AACL,CAAC,CAAA;AAED,aAAa;AACb,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,gBAAgB,GAAG,UAAU,QAAQ;IAC3D,IAAI,IAAI,CAAC;IACT,IAAI,IAAI,CAAC;IAET,IAAI,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC;IAClC,IAAI,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC;IACtC,IAAI,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC;IACpC,IAAI,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC7B,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,CAAC;IAC3D,IAAI,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;IAC7B,IAAI,UAAU,CAAC;IACf,IAAI,IAAI,CAAC;IACT,IAAI,SAAS,CAAC;IAEd,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC;IACxC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;IACpC,QAAQ,GAAG,KAAK,CAAC;IACjB,IAAI,eAAe,IAAI,CAAC,CAAC;QAAE,QAAQ,GAAG,IAAI,CAAC;IAE3C,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC;IAC/B,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC;IAC/B,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;IAC7B,IAAI,QAAQ,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,UAAU,CAAC,EAAE;QACxD,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;KAC1B;IAED,sDAAsD;IACtD,kBAAkB,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvC,iBAAiB,GAAG,CAAC,CAAC;IACtB,kBAAkB,GAAG,CAAC,CAAC;IACvB,aAAa,GAAG,CAAC,CAAC;IAClB,WAAW,GAAG,CAAC,CAAC;IAChB,YAAY,GAAG,CAAC,CAAC;IAEjB,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,GAAG,SAAS,EAAE,OAAO,EAAE,EAAE;QAC5F,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAG,IAAI,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACvC,SAAS;SACZ;QAED,IAAI,eAAe,IAAI,CAAC,IAAI,eAAe,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YAC5D,QAAQ,GAAG,IAAI,CAAC;SACnB;QAED,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,SAAS;SACZ;QAED,IAAI,aAAa,IAAI,CAAC,IAAI,aAAa,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACxD,QAAQ,GAAG,KAAK,CAAC;SACpB;QAED,iBAAiB,GAAG,CAAC,CAAC;QACtB,WAAW,GAAG,CAAC,CAAC;QAEhB,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,SAAS;SACZ;QAED,QAAQ,GAAG,UAAU,YAAY,KAAK,CAAC,gBAAgB,CAAC;QACxD,MAAM,GAAG,UAAU,YAAY,KAAK,CAAC,cAAc,CAAC;QACpD,MAAM,GAAG,UAAU,YAAY,KAAK,CAAC,kBAAkB,CAAC;QAExD,IAAI,MAAM,EAAE;YACR,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACpC,SAAS;SACZ;QAED,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE;YACtB,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,SAAS;SACZ;QAED,QAAQ,GAAG,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrF,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,SAAS;SACZ;QAED,IAAI,UAAU,IAAI,QAAQ,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE;YACnE,UAAU,GAAG,KAAK,CAAC;YACnB,SAAS,CAAC,MAAM,EAAE,CAAC;YACnB,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;YACvB,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;SACjC;QAED,IAAI,QAAQ,EAAE;YAEV,SAAS,GAAG,cAAc,CAAC;YAE3B,kBAAkB;YAClB,iBAAiB,GAAG,CAAC,GAAG,cAAc,CAAC;YACvC,WAAW,GAAG,CAAC,CAAC;YAEhB,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,YAAY,GAAG,UAAU,CAAC,YAAY;gBACtC,aAAa,GAAG,UAAU,CAAC,YAAY;gBACvC,kBAAkB,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;YAChD,IAAI,GAAG,OAAO,CAAC,MAAM;gBACrB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;YAEtB,8BAA8B;YAC9B,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;YAErF,uCAAuC;YACvC,IAAI,QAAQ,IAAI,WAAW,EAAE;gBACzB,QAAQ,CAAC,WAAW,GAAG,UAAU,CAAC;gBAClC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxE,KAAK,IAAI,EAAE,GAAG,kBAAkB,GAAG,cAAc,EAAE,EAAE,GAAG,kBAAkB,GAAG,iBAAiB,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,cAAc,EAAE;oBAC3H,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC3C;gBACD,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;aACrB;SACJ;aACI,IAAI,MAAM,EAAE;YAEb,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;YAEjC,kBAAkB;YAClB,iBAAiB,GAAG,CAAC,UAAU,CAAC,mBAAmB,IAAI,CAAC,CAAC,GAAG,cAAc,CAAC;YAC3E,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC;YAE/B,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;YAC9E,YAAY,GAAG,UAAU,CAAC,YAAY;gBACtC,aAAa,GAAG,UAAU,CAAC,YAAY;gBACvC,kBAAkB,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;YAChD,IAAI,GAAG,OAAO,CAAC,MAAM;gBACrB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;YAEtB,8BAA8B;YAC9B,UAAU,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,mBAAmB,EAAE,IAAI,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;YAEnH,sCAAsC;YACtC,IAAI,QAAQ,IAAI,UAAU,EAAE;gBACxB,QAAQ,CAAC,WAAW,GAAG,UAAU,CAAC;gBAElC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;oBACtD,IAAI,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC,GAAG,cAAc,GAAG,kBAAkB,CAAC;oBAC7D,IAAI,EAAE,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,cAAc,GAAG,kBAAkB,CAAC;oBACjE,IAAI,EAAE,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,cAAc,GAAG,kBAAkB,CAAC;oBAEjE,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,QAAQ,CAAC,KAAK,EAAE,CAAC;oBACjB,QAAQ,CAAC,MAAM,EAAE,CAAC;iBACrB;aACJ;SACJ;QAED,IAAI,iBAAiB,IAAI,CAAC,IAAI,WAAW,IAAI,CAAC,EAAE;YAC5C,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,SAAS;SACZ;QAED,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAElC,WAAW;QACX,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,kBAAkB,EAAE,CAAC,GAAG,kBAAkB,GAAG,iBAAiB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,cAAc,EAAE,CAAC,IAAI,CAAC,EAAE;YACpH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAW,IAAI;YACpC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAO,IAAI;SACvC;QAED,eAAe,GAAG,UAAU,CAAC,KAAK;YAClC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvB,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAE5E,8FAA8F;QAC9F,IAAI,GAAG,OAAO,CAAC,MAAM;YACrB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;QAEtB,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,KAAK,IAAI,EAAE,GAAG,YAAY,EAAE,EAAE,GAAG,YAAY,GAAG,WAAW,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;gBACxE,IAAI,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC;aAC7B;YAED,IAAI,QAAQ,EAAE;gBACV,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACvB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;gBACrB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;gBACrB,KAAK,IAAI,EAAE,GAAG,kBAAkB,EAAE,EAAE,GAAG,kBAAkB,GAAG,iBAAiB,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,cAAc,EAAE;oBAC1G,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;oBACd,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;oBACxC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;iBAC/C;aACJ;YACD,OAAO,CAAC,MAAM,CAAC,iBAAiB,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;SACnE;QAED,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KACjC;IAED,OAAO,CAAC,OAAO,EAAE,CAAC;IAElB,IAAI,QAAQ,IAAI,WAAW,EAAE;QACzB,IAAI,IAAI,SAAA,CAAC;QACT,QAAQ,CAAC,WAAW,GAAG,UAAU,CAAC;QAClC,QAAQ,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,yCAAyC;QAE1E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACtD,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;YAChD,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;YAEhD,gBAAgB;YAChB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAElB,gBAAgB;YAChB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;YACzD,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,EAAE;gBACT,QAAQ,CAAC,SAAS,GAAG,YAAY,CAAC;aACrC;SACJ;KACJ;AACL,CAAC,CAAA;AAED,aAAa;AACb,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,GAAG,UAAU,QAAQ;IAExD,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;IAC5B,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC9B,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;QAAE,OAAO;IAEjC,IAAI,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;IACxB,IAAI,QAAQ,CAAC;IACb,IAAI,UAAU,CAAC;IACf,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC9B,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IAC5B,IAAI,SAAS,CAAC;IAEd,IAAI,aAAa,GAAG,CAAC,EAAE,gBAAgB,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;IAC5D,IAAI,QAAQ,EAAE;QACV,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;QACvB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;QACrB,IAAI,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;KACxB;IAED,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IACzE,IAAI,SAAS,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;IAC1C,IAAI,aAAa,GAAG,SAAS,IAAI,aAAa,CAAC;IAE/C,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACrC,IAAI,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACpC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAEvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC7C,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1B,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ;YAAE,SAAS;QAExB,IAAI,UAAU,IAAI,QAAQ,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE;YACnE,UAAU,GAAG,KAAK,CAAC;YACnB,SAAS,CAAC,MAAM,EAAE,CAAC;YACnB,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;YACvB,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;SACjC;QAED,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACnC,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC;QAEjC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QACxD,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;QACvC,aAAa,GAAG,UAAU,CAAC,YAAY,CAAC;QACxC,SAAS,GAAG,UAAU,CAAC,UAAU,IAAI,CAAC,CAAC;QACvC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;QACtB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;QACtB,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC;QAE7B,KAAK,IAAI,EAAE,GAAG,YAAY,EAAE,EAAE,GAAG,YAAY,GAAG,WAAW,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;YACxE,IAAI,CAAC,EAAE,CAAC,GAAG,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC;SAC1D;QAED,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,GAAG,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;QAClF,aAAa,IAAI,UAAU,CAAC;QAE5B,IAAI,aAAa,EAAE;YACf,KAAK,IAAI,EAAE,GAAG,SAAS,EAAE,EAAE,GAAG,SAAS,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;gBACpE,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;gBACjB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;aACxB;SACJ;aAAM,IAAI,SAAS,EAAE;YAClB,KAAK,IAAI,EAAE,GAAG,SAAS,EAAE,EAAE,GAAG,SAAS,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;gBACpE,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;gBACxC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;aAC/C;SACJ;QAED,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1C,IAAK,CAAC,UAAU;YAAG,SAAS;QAE5B,eAAe;QACf,IAAI,gBAAgB,GAAG,aAAa,GAAG,UAAU,CAAC;QAClD,KAAK,IAAI,EAAE,GAAG,SAAS,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,GAAG,CAAC,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,gBAAgB,IAAI,CAAC,EAAE;YACnG,IAAI,gBAAgB,IAAI,WAAW,EAAE;gBACjC,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;gBACjC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACvB,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC;aACnC;YACD,OAAO,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC;YAC5B,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;SAClC;KACJ;AACL,CAAC,CAAA;AAED,aAAa;AACb,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,GAAG,UAAU,IAAI,EAAE,QAAQ;IAE5D,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACrB,aAAa;IACb,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,UAAU,CAAC,uBAAuB,CAAC;IAC1D,IAAI,CAAC,IAAI,CAAC,SAAS;QAAE,OAAO;IAE5B,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5B,MAAM,GAAG,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,MAAM,GAAG,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,MAAM,GAAG,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,MAAM,GAAG,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC;IAE3B,QAAQ,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACpD,aAAa,GAAG,QAAQ,CAAA,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;IAClD,yCAAyC;IACzC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAClB,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IACrD,SAAS,GAAG,QAAQ,CAAC;IACrB,KAAK,GAAG,IAAI,CAAC;IAEb,UAAU,GAAG,IAAI,CAAC;IAClB,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC;IAC9C,WAAW,GAAG,GAAG,CAAC;IAClB,UAAU,GAAG,IAAI,CAAC;IAClB,UAAU,GAAG,KAAK,CAAC;IACnB,aAAa,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;IAE3E,IAAI,SAAS,CAAC,IAAI,KAAK,UAAU,IAAI,mBAAmB,EAAE;QACtD,UAAU,GAAG,IAAI,CAAC;KACrB;IAED,IAAI,QAAQ,EAAE;QACV,UAAU,IAAI,cAAc,CAAC;KAChC;IAED,IAAI,QAAQ,GAAG,SAAS,CAAC;IACzB,IAAI,KAAK,CAAC,WAAW,EAAE;QACnB,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC;QAC9B,UAAU,GAAG,KAAK,CAAC;QACnB,UAAU,IAAI,UAAU,CAAC;KAC5B;IAED,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;QAC1B,4BAA4B;QAC5B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;SAAM;QACH,IAAI,aAAa;YAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAI,aAAa;YAAE,aAAa,CAAC,GAAG,EAAE,CAAC;KAC1C;IAED,kBAAkB;IAClB,KAAK,GAAG,SAAS,CAAC;IAClB,OAAO,GAAG,SAAS,CAAC;IACpB,SAAS,GAAG,SAAS,CAAC;IACtB,KAAK,GAAG,SAAS,CAAC;IAClB,aAAa,GAAG,IAAI,CAAC;AACzB,CAAC,CAAA","file":"","sourceRoot":"/","sourcesContent":["\r\n// @ts-ignore\r\nconst gfx = cc.gfx;\r\n\r\n// @ts-ignore\r\nconst spine = sp.spine;\r\n\r\n// @ts-ignore\r\nconst VFOneColor = gfx.VertexFormat.vfmtPosUvColor;\r\n// @ts-ignore\r\nconst VFTwoColor = gfx.VertexFormat.vfmtPosUvTwoColor;\r\n\r\nconst FLAG_BATCH = 0x10;\r\nconst FLAG_TWO_COLOR = 0x01;\r\n\r\nlet _handleVal = 0x00;\r\nlet _quadTriangles = [0, 1, 2, 2, 3, 0];\r\nlet _slotColor = cc.color(0, 0, 255, 255);\r\nlet _boneColor = cc.color(255, 0, 0, 255);\r\nlet _originColor = cc.color(0, 255, 0, 255);\r\nlet _meshColor = cc.color(255, 255, 0, 255);\r\n\r\nlet _finalColor = null;\r\nlet _darkColor = null;\r\nlet _tempPos = null, _tempUv = null;\r\n// @ts-ignore\r\nif (!CC_NATIVERENDERER) {\r\n    _finalColor = new spine.Color(1, 1, 1, 1);\r\n    _darkColor = new spine.Color(1, 1, 1, 1);\r\n    _tempPos = new spine.Vector2();\r\n    _tempUv = new spine.Vector2();\r\n}\r\n\r\nlet _premultipliedAlpha;\r\nlet _multiplier;\r\nlet _slotRangeStart;\r\nlet _slotRangeEnd;\r\nlet _useTint;\r\nlet _debugSlots;\r\nlet _debugBones;\r\nlet _debugMesh;\r\nlet _nodeR,\r\n    _nodeG,\r\n    _nodeB,\r\n    _nodeA;\r\nlet _finalColor32, _darkColor32;\r\nlet _vertexFormat;\r\nlet _perVertexSize;\r\nlet _perClipVertexSize;\r\n\r\nlet _vertexFloatCount = 0, _vertexCount = 0, _vertexFloatOffset = 0, _vertexOffset = 0,\r\n    _indexCount = 0, _indexOffset = 0, _vfOffset = 0;\r\nlet _tempr, _tempg, _tempb;\r\nlet _inRange;\r\nlet _mustFlush;\r\nlet _x, _y, _m00, _m04, _m12, _m01, _m05, _m13;\r\nlet _r, _g, _b, _fr, _fg, _fb, _fa, _dr, _dg, _db, _da;\r\nlet _comp, _buffer, _renderer, _node, _needColor, _vertexEffect;\r\n\r\nfunction _getSlotMaterial (tex, blendMode) {\r\n    let src, dst;\r\n    switch (blendMode) {\r\n        case spine.BlendMode.Additive:\r\n            src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;\r\n            dst = cc.macro.ONE;\r\n            break;\r\n        case spine.BlendMode.Multiply:\r\n            src = cc.macro.DST_COLOR;\r\n            dst = cc.macro.ONE_MINUS_SRC_ALPHA;\r\n            break;\r\n        case spine.BlendMode.Screen:\r\n            src = cc.macro.ONE;\r\n            dst = cc.macro.ONE_MINUS_SRC_COLOR;\r\n            break;\r\n        case spine.BlendMode.Normal:\r\n        default:\r\n            src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;\r\n            dst = cc.macro.ONE_MINUS_SRC_ALPHA;\r\n            break;\r\n    }\r\n\r\n    let useModel = !_comp.enableBatch;\r\n    let baseMaterial = _comp._materials[0];\r\n    if (!baseMaterial) return null;\r\n\r\n    // The key use to find corresponding material\r\n    let key = tex.getId() + src + dst + _useTint + useModel;\r\n    let materialCache = _comp._materialCache;\r\n    let material = materialCache[key];\r\n    if (!material) {\r\n        if (!materialCache.baseMaterial) {\r\n            material = baseMaterial;\r\n            materialCache.baseMaterial = baseMaterial;\r\n        } else {\r\n            material = cc.MaterialVariant.create(baseMaterial, null);\r\n        }\r\n        \r\n        material.define('CC_USE_MODEL', useModel);\r\n        material.define('USE_TINT', _useTint);\r\n        // update texture\r\n        material.setProperty('texture', tex);\r\n\r\n        // update blend function\r\n        material.setBlend(\r\n            true,\r\n            gfx.BLEND_FUNC_ADD,\r\n            src, dst,\r\n            gfx.BLEND_FUNC_ADD,\r\n            src, dst\r\n        );\r\n        materialCache[key] = material;\r\n    }\r\n    return material;\r\n}\r\n\r\nfunction _handleColor (color) {\r\n    // temp rgb has multiply 255, so need divide 255;\r\n    _fa = color.fa * _nodeA;\r\n    _multiplier = _premultipliedAlpha ? _fa / 255 : 1;\r\n    _r = _nodeR * _multiplier;\r\n    _g = _nodeG * _multiplier;\r\n    _b = _nodeB * _multiplier;\r\n\r\n    _fr = color.fr * _r;\r\n    _fg = color.fg * _g;\r\n    _fb = color.fb * _b;\r\n    _finalColor32 = ((_fa<<24) >>> 0) + (_fb<<16) + (_fg<<8) + _fr;\r\n\r\n    _dr = color.dr * _r;\r\n    _dg = color.dg * _g;\r\n    _db = color.db * _b;\r\n    _da = _premultipliedAlpha ? 255 : 0;\r\n    _darkColor32 = ((_da<<24) >>> 0) + (_db<<16) + (_dg<<8) + _dr;\r\n}\r\n\r\nfunction _spineColorToInt32 (spineColor) {\r\n    return ((spineColor.a<<24) >>> 0) + (spineColor.b<<16) + (spineColor.g<<8) + spineColor.r;\r\n}\r\n\r\n// @ts-ignore\r\nsp.Skeleton.__assembler__.fillVertices = function (skeletonColor, attachmentColor, slotColor, clipper, slot) {\r\n\r\n    let vbuf = _buffer._vData,\r\n        ibuf = _buffer._iData,\r\n        uintVData = _buffer._uintVData;\r\n    let offsetInfo;\r\n\r\n    _finalColor.a = slotColor.a * attachmentColor.a * skeletonColor.a * _nodeA * 255;\r\n    _multiplier = _premultipliedAlpha? _finalColor.a : 255;\r\n    _tempr = _nodeR * attachmentColor.r * skeletonColor.r * _multiplier;\r\n    _tempg = _nodeG * attachmentColor.g * skeletonColor.g * _multiplier;\r\n    _tempb = _nodeB * attachmentColor.b * skeletonColor.b * _multiplier;\r\n    \r\n    _finalColor.r = _tempr * slotColor.r;\r\n    _finalColor.g = _tempg * slotColor.g;\r\n    _finalColor.b = _tempb * slotColor.b;\r\n\r\n    if (slot.darkColor == null) {\r\n        _darkColor.set(0.0, 0.0, 0.0, 1.0);\r\n    } else {\r\n        _darkColor.r = slot.darkColor.r * _tempr;\r\n        _darkColor.g = slot.darkColor.g * _tempg;\r\n        _darkColor.b = slot.darkColor.b * _tempb;\r\n    }\r\n    _darkColor.a = _premultipliedAlpha ? 255 : 0;\r\n\r\n    if (!clipper.isClipping()) {\r\n        if (_vertexEffect) {\r\n            for (let v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount; v < n; v += _perVertexSize) {\r\n                _tempPos.x = vbuf[v];\r\n                _tempPos.y = vbuf[v + 1];\r\n                _tempUv.x = vbuf[v + 2];\r\n                _tempUv.y = vbuf[v + 3];\r\n                _vertexEffect.transform(_tempPos, _tempUv, _finalColor, _darkColor);\r\n\r\n                vbuf[v]     = _tempPos.x;        // x\r\n                vbuf[v + 1] = _tempPos.y;        // y\r\n                vbuf[v + 2] = _tempUv.x;         // u\r\n                vbuf[v + 3] = _tempUv.y;         // v\r\n                uintVData[v + 4]  = _spineColorToInt32(_finalColor);                  // light color\r\n                _useTint && (uintVData[v + 5] = _spineColorToInt32(_darkColor));      // dark color\r\n            }\r\n        } else {\r\n            _finalColor32 = _spineColorToInt32(_finalColor);\r\n            _darkColor32 = _spineColorToInt32(_darkColor);\r\n            \r\n            for (let v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount; v < n; v += _perVertexSize) {\r\n                uintVData[v + 4]  = _finalColor32;                   // light color\r\n                _useTint && (uintVData[v + 5]  = _darkColor32);      // dark color\r\n            }\r\n        }\r\n    } else {\r\n        let uvs = vbuf.subarray(_vertexFloatOffset + 2);\r\n        clipper.clipTriangles(vbuf.subarray(_vertexFloatOffset), _vertexFloatCount, ibuf.subarray(_indexOffset), _indexCount, uvs, _finalColor, _darkColor, _useTint, _perVertexSize);\r\n        let clippedVertices = new Float32Array(clipper.clippedVertices);\r\n        let clippedTriangles = clipper.clippedTriangles;\r\n        \r\n        // insure capacity\r\n        _indexCount = clippedTriangles.length;\r\n        _vertexFloatCount = clippedVertices.length / _perClipVertexSize * _perVertexSize;\r\n\r\n        offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);\r\n        _indexOffset = offsetInfo.indiceOffset,\r\n        _vertexOffset = offsetInfo.vertexOffset,\r\n        _vertexFloatOffset = offsetInfo.byteOffset >> 2;\r\n        vbuf = _buffer._vData,\r\n        ibuf = _buffer._iData;\r\n        uintVData = _buffer._uintVData;\r\n\r\n        // fill indices\r\n        ibuf.set(clippedTriangles, _indexOffset);\r\n\r\n        // fill vertices contain x y u v light color dark color\r\n        if (_vertexEffect) {\r\n            for (let v = 0, n = clippedVertices.length, offset = _vertexFloatOffset; v < n; v += _perClipVertexSize, offset += _perVertexSize) {\r\n                _tempPos.x = clippedVertices[v];\r\n                _tempPos.y = clippedVertices[v + 1];\r\n                _finalColor.set(clippedVertices[v + 2], clippedVertices[v + 3], clippedVertices[v + 4], clippedVertices[v + 5]);\r\n                _tempUv.x = clippedVertices[v + 6];\r\n                _tempUv.y = clippedVertices[v + 7];\r\n                if (_useTint) {\r\n                    _darkColor.set(clippedVertices[v + 8], clippedVertices[v + 9], clippedVertices[v + 10], clippedVertices[v + 11]);\r\n                } else {\r\n                    _darkColor.set(0, 0, 0, 0);\r\n                }\r\n                _vertexEffect.transform(_tempPos, _tempUv, _finalColor, _darkColor);\r\n\r\n                vbuf[offset] = _tempPos.x;             // x\r\n                vbuf[offset + 1] = _tempPos.y;         // y\r\n                vbuf[offset + 2] = _tempUv.x;          // u\r\n                vbuf[offset + 3] = _tempUv.y;          // v\r\n                uintVData[offset + 4] = _spineColorToInt32(_finalColor);\r\n                if (_useTint) {\r\n                    uintVData[offset + 5] = _spineColorToInt32(_darkColor);\r\n                }\r\n            }\r\n        } else {\r\n            for (let v = 0, n = clippedVertices.length, offset = _vertexFloatOffset; v < n; v += _perClipVertexSize, offset += _perVertexSize) {\r\n                vbuf[offset]     = clippedVertices[v];         // x\r\n                vbuf[offset + 1] = clippedVertices[v + 1];     // y\r\n                vbuf[offset + 2] = clippedVertices[v + 6];     // u\r\n                vbuf[offset + 3] = clippedVertices[v + 7];     // v\r\n\r\n                _finalColor32 = ((clippedVertices[v + 5]<<24) >>> 0) + (clippedVertices[v + 4]<<16) + (clippedVertices[v + 3]<<8) + clippedVertices[v + 2];\r\n                uintVData[offset + 4] = _finalColor32;\r\n\r\n                if (_useTint) {\r\n                    _darkColor32 = ((clippedVertices[v + 11]<<24) >>> 0) + (clippedVertices[v + 10]<<16) + (clippedVertices[v + 9]<<8) + clippedVertices[v + 8];\r\n                    uintVData[offset + 5] = _darkColor32;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nsp.Skeleton.__assembler__.realTimeTraverse = function (worldMat) {\r\n    let vbuf;\r\n    let ibuf;\r\n\r\n    let locSkeleton = _comp._skeleton;\r\n    let skeletonColor = locSkeleton.color;\r\n    let graphics = _comp._debugRenderer;\r\n    let clipper = _comp._clipper;\r\n    let material = null;\r\n    let attachment, attachmentColor, slotColor, uvs, triangles;\r\n    let isRegion, isMesh, isClip;\r\n    let offsetInfo;\r\n    let slot;\r\n    let worldMatm;\r\n\r\n    _slotRangeStart = _comp._startSlotIndex;\r\n    _slotRangeEnd = _comp._endSlotIndex;\r\n    _inRange = false;\r\n    if (_slotRangeStart == -1) _inRange = true;\r\n\r\n    _debugSlots = _comp.debugSlots;\r\n    _debugBones = _comp.debugBones;\r\n    _debugMesh = _comp.debugMesh;\r\n    if (graphics && (_debugBones || _debugSlots || _debugMesh)) {\r\n        graphics.clear();\r\n        graphics.lineWidth = 2;\r\n    }\r\n\r\n    // x y u v r1 g1 b1 a1 r2 g2 b2 a2 or x y u v r g b a \r\n    _perClipVertexSize = _useTint ? 12 : 8;\r\n\r\n    _vertexFloatCount = 0;\r\n    _vertexFloatOffset = 0;\r\n    _vertexOffset = 0;\r\n    _indexCount = 0;\r\n    _indexOffset = 0;\r\n\r\n    for (let slotIdx = 0, slotCount = locSkeleton.drawOrder.length; slotIdx < slotCount; slotIdx++) {\r\n        slot = locSkeleton.drawOrder[slotIdx];\r\n\r\n        if(slot == undefined || !slot.bone.active) {\r\n            continue;\r\n        }\r\n\r\n        if (_slotRangeStart >= 0 && _slotRangeStart == slot.data.index) {\r\n            _inRange = true;\r\n        }\r\n        \r\n        if (!_inRange) {\r\n            clipper.clipEndWithSlot(slot);\r\n            continue;\r\n        }\r\n\r\n        if (_slotRangeEnd >= 0 && _slotRangeEnd == slot.data.index) {\r\n            _inRange = false;\r\n        }\r\n\r\n        _vertexFloatCount = 0;\r\n        _indexCount = 0;\r\n\r\n        attachment = slot.getAttachment();\r\n        if (!attachment) {\r\n            clipper.clipEndWithSlot(slot);\r\n            continue;\r\n        }\r\n\r\n        isRegion = attachment instanceof spine.RegionAttachment;\r\n        isMesh = attachment instanceof spine.MeshAttachment;\r\n        isClip = attachment instanceof spine.ClippingAttachment;\r\n\r\n        if (isClip) {\r\n            clipper.clipStart(slot, attachment);\r\n            continue;\r\n        }\r\n\r\n        if (!isRegion && !isMesh) {\r\n            clipper.clipEndWithSlot(slot);\r\n            continue;\r\n        }\r\n\r\n        material = _getSlotMaterial(attachment.region.texture._texture, slot.data.blendMode);\r\n        if (!material) {\r\n            clipper.clipEndWithSlot(slot);\r\n            continue;\r\n        }\r\n\r\n        if (_mustFlush || material.getHash() !== _renderer.material.getHash()) {\r\n            _mustFlush = false;\r\n            _renderer._flush();\r\n            _renderer.node = _node;\r\n            _renderer.material = material;\r\n        }\r\n\r\n        if (isRegion) {\r\n            \r\n            triangles = _quadTriangles;\r\n\r\n            // insure capacity\r\n            _vertexFloatCount = 4 * _perVertexSize;\r\n            _indexCount = 6;\r\n\r\n            offsetInfo = _buffer.request(4, 6);\r\n            _indexOffset = offsetInfo.indiceOffset,\r\n            _vertexOffset = offsetInfo.vertexOffset,\r\n            _vertexFloatOffset = offsetInfo.byteOffset >> 2;\r\n            vbuf = _buffer._vData,\r\n            ibuf = _buffer._iData;\r\n\r\n            // compute vertex and fill x y\r\n            attachment.computeWorldVertices(slot.bone, vbuf, _vertexFloatOffset, _perVertexSize);\r\n\r\n            // draw debug slots if enabled graphics\r\n            if (graphics && _debugSlots) {\r\n                graphics.strokeColor = _slotColor;\r\n                graphics.moveTo(vbuf[_vertexFloatOffset], vbuf[_vertexFloatOffset + 1]);\r\n                for (let ii = _vertexFloatOffset + _perVertexSize, nn = _vertexFloatOffset + _vertexFloatCount; ii < nn; ii += _perVertexSize) {\r\n                    graphics.lineTo(vbuf[ii], vbuf[ii + 1]);\r\n                }\r\n                graphics.close();\r\n                graphics.stroke();\r\n            }\r\n        }\r\n        else if (isMesh) {\r\n            \r\n            triangles = attachment.triangles;\r\n\r\n            // insure capacity\r\n            _vertexFloatCount = (attachment.worldVerticesLength >> 1) * _perVertexSize;\r\n            _indexCount = triangles.length;\r\n\r\n            offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);\r\n            _indexOffset = offsetInfo.indiceOffset,\r\n            _vertexOffset = offsetInfo.vertexOffset,\r\n            _vertexFloatOffset = offsetInfo.byteOffset >> 2;\r\n            vbuf = _buffer._vData,\r\n            ibuf = _buffer._iData;\r\n\r\n            // compute vertex and fill x y\r\n            attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, vbuf, _vertexFloatOffset, _perVertexSize);\r\n\r\n            // draw debug mesh if enabled graphics\r\n            if (graphics && _debugMesh) {\r\n                graphics.strokeColor = _meshColor;\r\n\r\n                for (let ii = 0, nn = triangles.length; ii < nn; ii += 3) {\r\n                    let v1 = triangles[ii] * _perVertexSize + _vertexFloatOffset;\r\n                    let v2 = triangles[ii + 1] * _perVertexSize + _vertexFloatOffset;\r\n                    let v3 = triangles[ii + 2] * _perVertexSize + _vertexFloatOffset;\r\n                    \r\n                    graphics.moveTo(vbuf[v1], vbuf[v1 + 1]);\r\n                    graphics.lineTo(vbuf[v2], vbuf[v2 + 1]);\r\n                    graphics.lineTo(vbuf[v3], vbuf[v3 + 1]);\r\n                    graphics.close();\r\n                    graphics.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_vertexFloatCount == 0 || _indexCount == 0) {\r\n            clipper.clipEndWithSlot(slot);\r\n            continue;\r\n        }\r\n\r\n        // fill indices\r\n        ibuf.set(triangles, _indexOffset);\r\n\r\n        // fill u v\r\n        uvs = attachment.uvs;\r\n        for (let v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount, u = 0; v < n; v += _perVertexSize, u += 2) {\r\n            vbuf[v + 2] = uvs[u];           // u\r\n            vbuf[v + 3] = uvs[u + 1];       // v\r\n        }\r\n\r\n        attachmentColor = attachment.color,\r\n        slotColor = slot.color;\r\n\r\n        this.fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot);\r\n        \r\n        // reset buffer pointer, because clipper maybe realloc a new buffer in file Vertices function.\r\n        vbuf = _buffer._vData,\r\n        ibuf = _buffer._iData;\r\n\r\n        if (_indexCount > 0) {\r\n            for (let ii = _indexOffset, nn = _indexOffset + _indexCount; ii < nn; ii++) {\r\n                ibuf[ii] += _vertexOffset;\r\n            }\r\n\r\n            if (worldMat) {\r\n                worldMatm = worldMat.m;\r\n                _m00 = worldMatm[0];\r\n                _m04 = worldMatm[4];\r\n                _m12 = worldMatm[12];\r\n                _m01 = worldMatm[1];\r\n                _m05 = worldMatm[5];\r\n                _m13 = worldMatm[13];\r\n                for (let ii = _vertexFloatOffset, nn = _vertexFloatOffset + _vertexFloatCount; ii < nn; ii += _perVertexSize) {\r\n                    _x = vbuf[ii];\r\n                    _y = vbuf[ii + 1];\r\n                    vbuf[ii] = _x * _m00 + _y * _m04 + _m12;\r\n                    vbuf[ii + 1] = _x * _m01 + _y * _m05 + _m13;\r\n                }\r\n            }\r\n            _buffer.adjust(_vertexFloatCount / _perVertexSize, _indexCount);\r\n        }\r\n\r\n        clipper.clipEndWithSlot(slot);\r\n    }\r\n\r\n    clipper.clipEnd();\r\n\r\n    if (graphics && _debugBones) {\r\n        let bone;\r\n        graphics.strokeColor = _boneColor;\r\n        graphics.fillColor = _slotColor; // Root bone color is same as slot color.\r\n\r\n        for (let i = 0, n = locSkeleton.bones.length; i < n; i++) {\r\n            bone = locSkeleton.bones[i];\r\n            let x = bone.data.length * bone.a + bone.worldX;\r\n            let y = bone.data.length * bone.c + bone.worldY;\r\n\r\n            // Bone lengths.\r\n            graphics.moveTo(bone.worldX, bone.worldY);\r\n            graphics.lineTo(x, y);\r\n            graphics.stroke();\r\n\r\n            // Bone origins.\r\n            graphics.circle(bone.worldX, bone.worldY, Math.PI * 1.5);\r\n            graphics.fill();\r\n            if (i === 0) {\r\n                graphics.fillColor = _originColor;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nsp.Skeleton.__assembler__.cacheTraverse = function (worldMat) {\r\n    \r\n    let frame = _comp._curFrame;\r\n    if (!frame) return;\r\n\r\n    let segments = frame.segments;\r\n    if (segments.length == 0) return;\r\n\r\n    let vbuf, ibuf, uintbuf;\r\n    let material;\r\n    let offsetInfo;\r\n    let vertices = frame.vertices;\r\n    let indices = frame.indices;\r\n    let worldMatm;\r\n\r\n    let frameVFOffset = 0, frameIndexOffset = 0, segVFCount = 0;\r\n    if (worldMat) {\r\n        worldMatm = worldMat.m;\r\n        _m00 = worldMatm[0];\r\n        _m01 = worldMatm[1];\r\n        _m04 = worldMatm[4];\r\n        _m05 = worldMatm[5];\r\n        _m12 = worldMatm[12];\r\n        _m13 = worldMatm[13];\r\n    }\r\n\r\n    let justTranslate = _m00 === 1 && _m01 === 0 && _m04 === 0 && _m05 === 1;\r\n    let needBatch = (_handleVal & FLAG_BATCH);\r\n    let calcTranslate = needBatch && justTranslate;\r\n\r\n    let colorOffset = 0;\r\n    let colors = frame.colors;\r\n    let nowColor = colors[colorOffset++];\r\n    let maxVFOffset = nowColor.vfOffset;\r\n    _handleColor(nowColor);\r\n\r\n    for (let i = 0, n = segments.length; i < n; i++) {\r\n        let segInfo = segments[i];\r\n        material = _getSlotMaterial(segInfo.tex, segInfo.blendMode);\r\n        if (!material) continue;\r\n\r\n        if (_mustFlush || material.getHash() !== _renderer.material.getHash()) {\r\n            _mustFlush = false;\r\n            _renderer._flush();\r\n            _renderer.node = _node;\r\n            _renderer.material = material;\r\n        }\r\n\r\n        _vertexCount = segInfo.vertexCount;\r\n        _indexCount = segInfo.indexCount;\r\n\r\n        offsetInfo = _buffer.request(_vertexCount, _indexCount);\r\n        _indexOffset = offsetInfo.indiceOffset;\r\n        _vertexOffset = offsetInfo.vertexOffset;\r\n        _vfOffset = offsetInfo.byteOffset >> 2;\r\n        vbuf = _buffer._vData;\r\n        ibuf = _buffer._iData;\r\n        uintbuf = _buffer._uintVData;\r\n\r\n        for (let ii = _indexOffset, il = _indexOffset + _indexCount; ii < il; ii++) {\r\n            ibuf[ii] = _vertexOffset + indices[frameIndexOffset++];\r\n        }\r\n\r\n        segVFCount = segInfo.vfCount;\r\n        vbuf.set(vertices.subarray(frameVFOffset, frameVFOffset + segVFCount), _vfOffset);\r\n        frameVFOffset += segVFCount;\r\n\r\n        if (calcTranslate) {\r\n            for (let ii = _vfOffset, il = _vfOffset + segVFCount; ii < il; ii += 6) {\r\n                vbuf[ii] += _m12;\r\n                vbuf[ii + 1] += _m13;\r\n            }\r\n        } else if (needBatch) {\r\n            for (let ii = _vfOffset, il = _vfOffset + segVFCount; ii < il; ii += 6) {\r\n                _x = vbuf[ii];\r\n                _y = vbuf[ii + 1];\r\n                vbuf[ii] = _x * _m00 + _y * _m04 + _m12;\r\n                vbuf[ii + 1] = _x * _m01 + _y * _m05 + _m13;\r\n            }\r\n        }\r\n\r\n        _buffer.adjust(_vertexCount, _indexCount);\r\n        if ( !_needColor ) continue;\r\n\r\n        // handle color\r\n        let frameColorOffset = frameVFOffset - segVFCount;\r\n        for (let ii = _vfOffset + 4, il = _vfOffset + 4 + segVFCount; ii < il; ii += 6, frameColorOffset += 6) {\r\n            if (frameColorOffset >= maxVFOffset) {\r\n                nowColor = colors[colorOffset++];\r\n                _handleColor(nowColor);\r\n                maxVFOffset = nowColor.vfOffset;\r\n            }\r\n            uintbuf[ii] = _finalColor32;\r\n            uintbuf[ii + 1] = _darkColor32;\r\n        }\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nsp.Skeleton.__assembler__.fillBuffers = function (comp, renderer) {\r\n    \r\n    let node = comp.node;\r\n    // @ts-ignore\r\n    node._renderFlag |= cc.RenderFlow.FLAG_UPDATE_RENDER_DATA;\r\n    if (!comp._skeleton) return;\r\n\r\n    let nodeColor = node._color;\r\n    _nodeR = nodeColor.r / 255;\r\n    _nodeG = nodeColor.g / 255;\r\n    _nodeB = nodeColor.b / 255;\r\n    _nodeA = nodeColor.a / 255;\r\n\r\n    _useTint = comp.useTint || comp.isAnimationCached();\r\n    _vertexFormat = _useTint? VFTwoColor : VFOneColor;\r\n    // x y u v color1 color2 or x y u v color\r\n    _perVertexSize = _useTint ? 6 : 5;\r\n\r\n    _node = comp.node;\r\n    _buffer = renderer.getBuffer('spine', _vertexFormat);\r\n    _renderer = renderer;\r\n    _comp = comp;\r\n\r\n    _mustFlush = true;\r\n    _premultipliedAlpha = comp.premultipliedAlpha;\r\n    _multiplier = 1.0;\r\n    _handleVal = 0x00;\r\n    _needColor = false;\r\n    _vertexEffect = comp._effectDelegate && comp._effectDelegate._vertexEffect;\r\n\r\n    if (nodeColor._val !== 0xffffffff || _premultipliedAlpha) {\r\n        _needColor = true;\r\n    }\r\n\r\n    if (_useTint) {\r\n        _handleVal |= FLAG_TWO_COLOR;\r\n    }\r\n\r\n    let worldMat = undefined;\r\n    if (_comp.enableBatch) {\r\n        worldMat = _node._worldMatrix;\r\n        _mustFlush = false;\r\n        _handleVal |= FLAG_BATCH;\r\n    }\r\n\r\n    if (comp.isAnimationCached()) {\r\n        // Traverse input assembler.\r\n        this.cacheTraverse(worldMat);\r\n    } else {\r\n        if (_vertexEffect) _vertexEffect.begin(comp._skeleton);\r\n        this.realTimeTraverse(worldMat);\r\n        if (_vertexEffect) _vertexEffect.end();\r\n    }\r\n\r\n    // Clear temp var.\r\n    _node = undefined;\r\n    _buffer = undefined;\r\n    _renderer = undefined;\r\n    _comp = undefined;\r\n    _vertexEffect = null;\r\n}\r\n\r\n"]}